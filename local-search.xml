<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>秒杀业务方案思路</title>
    <link href="/2021/04/28/2021-04-28-miao-sha-ye-wu/"/>
    <url>/2021/04/28/2021-04-28-miao-sha-ye-wu/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>秒杀业务最大的业务特点，短时间内，高并发，大量读请求，大量的写请求。如果不经任何优化，直接将全部读写请求打到数据库层，数据库层由于锁冲突，特别是热点数据行锁冲突，很容易造成死锁，降低数据库执行效率。而且流量很大的情况，很容易将会把数据库压死。数据库层若挂了，如果再次启动，很可能又会被大流量再次压垮。</p><p>从系统的角度来看，在秒杀业务的情况下，我们要保护数据层的安全。 </p><p>为了保证数据库的安全，我们就要降低最后到达数据库层读写流量，使其一直处于安全的情况下运行。 </p><p>从读写方向，优化思路： </p><ul><li>降读 </li><li>降写 </li></ul><p>降低数据层读请求，主要办法就是加缓存，数据优先读取缓存，缓存不存在再从数据库层读取。缓存解决办法比较多，下面主要介绍降写的处理办法。 </p><p>降低数据层写请求，我们就必须在上游应用层过滤写清求。 </p><h2 id="技术优化手段"><a href="#技术优化手段" class="headerlink" title="技术优化手段"></a>技术优化手段</h2><p>假设我们的系统架构如下： </p><p>网站/APP—-&gt;站点接入应用——&gt;后台服务—-&gt;数据库层 </p><p>我们可以在这三层做优化，拦截写请求，降低数据层写压力。 </p><p>在网站/APP 层，我们可以使用 JS 等手段，防止用户重复点击。 </p><p>不过这种手段只能预防普通用户，高级用户可以通过抓包获取请求接口，通过程序发起，绕开 JS。 </p><p>所以我们需要在站点接入层通过计数的方式，防止同一用户频繁发送请求。比如我们可以限制同一用户每 5 秒，只有一次请求才有效，其余请求返回请求速率过快。 </p><p>站点层只能限制单一用户，可以通过多用户手段绕开这一限制。</p><p> 等到写请求到达服务层，服务层可以发送到 MQ 队列或者内存队列，然后根据库存数量，或者数据库抗压能力处理。 </p><p>比如说某件商品库存只有 2000 个，这时服务层现收到 2 w 个写请求，全部发送到队列中。假设数据库层只能最大只能处理 1000 个写请求，那我们消费程序就拉取 1000 条消息，真正进行数据写请求。 </p><p>写入成功之后，再次消费消息，直到库存为 0 。这时剩下的消息，都无需再执行数据库的写请求。 </p><h2 id="产品手段"><a href="#产品手段" class="headerlink" title="产品手段"></a>产品手段</h2><p>除了上述的技术手段之外，我们还可以在产品设计方面减少写请求。 </p><p>我们可以在页面使下单按钮置灰，防止重复点击。 </p><p>我们还可以页面是不显示库存具体数量，只显示库存的是否还有，降低缓存的淘汰率。 </p><p>我们还可以将下单与支付流程分离，下单成功后，才能去支付。这时支付系统的压力就很小很多。 </p><h3 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h3><p><strong>站点层服务压力很大的处理方案</strong> </p><p>在我们上面的方案中，站点接入层需要计数过滤，压力可能会很大。由于站点接入层一般都是无状态应用，可以水平扩展。所以我们可以适当增加机器，增加处理能力。 </p><p>另外，我们还可以设置一定阈值，等请求到达阈值之后，服务降级，抛弃后续请求。 </p><p><strong>计数问题</strong> 计数我们可以存储在 Redis 中，如果 Redis 性能不够，我们可以水平扩展，使用类似 Redis Cluster 方案。  </p><p>Redis 吞吐量很大，如果害怕网络带宽成为瓶颈，我们可以考虑不使用 Redis ，直接在内存中计数，不过这种方案就需要考虑数据一致性。 </p><p>如果使用内存计数，同一用户的请求就必须落在同一台机器上。这里的处理的方案我们可以在 Nginx 层使用 用户 ID 切分，然后在分发到的站点接入层。 </p><p>另外使用内存计数，我们降低数据的一致性与准确性，允许因业务重启，导致内存的丢失的情况。 </p><p><strong>队列异步处理，浏览器/APP处理方式</strong> </p><p>1.在请求发送到队列中时，我们可以提前预分配一个订单号，消息发送成功，将订单号返回给页面 </p><p>2.浏览器/APP 拿到订单号返回之后，跳转到中间也，然后定时轮询。页面我们可以提示用户，订单正在排队中，若刷新将会再次进入排队，防止用户再次刷新下单。  </p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/20210428142339.png"></p>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>秒杀业务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逛一逛大唐芙蓉园</title>
    <link href="/2021/04/26/2021-04-26-lotus-palace-of-tang-dynasty/"/>
    <url>/2021/04/26/2021-04-26-lotus-palace-of-tang-dynasty/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>3月底刚好鲜花盛开之际，去逛了下大唐芙蓉园</p><p>来西安有两年半有余，还是第一次来大唐芙蓉园，实在惭愧啊</p><p>关键是那时候门票1百多，这时候门票50，就不请自来了😂</p><p>达到大唐芙蓉园地铁站就很有特色了，壁画映入眼帘</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426081522.jpg"></div><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426081540.jpg"></div></div></div><p>在大唐芙蓉园门口，有视频博主在拍介绍西安大唐芙蓉园的视频</p><video id="video" controls="" preload="none" style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;" poster="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426101600.png">      <source id="mp4" src="https://images.niaobulashi.com/hexo/niaobulashi/202103/819ee081ce324e6360c218071c46baf6.mp4" type="video/mp4"></video><p>在门口买两张票，外地人50，本地人和学生半价25😅</p><p>门口的建筑上面写着大唐芙蓉园，下方是御苑门</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426091718.jpg"></div><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426091724.jpg"></div></div></div><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426102223.jpg"></p><p>进入大门是一个超大刻章写的：大唐芙蓉园的字样<br>前方是一座由龙凤缠绕的桥，在晚上灯光都打开的情况下，肯定会绚丽夺目</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426091743.jpg"></div><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426091749.jpg"></div></div></div><p>在路边可以看到：大唐芙蓉园全景游览图<br>我们是从大门进入，逆时针方向走绕了一圈，最后回来到中间的紫云楼<br><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426091648.jpg" alt="大唐芙蓉园全景游览图"></p><p>然后就是散散步看看花花草草，嫩绿的小草都长了出来</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426092807.jpg"></div><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426095102.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426095112.jpg"></div></div></div><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426095108.jpg"></p><p>赤走金龙</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426092816.jpg"></div><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426092820.jpg"></div></div></div><p>在拐角处有小溪流<br><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426095056.jpg"></p><p>拐过去是个商铺区，刚好吃了点小吃</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426095117.jpg"><br><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426095122.jpg"></p><p>在曲江胡店还可以观看乐曲<br><video id="video" controls="" preload="none" style="max-width: 100%; display: block; margin-left: auto; margin-right:auto;" poster="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426113124.png"><br>      <source id="mp4" src="https://images.niaobulashi.com/hexo/niaobulashi/202103/2a7072f647e6ebe2c274fe8b97c335bc.mp4" type="video/mp4"><br></video></p><video id="video" controls="" preload="none" style="max-width: 100%; display: block; margin-left: auto; margin-right:auto;" poster="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426113141.png">      <source id="mp4" src="https://images.niaobulashi.com/hexo/niaobulashi/202103/22e0e8b6dbfb59b5a77e924d8e37a1c3.mp4" type="video/mp4"></video><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426095147.jpg"></p><p>一开始以为是配音，凑近了看是真实的用乐器在演奏👍</p><p>在彩霞亭，风景优美，坐在长亭的板凳上，欣赏风景，休息休息</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426095207.jpg"></div><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426095212.jpg"></div></div></div><p>经过环湖的长廊<br><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426095202.jpg"><br><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426095216.jpg"></p><p>绕了一圈后，最后进入紫云路区域</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426095221.jpg"></div><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426095236.jpg"></div></div></div><p>在紫云路内部</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426095228.jpg"></div><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426095232.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426095240.jpg"></div><div class="group-image-wrap"><img src="https://images.niaobulashi.com/hexo/niaobulashi/202103/20210426095244.jpg"></div></div></div><p>差不多下午4点多回去了。来的时间没有安排好，最好是下午4点或者5点来最好</p><p>因为到了晚上，很多都会亮灯，各种建筑都会有灯光展示，绝对好看</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我国适龄儿童可免费接种15种疫苗</title>
    <link href="/2021/04/25/2021-04-25-child-yimiao/"/>
    <url>/2021/04/25/2021-04-25-child-yimiao/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>近日，国家卫健委公布《国家免疫规划疫苗儿童免疫程序及说明》，列出了部分疫苗剂次的接种起始年龄。今天，全国儿童预防接种日。一图看懂儿童接种疫苗时间↓</p><p>会用到的，记录一下。</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/20210425111946.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最近有点沉迷switch游戏</title>
    <link href="/2021/04/23/2021-04-23-zui-jin-cheng-mi-you-xi/"/>
    <url>/2021/04/23/2021-04-23-zui-jin-cheng-mi-you-xi/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>主要是最近这几个月都不太忙，基本上不怎么加班，我就喜欢这样的工作节奏。</p></blockquote><p>因为不加班，那就得找点事情来做，玩玩游戏啥的</p><p>说到游戏，那我就来劲了<br><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/9YWMv.gif" alt="hh"></p><h2 id="小时候"><a href="#小时候" class="headerlink" title="小时候"></a>小时候</h2><p>小时候我哥带着我玩过不少游戏</p><p>那时候都是小霸王学习机，和父母说搞学习用的，其实是买回来玩游戏的</p><p>卡带都是那种多少合一的，我哥买了好多游戏卡带，超级多，可惜现在都找不到了</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/xiaobawang.webp" alt="小霸王游戏机"></p><p>那个时候我只知道小霸王，不知道什么红白机</p><p>村里的儿时玩伴也会来我家一起玩游戏</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/20210423160513.jpg" alt="一起玩游戏"></p><p>我也会去他们家，玩不同的游戏卡带，也经常交换着卡带玩哈哈哈哈哈</p><h2 id="长大了"><a href="#长大了" class="headerlink" title="长大了"></a>长大了</h2><p>因为小时候有这些经历，长大了工作后，会比较倾向接触游戏这块</p><p>没有我电脑PC上的steam游戏了，主要是工作需要，得用笔记本，就一直放在办公位上</p><p>之前玩steam游戏周末都会背着笔记本回来，现在我怕上下班来回路上背久了把笔记本背坏了</p><p>好家伙那可是吃饭的家伙，可不敢折腾电脑。</p><p>所幸之前买的switch一直在吃灰，现在终于可以拿出来用了</p><p>手里目前有switch、3ds和一个开源掌机<br><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/20210423144710.jpg" alt="游戏机"></p><p>一共有11个游戏卡带</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/20210423144723.jpg" alt="switch游戏卡带"></p><p>其他部分就是数字版的游戏<br><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/20210423_01.jpg" alt="游戏1"><br><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/20210423_02.jpg" alt="游戏2"><br><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/20210423_03.jpg" alt="游戏3"><br><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/20210423_04.jpg" alt="游戏4"><br><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/20210423_05.jpg" alt="游戏5"></p><p>好家伙，游戏这么多，玩的过来吗？😝</p><p>玩不过来是真的，可以不玩但不能没有😂</p><p>不抽烟不喝酒的我，就是喜欢玩点游戏</p><p>还是不能太沉迷了，偶尔玩玩没事，可不能上瘾了</p><p>得回归一下正常的生活</p><h2 id="回到过去"><a href="#回到过去" class="headerlink" title="回到过去"></a>回到过去</h2><p>小时候那时除了作业的烦恼，真的可以无忧无虑</p><p>夏天去小溪流抓鱼，冬天一起打雪仗堆雪人</p><p>玩四驱车，去游泳，丢石子，打麻将，过河（地上划线）、过家家、探险、遛弯、踢足球、打篮球等等等等</p><p>好多好多，童年的美好时光，都历历在目</p><p>哭过也笑过</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>老家通城</title>
    <link href="/2021/04/23/2021-04-23-lao-jia-tong-cheng/"/>
    <url>/2021/04/23/2021-04-23-lao-jia-tong-cheng/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>纪念一下老家通城，土生土长的地方</p></blockquote><p>老家通城上个世纪的那些老房子</p><p>都在岁月斑驳里被拆了</p><p>那些熟悉的街道都变了模样</p><p>有些东西在时代更迭里弄丢了</p><p>有些事情在兜兜转转给忘了</p><p>通城，就在这不知不觉中慢慢“消失”了</p><p>我们家也快要拆了</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/20210423094521.jpg" alt="家的院子1"></p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/20210423094542.jpg" alt="家的院子2"></p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/20210423094547.jpg" alt="家的院子3"></p><h2 id="消失的生活"><a href="#消失的生活" class="headerlink" title="消失的生活"></a><strong>消失的生活</strong></h2><p>那时候邻里间处得就跟一家人似的</p><p>有事大家帮忙不要工钱</p><p>还集体出工</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/5_640.jpg" alt="插秧"></p><p>在甘薯地里追肥的老照片</p><p>那时候一家人晚饭后</p><p>在房前看星星乘凉，孩子们嬉闹玩耍</p><p>没有手机，没有电脑</p><p>交流很多，感情很浓</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/6_640.jpg" alt="一家人的晚饭后"></p><p>那时候，我们没心没肺</p><p>无忧无虑，无拘无束</p><h2 id="老行当"><a href="#老行当" class="headerlink" title="老行当"></a><strong>老行当</strong></h2><h3 id="1、弹棉花"><a href="#1、弹棉花" class="headerlink" title="1、弹棉花"></a>1、弹棉花</h3><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/7_640.jpg" alt="弹棉花"></p><p><strong>一张弹弓</strong></p><p><strong>一张磨盘</strong></p><p><strong>一个弹花锤</strong></p><p><strong>一条牵纱篾</strong></p><p>就是“弹棉郎”最初谋生的全部行当</p><p>旧时代，通城人结婚都必须要</p><p>请人打棉絮</p><p>新打出来的棉絮</p><p>人们会用红毛线在上面写上年份</p><p>转眼间</p><p>“弹棉花”这门老行当渐渐淡出了人们的生活</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/8_640.jpg" alt="弹棉花2"></p><h3 id="2、做草鞋"><a href="#2、做草鞋" class="headerlink" title="2、做草鞋"></a>2、做草鞋</h3><p>草鞋是中国古人发明的一种鞋</p><p>下地干活、上山砍柴</p><p>伐木、采药、狩猎</p><p>不分晴雨</p><p>永远是一双草鞋穿在脚上</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/9_640.jpg" alt="编草席"></p><p>随着历史的发展</p><p>形成了<strong>“草鞋文化”</strong></p><p>表现劳动人民<strong>勤劳、智慧、勇气和奋斗</strong></p><h3 id="3、打铁匠"><a href="#3、打铁匠" class="headerlink" title="3、打铁匠"></a>3、打铁匠</h3><p>打铁铺里</p><p>铁砧上溅出炽热的火光</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/10_640.jpg" alt="打铁匠"></p><p>张打铁、李打铁</p><p>打铁师傅们</p><p>你一下，我一下</p><p>发出“叮叮叮”的声音</p><p>热火朝天…</p><p>通城人用的锄头、菜刀</p><p>斧头、砍柴刀…</p><p>都来自打铁铺</p><h3 id="4、卖货郎"><a href="#4、卖货郎" class="headerlink" title="4、卖货郎"></a>4、卖货郎</h3><p>记忆中，卖货郎推着车</p><p>摇着拨浪鼓</p><p>从大街小巷走过</p><p>身边总是围着一群小孩子</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/11_640.jpg" alt="卖货郎"></p><p>卖货郎的车子是个神奇的<strong>“百货天地”</strong></p><p>各种各样的东西</p><p>应有尽有</p><h3 id="5、老木匠"><a href="#5、老木匠" class="headerlink" title="5、老木匠"></a>5、老木匠</h3><p>读书时候用的书桌、书柜</p><p>都是爷爷一手打造的</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/12_640.jpg" alt="老木匠"></p><p>刚打好的木工制品</p><p>有着一股浓浓的木头的清香味~</p><p>为了纪念</p><p>会在上面写上年份和名字</p><p>“某某某记用”</p><h3 id="6、老篾匠"><a href="#6、老篾匠" class="headerlink" title="6、老篾匠"></a>6、老篾匠</h3><p>篾匠是一门古老的职业</p><p>通城又盛产楠竹</p><p>通城人用的篮子、簸箕、箩筐</p><p>都出自这些老篾匠之手</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/13_640.jpg" alt="老篾匠"></p><p>图来源@刘建平摄影师</p><p>通城励志盲人老篾匠周四甫正在编织篮子</p><h3 id="7、剃头匠"><a href="#7、剃头匠" class="headerlink" title="7、剃头匠"></a>7、剃头匠</h3><p>以前的剃头铺</p><p>很简单也很美好</p><p>一个剃头师傅</p><p>一面镜子</p><p>一张椅子</p><p>一把剃头刀</p><p>就是整个剃头铺的组成</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/14_640.jpg" alt="剃头匠"></p><p>老师傅的手艺很好</p><p>一步一步、不慌不忙</p><p>不出几分钟保准是个焕然一新的你</p><p><strong>8、修鞋匠</strong></p><p>在这个人人都追求潮流的时代</p><p>修鞋，正在变成一个陌生的动词</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/15_640.jpg" alt="修鞋匠"></p><p>小喇叭里总是传来熟悉的声音</p><p><strong>“修鞋、修雨伞、上拉链…”</strong></p><p>修鞋匠是很神奇的存在</p><p>除了修鞋，在他们手里</p><p>只要是能修的，都能给你修好</p><p><strong>9、补锅匠</strong></p><p>在这个人人都用电饭煲的时代</p><p>年轻的一代很少知道</p><p>以前通城有补锅匠这一行当</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/16_640.jpg" alt="补锅匠"></p><p>各种砂锅铁锅锑锅</p><p>师傅都能补</p><p>除了修东西还自带一些其他手艺</p><p>通常都不需要给钱</p><p>只需要给点米就行了</p><h3 id="8、炸米泡"><a href="#8、炸米泡" class="headerlink" title="8、炸米泡"></a>8、炸米泡</h3><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/17_640.jpg" alt="图片"></p><p>曾经在通城大街上那些习以为常的画面</p><p>狭长的街道上、熟悉的叫卖声</p><p>如今何在？还记得“炸米泡”的场景？</p><p>消失的东西还有很多很多</p><p>短短一篇文章根本</p><p>装不下大家满满的回忆</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/18_640.jpg" alt="通城雁塔"></p><p>如今我们都已长大</p><p>通城也在逐渐发生变化</p><p>一座城市的发展</p><p>也意味着许多时代的印记</p><p>在不断地消失</p><p>或许，未来还要迎来更多告别</p><p>但这种“消失”，也意味着一种成长</p><p>城市的成长少不了更替迭代</p><p>那些“消失”的部分</p><p>终有一天，会生长出新的希望！</p><h2 id="未通火车"><a href="#未通火车" class="headerlink" title="未通火车"></a>未通火车</h2><p>比较遗憾的是到现在通城还没有火车</p><p>去武汉还得去客运站坐客车</p><p>如果赶时间的话，就得坐拼车了</p><p>希望以后可以规划建设火车</p><p><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/19_640.jpg" alt="通城客运站"></p><h2 id="房价乱象"><a href="#房价乱象" class="headerlink" title="房价乱象"></a>房价乱象</h2><p>想不通的是，78线小城市，房价竟然可以飙到这么高</p><div id="echarts5482" style="width: 81%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts5482'));        // 指定图表的配置项和数据        var option = {    title: {        text: '通城县房价走势'    },    tooltip: {        trigger: 'axis'    },    legend: {        data: ['通城县', '咸宁']    },    grid: {        left: '3%',        right: '4%',        bottom: '3%',        containLabel: true    },    toolbox: {        feature: {            saveAsImage: {}        }    },    xAxis: {        type: 'category',        boundaryGap: false,        data: [4944, 4986, 4500, 4500, 4500, 4300, 4200, 4172, 4172, 4290, 4290, 4290, 4290]    },    yAxis: {        type: 'value',        scale:true    },    series: [        {            name: '通城县',            type: 'line',            data: [4944, 4986, 4500, 4500, 4500, 4200, 4172, 4172, 4290, 4290, 4290, 4290]        },        {            name: '咸宁',            type: 'line',            data: [4781, 4772, 4675, 4659, 4640, 4625, 4604, 4555, 4557, 4574, 4559, 4649, 4625]        }    ]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script><p>请先把通城的火车规划出来吧</p><p>一个城市的发展不是从炒房价开始的，而是从基建开始。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>通城的发展也越来越快，通城政府吸引着很多公司进驻，打造很多园区和主题性的片区。</p><p>还是下了功夫的，也有不少的可以旅游的地方，可以去逛逛，环境也管理的不错。</p><p>希望不忘初心，稳步发展，钱都掏出来搞城市发展</p><p>一定会越来越好的</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>五一回家一票难求哇</title>
    <link href="/2021/04/21/2021-04-21-wu-yi-hui-jia-piao-nan-mai/"/>
    <url>/2021/04/21/2021-04-21-wu-yi-hui-jia-piao-nan-mai/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>啊啊啊啊，五一来回的票到现在都还没搞定<br>五一都这么难抢，更别说国庆了😭。</p><p>想回去吃家里的饭菜，实在想回去啊。</p><p>刷吧，刷票吧<br><img src="https://images.niaobulashi.com/hexo/niaobulashi/202104/20210421135320.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中科院博士论文走红网络——《致谢》</title>
    <link href="/2021/04/20/2021-04-20-zhi-xie/"/>
    <url>/2021/04/20/2021-04-20-zhi-xie/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>他的世界本无光，他把自己活成了光。</p><p>看前面他对自己经历的描述，更多的是感慨与钦佩。看到最后那几句“理想不伟大，只愿年过半百，归来仍是少年，希望还有机会重新认识这个世界，不辜负这一生吃过的苦。最后如果还能做出点让别人生活更美好的事，那这辈子就赚了。”真心敬仰。</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@3.0/niaobulashi/2021/zhixie.jpg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>（抱歉）博客移植过程友链可能存在缺失</title>
    <link href="/2021/04/10/2021-04-10-bao-qian-bo-ke-yi-zhi-guo/"/>
    <url>/2021/04/10/2021-04-10-bao-qian-bo-ke-yi-zhi-guo/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>实在不好意思啊，请留言我再次添加</p><p>也欢迎新的朋友</p><p>阿里云服务到期之后没有去续期，丢失的是以前小伙伴们的评论<br>想想也是相当可惜了</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@2.0/niaobulashi/2021/1618058065520.jpeg"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客整理迁移至github静态页面</title>
    <link href="/2021/04/09/2021-04-09-bo-ke-zheng-li-qian-yi/"/>
    <url>/2021/04/09/2021-04-09-bo-ke-zheng-li-qian-yi/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前云服务到期了<br>刚买房的原因，续费阿里云服务器费用想要节省出来<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@2.0/niaobulashi/2021/1617878790923.png"></p><p>还有5个小时，云服务就到期了</p><p>但是niaobulashi.com<br>这个域名会一直用下去的。还是可以找到我</p><p>啊 可惜了之前的网站所有的留言，都没有了</p><p>太伤心了</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gridea 检测远程连接失败</title>
    <link href="/2021/04/08/2021-04-08-gridea-jian-ce/"/>
    <url>/2021/04/08/2021-04-08-gridea-jian-ce/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>根据教程设置好一系列信息，经测试域名可访问，并且确保其他信息均正确</p><p>检查远程连接错误：远程连接失败,请检查仓库、用户名和 token 设置</p><p>问题分析<br>先查看 Gridea 文件存储目录：C:\Users\Only\Documents\Gridea\output.git 下的 config 文件，看是否有 [remote “origin”] 信息，如果没有自行添加</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">[remote <span class="hljs-string">&quot;origin&quot;</span>]<br>url = https:<span class="hljs-regexp">//</span>你的github用户名:Token@github.com<span class="hljs-regexp">/你的github用户/</span>仓库名<br>fetch = +refs<span class="hljs-regexp">/heads/</span>*:refs<span class="hljs-regexp">/remotes/</span>origin/*<br><br></code></pre></td></tr></table></figure><p>附：查看Gridea文件存储目录</p><p><img src="https://img-blog.csdnimg.cn/20200308221500462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjAzNDk5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>检查错误信息：</p><p><img src="https://img-blog.csdnimg.cn/20200308221532551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjAzNDk5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><code>[“fatal: unable to access &#39;https://github.com/Epitom…led to connect to github.com port 443: Timed out↵”]</code></p><p>问题解决<br>谷歌 433 错误，得知是没有设置代理服务器的原因。<br>以下为网上一高赞解决方式，可自行尝试，（不过对我的问题无效果）<br>参考链接：<a href="https://blog.csdn.net/runningman2012/article/details/54633677">https://blog.csdn.net/runningman2012/article/details/54633677</a></p><p>再次谷歌 git 如何设置代理服务器</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> http<span class="hljs-variable">.proxy</span> &#x27;socks5:<span class="hljs-comment">//127.0.0.1:1080&#x27;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> https<span class="hljs-variable">.proxy</span> &#x27;socks5:<span class="hljs-comment">//127.0.0.1:1080&#x27;</span><br></code></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/isea533/article/details/84748009">https://blog.csdn.net/isea533/article/details/84748009</a></p><p>再次尝试检测远程连接成功<br>接下来同步查看效果完成后就可以开启开心的写作之旅啦~</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>版本更新到 0.9.2 后重新安装了 Gridea ，再次检测远程连接失败</p><p><img src="https://img-blog.csdnimg.cn/20200308221821293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjAzNDk5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>错误信息</p><p><code>connect ETIMEDOUT 140.82.114.4:443</code></p><p>问题分析<br>cmd 命令行 ping github.com 失败。代理问题<br>问题解决<br>使用 ping 检测工具找一个能够 ping 通 github.com 的 IP，检测工具网址如下：</p><p><a href="http://ping.chinaz.com/github.com">http://ping.chinaz.com/github.com</a></p><p><img src="https://img-blog.csdnimg.cn/20200308221858523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjAzNDk5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>选择一个响应较快的 IP，添加到 C:\Windows\System32\drivers\etc\host 文件末尾：</p><p><img src="https://img-blog.csdnimg.cn/20200308221942255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjAzNDk5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><code>140.82.113.3 github.com</code></p><p>再次检测远程连接，成功。</p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>武汉买房记录</title>
    <link href="/2021/03/09/2021-03-09-wuhan-buy-a-house/"/>
    <url>/2021/03/09/2021-03-09-wuhan-buy-a-house/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="武汉买房记"><a href="#武汉买房记" class="headerlink" title="武汉买房记"></a>武汉买房记</h2><h3 id="看房"><a href="#看房" class="headerlink" title="看房"></a>看房</h3><p>终于在武汉有了自己的一套房，历时三个月的买房历程，记录一下</p><p>从2020年12月20日开始，关注武汉楼盘房价，通过某平台查看<a href="https://wh.fang.anjuke.com/map/loupan/">武汉楼盘的地图房价信息</a>，初步看好江夏区地区的楼盘，均价在13000左右。最终看好保利军运村这个楼盘，主要是下楼就是地铁。同事问了在武汉买房的大学同学，有两个玩得挺好的同学也买在军运村，这更加加强了我想买军运村买房的意愿了。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2021/03/1982273710.png" alt="01.png"></p><p>我以黄鹤楼为武汉中心，保利军运村离黄鹤楼直线具体有13公里。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2021/03/3923628661.png" alt="02.png"></p><p>具体光谷广场车程大约50分钟</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2021/03/2377522364.png" alt="03.png"></p><p>距离江汉路大于1小时路程</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2021/03/145083968.png" alt="04.png"></p><p>还行吧，武昌区，江汉区的房价买不起，这里具体中心城区也不算远。最终定在这里了。</p><p>选房这个步骤没有花太多时间，主要是有两个大学同学买在这里，就加快了选址决心。</p><h3 id="获得限购资格"><a href="#获得限购资格" class="headerlink" title="获得限购资格"></a>获得限购资格</h3><p>选定的保利军运村有限购，所以首先需要满足限购资格</p><p>下图是可以获得购房资格的途径方式：</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2021/03/3919267904.png" alt="05.png"></p><p>如果你是非武汉户口，但是在武汉连续缴满2年社保，提供相关材料即可。</p><p>微信关注：武汉住保房管办事服务</p><p>办理<strong>购房资格核查服务</strong>，就是满足是否符合限购资格。</p><p>因为我还不是武汉户口，所以选择</p><p>2、非本市民户籍居民家庭</p><img src="https://images.niaobulashi.com/typecho/uploads/2021/03/1739115894.png" width="300" hegiht="400" align=center /><p>进去填写身份信息，购房区域信息，我填写江夏区</p><p>下一步，上传相关资料</p><img src="https://images.niaobulashi.com/typecho/uploads/2021/03/1614071536.png" width="300" hegiht="600" align=center /><p>好家伙，这么多材料，身份证、户口簿、结婚证、社保缴纳明细单、个人社保参保证明、劳动合同、个人所得税完税资料。好家伙，准备这些材料花了两天时间。其中社保的材料都可以从网上下载pdf自行打印。</p><p>终于准备好资料了，上传所有资料，下一步，提交，48小时工作时间内容即可办理完成。效率还行。终于过了一天的早上查看办理结果。</p><p>好家伙，审批没有通过，审批结果也写得很明显：2020年3月份社保断缴。。。我擦了</p><img src="https://images.niaobulashi.com/typecho/uploads/2021/03/1330462669.png" width="300" hegiht="500" align=center /><p>抱着侥幸心理，提交这些材料，还真的很严格。。</p><p>还必须是连续缴纳两年的社保记录，断缴一个月都不行。没办法了，还有一条路：办理大学生落户。</p><p>OK，这个就要在另外一个渠道办理了</p><p>通过”武汉本地宝”查询得到</p><p><a href="http://m.wh.bendibao.com/live/118870.shtm">大学毕业生落户武汉</a></p><p>需要提供这么写材料</p><img src="https://images.niaobulashi.com/typecho/uploads/2021/03/551088561.png" width="300" hegiht="500" align=center /><p>又要这么多材料，看到这么多就感觉好麻烦，没法一个一个来吧，其中居住凭证需要和置业顾问联系，填写置业顾问提供的地址，因为我本人不在武汉工作和居住</p><p>全程都是在西安这边准备材料，如果在武汉工作的话，直接写自己真实居住地址就行。</p><p>我是让职业顾问提供他的地址，做一个居住凭证。其他的材料如实提供就行。</p><p>材料准备完成，下一步，提交审批。很快就通过了，剩下的就准备下次回武汉，将资料准备好，直接去江夏区的大桥派出所办理户籍业务就OK了。<strong>注意</strong>：携带的材料必须是你上传的那些材料，需要保持一致，毕业证也必须是原件啊啊啊。</p><img src="https://images.niaobulashi.com/typecho/uploads/2021/03/287611888.png" width="300" hegiht="500" align=center /><p>好，落户业务办理流程，暂时先告一段落。</p><p>因为最后去武汉了，才能正式落户。现在我还在西安，还需要准备其他的资料（money）。</p><h3 id="凑首付"><a href="#凑首付" class="headerlink" title="凑首付"></a>凑首付</h3><p>和置业顾问询问了购买保利军运村的房子，中意105平的那一套，三房两厅两位，南北通透，户型挺正。户型图如下：</p><img src="https://images.niaobulashi.com/typecho/uploads/2021/03/3734251881.png" width="300" hegiht="500" align=center /><p>对于刚需来说，是超级合适的。中意！！！</p><p>置业顾问说首付得50个，给我算了个价格</p><p>OK，准备首付！</p><p>我和我媳妇当时的总资产25万，我预计需要50万的首付，于是就和我爸妈和岳父岳母大人说了买房的打算，都表示支持，我妈那边拿出15万支持，我岳父岳母拿出10万支持，非常感谢能支持我们，非常非常感谢。</p><p>首付可以凑齐，剩下的都好说，谁和钱过不去呢。</p><p>因为岳父岳母大人的10万在2月底才到位，我又怕105平的房子会没有了，于是和顾问说了这个事情，年后才到位，还缺10万左右，顾问说可以首付进行分期，先付1成的首付，在剩下的55天之内，将剩余的2成首付交了就行，OK就这样。</p><p>置业顾问最后给了我一个价格清单。算下来单价：15752一平 精装，首付506333</p><p>本月内首付一成</p><p>剩余而成在首付一成的时间节点往后推55天之内缴纳。</p><img src="https://images.niaobulashi.com/typecho/uploads/2021/03/3054632032.png" width="300" hegiht="500" align=center /><p>给了充足的时间。</p><h3 id="贷款资料"><a href="#贷款资料" class="headerlink" title="贷款资料"></a>贷款资料</h3><p>由于我需要申请组合贷款。</p><p>根据置业顾问提供的资料清单，去准备资料</p><p>办理按揭，需要客户准备复印件:</p><ol><li>身份证3份</li><li>户口本全套1份(首页，户主页，本人页)</li><li>结婚证或者离婚证及离婚协议全套2份</li><li>详细版征信报告(机构打印，不要自查的网络版)</li><li>收入证明</li><li>银行流水</li><li>社保缴存明细或纳税或营业执照</li><li>涉及公积金需要公积金收入证明和公积金缴存明细，公司盖章</li></ol><p>除了收入证明和公积金收入证明，需要公司盖章之外，其他的自己都可以搞定。</p><p>同公司申请收入证明和公积金收入证明。两天就收到啦</p><p>其他材料都准备齐全。</p><p><strong>注意</strong>：如果你要买房，一定要注意自己的征信一定不能花，什么意思呢，就是尽量不要去搞借贷，也不要去申请贷款审批，每一次贷款审批平台都会去查询征信，会在征信报告上留一笔记录</p><p>每一个查询额度，平台都会去查询征信记录，最后会在征信报告上留一笔查询记录，银行人员看到这个会觉得你很缺陷，到处查询借款额度，感觉没有能力偿还按揭贷款。容易过不了审批。</p><p>下图是我的征信报告的查询记录。我傻了吧唧的去各个贷款平台查看自己的贷款额度，幸好不是很多。但是我没有借款记录。</p><img src="https://images.niaobulashi.com/typecho/uploads/2021/03/3483857008.png" width="300" hegiht="500" align=center /><p>所以一定要保证好自己的征信报告的良好。</p><p>这是我媳妇的征信报告，一页纸，干净得很</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2021/03/3817353869.png" alt="14.png"></p><p>其中银行流水，自行去银行打印就行了，打印近6个月的银行流水</p><p>收入证明由公司开具，并由公司的盖章生效。这里需要注意的是：收入证明具有时效性，一般时效性一个月之内吧！最好在最后提供。</p><p>收入证明至少保证大于 两倍的月供</p><p>这个需要你提前计算好，我月供大概6千，收入大于12k差不多就行，没啥问题了。</p><h3 id="回武汉"><a href="#回武汉" class="headerlink" title="回武汉"></a>回武汉</h3><p>准备好一切材料，出发去武汉</p><p>因为购房人写的是我和我媳妇两个人，所以我俩需要一起去签合同。</p><p>因为面签需要在工作日面签。所以请了周四周五两天假，和这周六，一共三天时间办理这些手续</p><p>OK，出发</p><p>买了3月3号晚上的火车票</p><p>西安–&gt;武汉</p><p>3月6号晚上的火车票</p><p>武汉–&gt;西安</p><p>3月4号中午到达武汉，吃个饭后前往江夏区大桥派出所</p><p>办理大学生毕业落户后续的流程</p><p>提供必要的材料，身份证重新拍照</p><p>办理了集体户的武汉户口，因为还没有购房，首先弄的是武汉的集体户，买完房拿到合同了后期转为家庭户。</p><p>没事，这个集体户也可以去申请武汉购房资格核查。</p><p>回到获得限购资格那里。</p><img src="https://images.niaobulashi.com/typecho/uploads/2021/03/1379674122.png" width="300" hegiht="500" align=center /><p>这里可以选择</p><p>1、选择本市户籍购房家庭</p><p>填写家庭信息，下一步</p><img src="https://images.niaobulashi.com/typecho/uploads/2021/03/4239701409.png" width="300" hegiht="500" align=center /><p>瞬间清爽无比，只要三个材料，立马上传，下一步，提交</p><p>本地户口还是方便啊。</p><h3 id="按揭"><a href="#按揭" class="headerlink" title="按揭"></a>按揭</h3><p>第二天去了保利天悦中心，保利开发商的签约中心。</p><p>通过预约好的银行工作人员，开始签约按揭贷款相关合同</p><p>提供材料，看了看没啥问题，开始了签名之路，大约半个小时搞定所有东西。</p><p>一路签了好多资料啊，说实在的，没有细看，本身都是定好了的。</p><p>组合贷款，115万</p><p>公积金贷款额度：472500<br>利率：3.25%</p><p>商业贷款额度：677500</p><p>利率：5.68%</p><p>武汉的商业贷款利率是真的高啊啊啊，全国最高了</p><p>公积金贷款贷的不多，最高只能带这么多，主要是现在的公司太挫了，缴纳的基数太低。</p><p>么得办法，最后是按照这个来的</p><p>算了下，每月月供差不多6千</p><img src="https://images.niaobulashi.com/typecho/uploads/2021/03/2171961456.png" width="300" hegiht="500" align=center /><h3 id="交首付"><a href="#交首付" class="headerlink" title="交首付"></a>交首付</h3><p>第一次缴纳了一成首付166333</p><p>这次回武汉缴纳后面的2成首付：340000</p><p>直接刷卡！</p><p>刷完卡开了收据，这些收据要留好，后面根据这些收据开全额发票。</p><p>全额发票是你转变为武汉家庭户所需要的材料。</p><p>交完首付之后，看了看卡里的余额，也开始变为房奴了</p><p>没办法，还是得有个家</p><p>在大城市还是得有个家</p><p>按揭慢慢还，借的钱慢慢还。</p><p>加油吧，打工人</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>我之前想着买啥房啊，背着一身的债，成为房奴。是的，我之前就是这样想的，不想买房，老家都有房子。</p><p>不买房生活会过得很滋润，想买啥买啥，没啥压力</p><p>可是当想想以后要孩子了，还要跟着我们去漂，去租房子，没有一个归属感，想到这里，这是我不愿意面对的。</p><p>在武汉也至少有个家了，不用到处找宾馆找酒店住了。</p><p>硬着头皮上车了。</p><p>心里的石头也落地了。</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>委托书公证办理材料及范文</title>
    <link href="/2021/01/11/2021-01-11-notarization-of-power-of-attorney/"/>
    <url>/2021/01/11/2021-01-11-notarization-of-power-of-attorney/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>**<a href="https://link.zhihu.com/?target=http://www.egongzheng.com">委托书公证</a>**是指国家公证机关根据当事人的申请，依法证明委托人授权他人以自己的名义实施某种法律行为的意思表示的真实性、合法性的活动。</p><h2 id="委托书办理所需材料"><a href="#委托书办理所需材料" class="headerlink" title="委托书办理所需材料"></a><strong>委托书办理所需材料</strong></h2><p>一、委托人是公民的：</p><ol><li><p>委托人的《居民身份证》的原件和复印件一份;</p></li><li><p>夫妻委托或夫妻间相互委托的应提交《结婚证》的原件和复印件一份;</p></li><li><p>受托人的《居民身份证》复印件或传真件一份;</p></li><li><p>《委托书》文本若干份加公证处存档两份;</p></li></ol><p>二、委托人是企业法人的：</p><ol><li><p>《企业法人营业执照》原本或副本的原件和复印件一份;</p></li><li><p>《机构代码证》原件和复印件一份;</p></li><li><p>企业法定代表人资格证明原件和复印件一份，如任命书、证明;</p></li><li><p>企业法定代表人的《居民身份证》的原件和复印件一份和单位介绍信。</p></li><li><p>《委托书》文本若干份加公证处存档两份;</p></li></ol><p>三、委托人是机关、事业单位或其他组织的：</p><ol><li><p>主管部门制发的主体资格证明原件和复印件，如单位成立的文件;</p></li><li><p>《机构代码证》原件和复印件一份;</p></li><li><p>法定代表人(负责人)资格证明原件和复印件一份，如任命书、证明;</p></li><li><p>法定代表人(负责人)《居民身份证》原件和复印件一份和单位介绍信。</p></li><li><p>《委托书》文本若干份加公证处存档两份;</p></li></ol><h2 id="委托书应具备以下内容"><a href="#委托书应具备以下内容" class="headerlink" title="委托书应具备以下内容"></a><strong>委托书应具备以下内容</strong></h2><ol><li><p>委托人与受托人的基本情况（姓名、性别、出生日期、现在住址）；</p></li><li><p>委托人与受托人的关系；</p></li><li><p>委托的原因；</p></li><li><p>委托的权限（委托权限要明确、具体）；</p></li><li><p>委托期限；</p></li><li><p>受托人有无转委托权；</p></li><li><p>其他应明确的内容。</p></li></ol><h2 id="委托公证书范文："><a href="#委托公证书范文：" class="headerlink" title="*委托公证书范文："></a>*<em>委托公证书范文：</em></h2><p>委托人：xxx，女，xxxx年xx月xxx日出生，现住现住xx省xx市xxxxxxxxx号，身份证号码：xxxxxx。</p><p>受托人：xxx，女，xxxx年xx月xxx日出生，现住xx省xx市xxxxxxxxxxx号，身份证号码：xxxxxx。</p><p>委托人与受托人系xx关系。委托人由于人在国外，现全权委托受托人代办本人xxxx公证事宜。</p><p>受托人在办理上述事项中所签署的一切有关文件，委托人均予以承认并自愿承担一切法律责任。</p><p>受托人无转委托权。</p><p>委托期限自本委托事项办理完毕时止。</p><p>委托人：xxx(签名)</p><p>二0一x年x月x日</p><p>注：处分财产等权利的委托需要提交婚姻状况证明或共有人、主管部门的证明。委托书应注明委托期限，委托权限，有无转委托权。委托处分不动产的，应提交不动产所有权证明。委托书公证不得委托他人代理办理。公证过的委托书内容需要修改的，只能重新办理公证。公证员根据公证事项的具体情况可能需要当事人补充提交其他证件材料。 </p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>家族信托二十大功能解读</title>
    <link href="/2020/12/24/2020-12-24-family-trust/"/>
    <url>/2020/12/24/2020-12-24-family-trust/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img-blog.csdnimg.cn/img_convert/40952db3b9457533031edab42e772f8e.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/13d6445ebe9b890b6f8316ef5387033b.png" alt="图片"></p><p><strong>家族信托</strong>是一种信托机构受个人或家族的委托，代为管理、处置家庭财产的财产管理方式，以实现富人的财富规划及传承目标，最早出现在长达25年经济繁荣期之后的美国。<strong>它</strong>能够更好地帮助高净值人群规划“财富传承”，也逐渐被中国富豪认可。具体来讲：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6aa766c1d8145ef17a5f9d93f7030746.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c90a84956fa2c7519e4a0fdbd3c5b6e4.gif" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/1a2c26e1237b71d3f2e0c83514c49a2f.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/84165124ed61b5ec3336ff8098120e1a.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/3dcc73ca572eb08777fcbcc7f634798c.gif" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/e5d6b70b7930adfe07d10c0699fdffbe.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c217ebe7d7dc1851620a9e9de5207054.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/769c6eca795d7c7aae5dc230d43cedeb.gif" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9d1721d0b9364a8a5f065871aa0f972d.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/598e5a6bbb683d74075495f1e31c9daa.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/10251ca201aeb5f161955ad5d5e0c828.gif" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a053bcd7c77b6217b31cd181556e9428.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a98301603f51ed58d0d3b4d77ff5c94f.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/fc843819bf9f36435bd3fb0db8f5b53a.gif" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c359a94127135ae1b3dd8b4a98870dcc.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c2ad10bd25bfc14629845a2543db8044.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/b802c7937ef22ff9f6e0b3f467352bc8.gif" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/6047f0c47903275f869187226bfcbfa6.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/429d008d12c46eb1eba1193ad7712902.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/f001c68772255218ea88d7664ad73a4f.gif" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/58411731cd23108171b6a6a47a6c2f40.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/f4a982ea99b6a8616a2f3936d0205c61.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/fed3c1662a687f2a4de660fbe9181530.gif" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/2e8a0a34c211e93edbf91fdfcc1ebeff.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5f5f9589b79ed8d2441cd5fefc9c08cd.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/dd9c3cacbce02963efbc41914d5b7d87.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/aa330bd99278cd429eec248f6ac18297.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0a3c4493afaff9c3ec22dba8685dd35a.gif" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c2c87ddd138888a9fb95d6304988d97d.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c5965ca6b4a66ef20eb47a5a34d67c34.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/e8ced656c84ca2c46528351c51b5aba3.gif" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/df7847474b5c44a4ef0e9fa5db618e78.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/63b221eae58385c01c39f6845201feba.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/aaac2b22efeaf66d5033a95ce4e08ada.gif" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/56a032a22314f18763c654904e1e4827.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/70e06da3fb2a52db1d78307ccf314cbd.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/46ed78e7e26000e109c7c8222bdcec89.gif" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/f75db162b04e5c28b60bad41e22c17c7.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/ea22bdbd26330fabec23d21ef4abd781.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/596846e67598e0c21ee8d0aa8c955303.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5c6dd6f72fdfbeebca975b397d90e9b8.gif" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/552e5f1c23f19e98b952f76409a70e0f.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/245760672b7216730b2ad89ba69da6c4.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/27bba46da3c90b8e8eb63233e5bfba85.gif" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/bdf02190c070fc0e3186e5f0e2f62427.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/dca397399cab65ed81b3db76133197a6.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0db97c6caec2a675317dd08d2f61b023.gif" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/23714eeeefd2fb6f195c90b1587237c4.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/dd710e906e335ac4de50e5b2a15d0ee3.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/38b5586903fad74cb2c6dd43b53ae634.png" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/e42b39341c37e365c318351542dad483.gif" alt="图片"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/47447463b5321655f2961cdad93ea485.png" alt="图片"></p>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>家族信托</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>团队如何进行CodeReview</title>
    <link href="/2020/12/14/2020-12-14-how-to-codereview/"/>
    <url>/2020/12/14/2020-12-14-how-to-codereview/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>很多公司都要求项目做CodeReview，但很多项目第一次组织CodeReview往往不知道该如何做，也不知道为什么去做。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/620558722.jpg" alt="codereview1"></p><h2 id="六个不要"><a href="#六个不要" class="headerlink" title="六个不要"></a><strong>六个不要</strong></h2><ol><li>不要刻意的去寻找代码bug</li><li>不要按照自己的编程风格去评论别人的代码</li><li>不要带着抨击和质疑别人能力的心态去进行代码评审</li><li>不要在不确定的问题上争来争去</li><li>不要听不进别人的意见参与者最好</li><li>不要自己都没想明白就提意见</li></ol><h3 id="三个原则"><a href="#三个原则" class="headerlink" title="三个原则"></a><strong>三个原则</strong></h3><ol><li>发现代码的正确性</li><li>分享和学习业务逻辑和设计思路</li><li>高效迅速的完成CodeReview</li></ol><h3 id="Review会议流程"><a href="#Review会议流程" class="headerlink" title="Review会议流程"></a>Review会议流程</h3><h4 id="1-主持者分享业务逻辑和设计思路，技术经验。并且对代码功能进行介绍"><a href="#1-主持者分享业务逻辑和设计思路，技术经验。并且对代码功能进行介绍" class="headerlink" title="1. 主持者分享业务逻辑和设计思路，技术经验。并且对代码功能进行介绍"></a><strong>1. 主持者分享业务逻辑和设计思路，技术经验。并且对代码功能进行介绍</strong></h4><h4 id="2-检查设计的合理性和业务逻辑的正确性"><a href="#2-检查设计的合理性和业务逻辑的正确性" class="headerlink" title="2. 检查设计的合理性和业务逻辑的正确性"></a><strong>2. 检查设计的合理性和业务逻辑的正确性</strong></h4><ol><li>业务流程是否能够走通</li><li>单一职责，入参是否合理</li><li>数据库字段设计是否满足需求，是否满足三范式，实体类设计是否合理</li><li>是否有异常处理机制</li><li>是否影响后续业务的扩展</li><li>关注数据结构：Map, HashMap, List, LinkedList</li><li>是否有影响性能的代码：数据库批量操作，资源是否关闭</li></ol><h4 id="3-检查代码的可读性和可维护性"><a href="#3-检查代码的可读性和可维护性" class="headerlink" title="3. 检查代码的可读性和可维护性"></a><strong>3. 检查代码的可读性和可维护性</strong></h4><ol><li>必要的注释： 类，方法， 复杂代码段</li><li>命名规范</li><li>重复代码抽取成方法</li><li>繁琐代码，能简单实现的地方是否需要优化</li></ol><h4 id="4-总结优缺点"><a href="#4-总结优缺点" class="headerlink" title="4. 总结优缺点"></a><strong>4. 总结优缺点</strong></h4><ol><li>设计思想、技术方法、业务知识</li><li>编程规范、代码风格</li><li>如何避坑</li></ol><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/528365237.jpeg" alt="7dd98d1001e93901ca2d308b444d9ee337d196fa.jpeg"></p>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>团队</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>赛博朋克2077终于不再跳票了</title>
    <link href="/2020/12/08/2020-12-08-CyberPunk2077-1/"/>
    <url>/2020/12/08/2020-12-08-CyberPunk2077-1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>终于可以与下载啦啊啊啊啊</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/3245873410.jpg" alt="cde8ab75dfe9657132ea7c401b9215af58fa0370.jpg"></p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/1140271091.jpg" alt="dde711d4e370383aad83affbb6277815b9e912d4.jpg"></p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/2975780163.jpg" alt="0a3a6b205cac73066bae3dddcb972c07b221dccd.jpg"></p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/2975780163.jpg" alt="0a3a6b205cac73066bae3dddcb972c07b221dccd.jpg"></p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/1858346715.jpg" alt="28234faf246c7efdc8644c511c8a7a70503018b3.jpg"></p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/2565171456.png" alt="CyberPunk 2077"></p>]]></content>
    
    
    <categories>
      
      <category>游戏娱乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
      <tag>Game</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入浅出HashMap</title>
    <link href="/2020/12/04/2020-12-04-java-hashmap01/"/>
    <url>/2020/12/04/2020-12-04-java-hashmap01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="深入浅出学Java——HashMap"><a href="#深入浅出学Java——HashMap" class="headerlink" title="深入浅出学Java——HashMap"></a>深入浅出学Java——HashMap</h2><blockquote><p>哈希表（hash table）<br>也叫散列表，是一种非常重要的数据结构，应用场景及其丰富，许多缓存技术（比如memcached）的核心其实就是在内存中维护一张大的哈希表，本文会对java集合框架中HashMap的实现原理进行讲解，并对JDK7的HashMap源码进行分析。</p></blockquote><h3 id="一、什么是哈希表"><a href="#一、什么是哈希表" class="headerlink" title="一、什么是哈希表"></a><strong>一、什么是哈希表</strong></h3><p>在讨论哈希表之前，我们先大概了解下其他数据结构在新增，查找等基础操作执行性能</p><p><strong>数组</strong>：采用一段连续的存储单元来存储数据。对于指定下标的查找，时间复杂度为O(1)；通过给定值进行查找，需要遍历数组，逐一比对给定关键字和数组元素，时间复杂度为O(n)，当然，对于有序数组，则可采用二分查找，插值查找，斐波那契查找等方式，可将查找复杂度提高为O(logn)；对于一般的插入删除操作，涉及到数组元素的移动，其平均复杂度也为O(n)</p><p><strong>线性链表</strong>：对于链表的新增，删除等操作（在找到指定操作位置后），仅需处理结点间的引用即可，时间复杂度为O(1)，而查找操作需要遍历链表逐一进行比对，复杂度为O(n)</p><p><strong>二叉树</strong>：对一棵相对平衡的有序二叉树，对其进行插入，查找，删除等操作，平均复杂度均为O(logn)。</p><p><strong>哈希表</strong>：相比上述几种数据结构，在哈希表中进行添加，删除，查找等操作，性能十分之高，不考虑哈希冲突的情况下（后面会探讨下哈希冲突的情况），仅需一次定位即可完成，时间复杂度为O(1)，接下来我们就来看看哈希表是如何实现达到惊艳的常数阶O(1)的。</p><p>我们知道，数据结构的物理存储结构只有两种：<strong>顺序存储结构</strong>和<strong>链式存储结构</strong>（像栈，队列，树，图等是从逻辑结构去抽象的，映射到内存中，也这两种物理组织形式），而在上面我们提到过，在数组中根据下标查找某个元素，一次定位就可以达到，哈希表利用了这种特性，<strong>哈希表的主干就是数组</strong>。</p><p><strong>比如我们要新增或查找某个元素，我们通过把当前元素的关键字 通过某个函数映射到数组中的某个位置，通过数组下标一次定位就可完成操作。</strong><br>　　<br>这个函数可以简单描述为：<strong>存储位置 = f(关键字)</strong> ，这个函数f一般称为哈希函数，这个函数的设计好坏会直接影响到哈希表的优劣。举个例子，比如我们要在哈希表中执行插入操作：<br>插入过程如下图所示</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/2861980324.png" alt="哈希表数据插入过程"></p><p>查找操作同理，先通过哈希函数计算出实际存储地址，然后从数组中对应地址取出即可。</p><p><strong>哈希冲突</strong></p><p>然而万事无完美，<strong>如果两个不同的元素，通过哈希函数得出的实际存储地址相同怎么办</strong>？也就是说，当我们对某个元素进行哈希运算，得到一个存储地址，然后要进行插入的时候，发现已经被其他元素占用了，其实这就是所谓的<strong>哈希冲突</strong>，也叫<strong>哈希碰撞</strong>。前面我们提到过，哈希函数的设计至关重要，好的哈希函数会尽可能地保证 计算简单和散列地址分布均匀,但是，我们需要清楚的是，数组是一块连续的固定长度的内存空间，再好的哈希函数也不能保证得到的存储地址绝对不发生冲突。那么哈希冲突如何解决呢？哈希冲突的解决方案有多种:开放定址法（发生冲突，继续寻找下一块未被占用的存储地址），再散列函数法，链地址法，而HashMap即是采用了<strong>链地址法</strong>，也就是<strong>数组+链表</strong>的方式。</p><h3 id="二、HashMap的实现原理"><a href="#二、HashMap的实现原理" class="headerlink" title="二、HashMap的实现原理"></a><strong>二、HashMap的实现原理</strong></h3><p>HashMap的主干是一个Entry数组。Entry是HashMap的基本组成单元，每一个Entry包含一个key-value键值对。（其实所谓Map其实就是保存了两个对象之间的映射关系的一种集合）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//HashMap的主干数组，可以看到就是一个Entry数组，初始值为空数组&#123;&#125;，主干数组的长度一定是2的次幂。</span><br><span class="hljs-comment">//至于为什么这么做，后面会有详细分析。</span><br><span class="hljs-keyword">transient</span> Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>Entry是HashMap中的一个静态内部类。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Map</span>.<span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; </span>&#123;<br>        <span class="hljs-keyword">final</span> K key;<br>        V value;<br>        Entry&lt;K,V&gt; next;<span class="hljs-comment">//存储指向下一个Entry的引用，单链表结构</span><br>        <span class="hljs-keyword">int</span> hash;<span class="hljs-comment">//对key的hashcode值进行hash运算后得到的值，存储在Entry，避免重复计算</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Creates new entry.</span><br><span class="hljs-comment">         */</span><br>        Entry(<span class="hljs-keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;<br>            value = v;<br>            next = n;<br>            key = k;<br>            hash = h;<br>        &#125; <br><span class="hljs-number">123456789101112131415</span><br></code></pre></td></tr></table></figure><p>所以，HashMap的总体结构如下：</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/3387915791.png" alt="HashMap的总体结构"></p><p>简单来说，<strong>HashMap由数组+链表组成的</strong>，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的，如果定位到的数组位置不含链表（当前entry的next指向null）,那么查找，添加等操作很快，仅需一次寻址即可；如果定位到的数组包含链表，对于添加操作，其时间复杂度为O(n)，首先遍历链表，存在即覆盖，否则新增；对于查找操作来讲，仍需遍历链表，然后通过key对象的equals方法逐一比对查找。所以，性能考虑，<strong>HashMap中的链表出现越少，性能才会越好。</strong></p><p>其他几个重要字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**实际存储的key-value键值对的个数*/</span><br><span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> size;<br><br><span class="hljs-comment">/**阈值，当table == &#123;&#125;时，该值为初始容量（初始容量默认为16）；当table被填充了，也就是为table分配内存空间后，</span><br><span class="hljs-comment">threshold一般为 capacity*loadFactory。HashMap在进行扩容时需要参考threshold，后面会详细谈到*/</span><br><span class="hljs-keyword">int</span> threshold;<br><br><span class="hljs-comment">/**负载因子，代表了table的填充度有多少，默认是0.75</span><br><span class="hljs-comment">加载因子存在的原因，还是因为减缓哈希冲突，如果初始桶为16，等到满16个元素才扩容，某些桶里可能就有不止一个元素了。</span><br><span class="hljs-comment">所以加载因子默认为0.75，也就是说大小为16的HashMap，到了第13个元素，就会扩容成32。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> loadFactor;<br><br><span class="hljs-comment">/**HashMap被改变的次数，由于HashMap非线程安全，在对HashMap进行迭代时，</span><br><span class="hljs-comment">如果期间其他线程的参与导致HashMap的结构发生变化了（比如put，remove等操作），</span><br><span class="hljs-comment">需要抛出异常ConcurrentModificationException*/</span><br><span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> modCount;<br><span class="hljs-number">1234567891011121314151617</span><br></code></pre></td></tr></table></figure><p>HashMap有4个构造器，其他构造器如果用户没有传入initialCapacity 和loadFactor这两个参数，会使用默认值</p><p>initialCapacity默认为16，loadFactory默认为0.75</p><p>我们看下其中一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity, <span class="hljs-keyword">float</span> loadFactor)</span> </span>&#123;<br>　　　　　<span class="hljs-comment">//此处对传入的初始容量进行校验，最大不能超过MAXIMUM_CAPACITY = 1&lt;&lt;30(230)</span><br>        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal initial capacity: &quot;</span> +<br>                                               initialCapacity);<br>        <span class="hljs-keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)<br>            initialCapacity = MAXIMUM_CAPACITY;<br>        <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                               loadFactor);<br><br>        <span class="hljs-keyword">this</span>.loadFactor = loadFactor;<br>        threshold = initialCapacity;<br>　　　　　<br>        init();<span class="hljs-comment">//init方法在HashMap中没有实际实现，不过在其子类如 linkedHashMap中就会有对应实现</span><br>    &#125;<br><span class="hljs-number">12345678910111213141516</span><br></code></pre></td></tr></table></figure><p>从上面这段代码我们可以看出，在常规构造器中，没有为数组table分配内存空间（有一个入参为指定Map的构造器例外），<strong>而是在执行put操作的时候才真正构建table数组</strong></p><p>OK,接下来我们来看看put操作的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>&#123;<br>        <span class="hljs-comment">//如果table数组为空数组&#123;&#125;，进行数组填充（为table分配实际内存空间），入参为threshold，</span><br>        <span class="hljs-comment">//此时threshold为initialCapacity 默认是1&lt;&lt;4(24=16)</span><br>        <span class="hljs-keyword">if</span> (table == EMPTY_TABLE) &#123;<br>            inflateTable(threshold);<br>        &#125;<br>       <span class="hljs-comment">//如果key为null，存储位置为table[0]或table[0]的冲突链上</span><br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> putForNullKey(value);<br>        <span class="hljs-keyword">int</span> hash = hash(key);<span class="hljs-comment">//对key的hashcode进一步计算，确保散列均匀</span><br>        <span class="hljs-keyword">int</span> i = indexFor(hash, table.length);<span class="hljs-comment">//获取在table中的实际位置</span><br>        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="hljs-keyword">null</span>; e = e.next) &#123;<br>        <span class="hljs-comment">//如果该对应数据已存在，执行覆盖操作。用新value替换旧value，并返回旧value</span><br>            Object k;<br>            <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;<br>                V oldValue = e.value;<br>                e.value = value;<br>                e.recordAccess(<span class="hljs-keyword">this</span>);<br>                <span class="hljs-keyword">return</span> oldValue;<br>            &#125;<br>        &#125;<br>        modCount++;<span class="hljs-comment">//保证并发访问时，若HashMap内部结构发生变化，快速响应失败</span><br>        addEntry(hash, key, value, i);<span class="hljs-comment">//新增一个entry</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><span class="hljs-number">12345678910111213141516171819202122232425</span><br></code></pre></td></tr></table></figure><p>inflateTable这个方法用于为主干数组table在内存中分配存储空间，通过roundUpToPowerOf2(toSize)可以确保capacity为大于或等于toSize的最接近toSize的二次幂，比如toSize=13,则capacity=16;to_size=16,capacity=16;to_size=17,capacity=32.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inflateTable</span><span class="hljs-params">(<span class="hljs-keyword">int</span> toSize)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> capacity = roundUpToPowerOf2(toSize);<span class="hljs-comment">//capacity一定是2的次幂</span><br>        <span class="hljs-comment">/**此处为threshold赋值，取capacity*loadFactor和MAXIMUM_CAPACITY+1的最小值，</span><br><span class="hljs-comment">        capaticy一定不会超过MAXIMUM_CAPACITY，除非loadFactor大于1 */</span><br>        threshold = (<span class="hljs-keyword">int</span>) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="hljs-number">1</span>);<br>        table = <span class="hljs-keyword">new</span> Entry[capacity];<br>        initHashSeedAsNeeded(capacity);<br>    &#125;<br><span class="hljs-number">12345678</span><br></code></pre></td></tr></table></figure><p>roundUpToPowerOf2中的这段处理使得数组长度一定为2的次幂，Integer.highestOneBit是用来获取最左边的bit（其他bit位为0）所代表的数值.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">roundUpToPowerOf2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span> </span>&#123;<br>        <span class="hljs-comment">// assert number &gt;= 0 : &quot;number must be non-negative&quot;;</span><br>        <span class="hljs-keyword">return</span> number &gt;= MAXIMUM_CAPACITY<br>                ? MAXIMUM_CAPACITY<br>                : (number &gt; <span class="hljs-number">1</span>) ? Integer.highestOneBit((number - <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">1</span>) : <span class="hljs-number">1</span>;<br>    &#125;<br><br><span class="hljs-number">1234567</span><br></code></pre></td></tr></table></figure><p>hash函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**这是一个神奇的函数，用了很多的异或，移位等运算</span><br><span class="hljs-comment">对key的hashcode进一步进行计算以及二进制位的调整等来保证最终获取的存储位置尽量分布均匀*/</span><br><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(Object k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> h = hashSeed;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != h &amp;&amp; k <span class="hljs-keyword">instanceof</span> String) &#123;<br>            <span class="hljs-keyword">return</span> sun.misc.Hashing.stringHash32((String) k);<br>        &#125;<br><br>        h ^= k.hashCode();<br><br>        h ^= (h &gt;&gt;&gt; <span class="hljs-number">20</span>) ^ (h &gt;&gt;&gt; <span class="hljs-number">12</span>);<br>        <span class="hljs-keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="hljs-number">7</span>) ^ (h &gt;&gt;&gt; <span class="hljs-number">4</span>);<br>    &#125;<br><span class="hljs-number">12345678910111213</span><br></code></pre></td></tr></table></figure><p>以上hash函数计算出的值，通过indexFor进一步处理来获取实际的存储位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回数组下标</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexFor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> h, <span class="hljs-keyword">int</span> length)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> h &amp; (length-<span class="hljs-number">1</span>);<br>    &#125;<br><span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>h&amp;（length-1）保证获取的index一定在数组范围内，举个例子，默认容量16，length-1=15，h=18,转换成二进制计算为index=2。位运算对计算机来说，性能更高一些（HashMap中有大量位运算）</p><p>所以最终存储位置的确定流程是这样的：<br><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/1750023899.png" alt="HashMap如何确定元素位置"></p><p>再来看看addEntry的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addEntry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, <span class="hljs-keyword">int</span> bucketIndex)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="hljs-keyword">null</span> != table[bucketIndex])) &#123;<br>            resize(<span class="hljs-number">2</span> * table.length);<span class="hljs-comment">//当size超过临界阈值threshold，并且即将发生哈希冲突时进行扩容</span><br>            hash = (<span class="hljs-keyword">null</span> != key) ? hash(key) : <span class="hljs-number">0</span>;<br>            bucketIndex = indexFor(hash, table.length);<br>        &#125;<br><br>        createEntry(hash, key, value, bucketIndex);<br>    &#125;<br><span class="hljs-number">123456789</span><br></code></pre></td></tr></table></figure><p>通过以上代码能够得知，<strong>当发生哈希冲突并且size大于阈值的时候，需要进行数组扩容，扩容时，需要新建一个长度为之前数组2倍的新的数组，然后将当前的Entry数组中的元素全部传输过去，扩容后的新数组长度为之前的2倍，所以扩容相对来说是个耗资源的操作。</strong></p><h3 id="三、为何HashMap的数组长度一定是2的次幂？"><a href="#三、为何HashMap的数组长度一定是2的次幂？" class="headerlink" title="三、为何HashMap的数组长度一定是2的次幂？"></a><strong>三、为何HashMap的数组长度一定是2的次幂？</strong></h3><p>我们来继续看上面提到的resize方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">resize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> newCapacity)</span> </span>&#123;<br>        Entry[] oldTable = table;<br>        <span class="hljs-keyword">int</span> oldCapacity = oldTable.length;<br>        <span class="hljs-keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;<br>            threshold = Integer.MAX_VALUE;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        Entry[] newTable = <span class="hljs-keyword">new</span> Entry[newCapacity];<br>        transfer(newTable, initHashSeedAsNeeded(newCapacity));<br>        table = newTable;<br>        threshold = (<span class="hljs-keyword">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class="hljs-number">1</span>);<br>    &#125;<br><span class="hljs-number">12345678910111213</span><br></code></pre></td></tr></table></figure><p>如果数组进行扩容，数组长度发生变化，而存储位置 index = h&amp;(length-1),index也可能会发生变化，需要重新计算index，我们先来看看transfer这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(Entry[] newTable, <span class="hljs-keyword">boolean</span> rehash)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> newCapacity = newTable.length;<br>　　　　　<span class="hljs-comment">//for循环中的代码，逐个遍历链表，重新计算索引位置，将老数组数据复制到新数组中去（数组不存储实际数据，所以仅仅是拷贝引用而已）</span><br>        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">null</span> != e) &#123;<br>                Entry&lt;K,V&gt; next = e.next;<br>                <span class="hljs-keyword">if</span> (rehash) &#123;<br>                    e.hash = <span class="hljs-keyword">null</span> == e.key ? <span class="hljs-number">0</span> : hash(e.key);<br>                &#125;<br>                <span class="hljs-keyword">int</span> i = indexFor(e.hash, newCapacity);<br>                <span class="hljs-comment">//将当前entry的next链指向新的索引位置,newTable[i]有可能为空，有可能也是个entry链，如果是entry链，直接在链表头部插入。</span><br>                e.next = newTable[i];<br>                newTable[i] = e;<br>                e = next;<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-number">1234567891011121314151617</span><br></code></pre></td></tr></table></figure><p>这个方法将老数组中的数据逐个链表地遍历，扔到新的扩容后的数组中，我们的数组索引位置的计算是通过 对key值的hashcode进行hash扰乱运算后，再通过和 length-1进行位运算得到最终数组索引位置。</p><p>HashMap的数组长度一定保持2的次幂，比如16的二进制表示为 10000，那么length-1就是15，二进制为01111，同理扩容后的数组长度为32，二进制表示为100000，length-1为31，二进制表示为011111。从下图可以我们也能看到这样会保证低位全为1，而扩容后只有一位差异，也就是多出了最左位的1，这样在通过 h&amp;(length-1)的时候，只要h对应的最左边的那一个差异位为0，就能保证得到的新的数组索引和老数组索引一致(大大减少了之前已经散列良好的老数组的数据位置重新调换)，个人理解。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/3047568448.png" alt="5_1607063344221.png"></p><p>还有，数组长度保持2的次幂，length-1的低位都为1，会使得获得的数组索引index更加均匀</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/306216226.png" alt="6_1607063344222.png"></p><p>我们看到，上面的&amp;运算，高位是不会对结果产生影响的（hash函数采用各种位运算可能也是为了使得低位更加散列），我们只关注低位bit，如果低位全部为1，那么对于h低位部分来说，任何一位的变化都会对结果产生影响，也就是说，要得到index=21这个存储位置，h的低位只有这一种组合。这也是数组长度设计为必须为2的次幂的原因。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/2960632191.png" alt="7_1607063344223.png"><br>如果不是2的次幂，也就是低位不是全为1此时，要使得index=21，h的低位部分不再具有唯一性了，哈希冲突的几率会变的更大，同时，index对应的这个bit位无论如何不会等于1了，而对应的那些数组位置也就被白白浪费了。</p><p><strong>get方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>　　　　 <span class="hljs-comment">//如果key为null,则直接去table[0]处去检索即可。</span><br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> getForNullKey();<br>        Entry&lt;K,V&gt; entry = getEntry(key);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span> == entry ? <span class="hljs-keyword">null</span> : entry.getValue();<br> &#125;<br><span class="hljs-number">1234567</span><br></code></pre></td></tr></table></figure><p>get方法通过key值返回对应value，如果key为null，直接去table[0]处检索。我们再看一下getEntry这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> Entry&lt;K,V&gt; <span class="hljs-title">getEntry</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>            <br>        <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//通过key的hashcode值计算hash值</span><br>        <span class="hljs-keyword">int</span> hash = (key == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : hash(key);<br>        <span class="hljs-comment">//indexFor (hash&amp;length-1) 获取最终数组索引，然后遍历链表，通过equals方法比对找出对应记录</span><br>        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];<br>             e != <span class="hljs-keyword">null</span>;<br>             e = e.next) &#123;<br>            Object k;<br>            <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp; <br>                ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>                <span class="hljs-keyword">return</span> e;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;    <br><span class="hljs-number">123456789101112131415161718</span><br></code></pre></td></tr></table></figure><p>可以看出，get方法的实现相对简单，key(hashcode)–&gt;hash–&gt;indexFor–&gt;最终索引位置，找到对应位置table[i]，再查看是否有链表，遍历链表，通过key的equals方法比对查找对应的记录。要注意的是，有人觉得上面在定位到数组位置之后然后遍历链表的时候，e.hash == hash这个判断没必要，仅通过equals判断就可以。其实不然，试想一下，如果传入的key对象重写了equals方法却没有重写hashCode，而恰巧此对象定位到这个数组位置，如果仅仅用equals判断可能是相等的，但其hashCode和当前对象不一致，这种情况，根据Object的hashCode的约定，不能返回当前对象，而应该返回null，后面的例子会做出进一步解释。</p><h3 id="四、重写equals方法需同时重写hashCode方法"><a href="#四、重写equals方法需同时重写hashCode方法" class="headerlink" title="四、重写equals方法需同时重写hashCode方法"></a><strong>四、重写equals方法需同时重写hashCode方法</strong></h3><p>最后我们再聊聊老生常谈的一个问题，各种资料上都会提到，“重写equals时也要同时覆盖hashcode”，我们举个小例子来看看，如果重写了equals而不重写hashcode会发生什么样的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>        <span class="hljs-keyword">int</span> idCard;<br>        String name;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idCard, String name)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.idCard = idCard;<br>            <span class="hljs-keyword">this</span>.name = name;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass())&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            Person person = (Person) o;<br>            <span class="hljs-comment">//两个对象是否等值，通过idCard来确定</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.idCard == person.idCard;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String []args)</span></span>&#123;<br>        HashMap&lt;Person,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Person, String&gt;();<br>        Person person = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">1234</span>,<span class="hljs-string">&quot;乔峰&quot;</span>);<br>        <span class="hljs-comment">//put到hashmap中去</span><br>        map.put(person,<span class="hljs-string">&quot;天龙八部&quot;</span>);<br>        <span class="hljs-comment">//get取出，从逻辑上讲应该能输出“天龙八部”</span><br>        System.out.println(<span class="hljs-string">&quot;结果:&quot;</span>+map.get(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">1234</span>,<span class="hljs-string">&quot;萧峰&quot;</span>)));<br>    &#125;<br>&#125;<br><br>实际输出结果：<span class="hljs-keyword">null</span><br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132333435</span><br></code></pre></td></tr></table></figure><p>如果我们已经对HashMap的原理有了一定了解，这个结果就不难理解了。尽管我们在进行get和put操作的时候，使用的key从逻辑上讲是等值的（通过equals比较是相等的），但由于没有重写hashCode方法，所以put操作时，key(hashcode1)–&gt;hash–&gt;indexFor–&gt;最终索引位置 ，而通过key取出value的时候 key(hashcode1)–&gt;hash–&gt;indexFor–&gt;最终索引位置，由于hashcode1不等于hashcode2，导致没有定位到一个数组位置而返回逻辑上错误的值null（也有可能碰巧定位到一个数组位置，但是也会判断其entry的hash值是否相等，上面get方法中有提到。）</p><p>所以，在重写equals的方法的时候，必须注意重写hashCode方法，同时还要保证通过equals判断相等的两个对象，调用hashCode方法要返回同样的整数值。而如果equals判断不相等的两个对象，其hashCode可以相同（只不过会发生哈希冲突，应尽量避免）。</p><h3 id="五、JDK1-8中HashMap的性能优化"><a href="#五、JDK1-8中HashMap的性能优化" class="headerlink" title="五、JDK1.8中HashMap的性能优化"></a><strong>五、JDK1.8中HashMap的性能优化</strong></h3><p>假如一个数组槽位上链上数据过多（即拉链过长的情况）导致性能下降该怎么办？<br>JDK1.8在JDK1.7的基础上针对增加了红黑树来进行优化。即当链表超过8时，链表就转换为红黑树，利用红黑树快速增删改查的特点提高HashMap的性能，其中会用到红黑树的插入、删除、查找等算法。<br>关于这方面的探讨我们以后的文章再做说明。<br><strong>附：HashMap put方法逻辑图（JDK1.8）</strong></p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/4033491947.png" alt="HashMap put方法逻辑图"></p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>长点心吧，已经丢了4把伞了</title>
    <link href="/2020/12/03/2020-12-03-aaa/"/>
    <url>/2020/12/03/2020-12-03-aaa/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>真的对自己无语了(´இ皿இ｀)</p><p>已经丢了4把伞了啊啊啊啊</p><p>长点记性把</p><p>!!!</p><center class="half"><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/3333452825.png" alt="淘宝买的伞" width="400px"/><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/1966231072.png" alt="京东买的伞" width="400px"/></center>!!!<p>我要哭了 ::aru:crying:: </p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/2758524552.jpg" alt="倒霉.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5种常见Bean映射工具的性能比对</title>
    <link href="/2020/12/02/2020-12-02-bean-mapper/"/>
    <url>/2020/12/02/2020-12-02-bean-mapper/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>创建由多个层组成的大型 Java 应用程序需要使用多种领域模型，如持久化模型、领域模型或者所谓的 DTO。为不同的应用程序层使用多个模型将要求我们提供 bean 之间的映射方法。手动执行此操作可以快速创建大量样板代码并消耗大量时间。幸运的是，Java 有多个对象映射框架。在本教程中，我们将比较最流行的 Java 映射框架的性能。</p><blockquote><p>综合日常使用情况和相关测试数据，个人感觉 MapStruct、ModelMapper 这两个 Bean 映射框架是最佳选择。</p></blockquote><h2 id="2-常见-Bean-映射框架概览"><a href="#2-常见-Bean-映射框架概览" class="headerlink" title="2. 常见 Bean 映射框架概览"></a>2. 常见 Bean 映射框架概览</h2><h3 id="2-1-Dozer"><a href="#2-1-Dozer" class="headerlink" title="2.1. Dozer"></a>2.1. Dozer</h3><p>Dozer 是一个映射框架，它使用递归将数据从一个对象复制到另一个对象。框架不仅能够在 bean 之间复制属性，还能够在不同类型之间自动转换。</p><p>要使用 Dozer 框架，我们需要添加这样的依赖到我们的项目:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sf.dozer<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dozer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>更多关于 Dozer 的内容可以在官方文档中找到： <a href="http://dozer.sourceforge.net/documentation/gettingstarted.html">http://dozer.sourceforge.net/documentation/gettingstarted.html</a> ，或者你也可以阅读这篇文章：<a href="https://www.baeldung.com/dozer">https://www.baeldung.com/dozer</a> 。</p><h3 id="2-2-Orika"><a href="#2-2-Orika" class="headerlink" title="2.2. Orika"></a>2.2. Orika</h3><p>Orika 是一个 bean 到 bean 的映射框架，它递归地将数据从一个对象复制到另一个对象。</p><p>Orika 的工作原理与 Dozer 相似。两者之间的主要区别是 Orika 使用字节码生成。这允许以最小的开销生成更快的映射器。</p><p>要使用 Orika 框架，我们需要添加这样的依赖到我们的项目:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ma.glasnost.orika<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>orika-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>更多关于 Orika 的内容可以在官方文档中找到：<a href="https://orika-mapper.github.io/orika-docs/%EF%BC%8C%E6%88%96%E8%80%85%E4%BD%A0%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%98%85%E8%AF%BB%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%9Ahttps://www.baeldung.com/orika-mapping%E3%80%82">https://orika-mapper.github.io/orika-docs/，或者你也可以阅读这篇文章：https://www.baeldung.com/orika-mapping。</a></p><h3 id="2-3-MapStruct"><a href="#2-3-MapStruct" class="headerlink" title="2.3. MapStruct"></a>2.3. MapStruct</h3><p>MapStruct 是一个自动生成 bean mapper 类的代码生成器。MapStruct 还能够在不同的数据类型之间进行转换。Github 地址：<a href="https://github.com/mapstruct/mapstruct%E3%80%82">https://github.com/mapstruct/mapstruct。</a></p><p>要使用 MapStruct 框架，我们需要添加这样的依赖到我们的项目:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapstruct-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.0.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>更多关于 MapStruct 的内容可以在官方文档中找到：<a href="https://mapstruct.org/%EF%BC%8C%E6%88%96%E8%80%85%E4%BD%A0%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%98%85%E8%AF%BB%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%9Ahttps://www.baeldung.com/mapstruct%E3%80%82">https://mapstruct.org/，或者你也可以阅读这篇文章：https://www.baeldung.com/mapstruct。</a></p><p>要使用 MapStruct 框架，我们需要添加这样的依赖到我们的项目:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapstruct-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.0.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-ModelMapper"><a href="#2-4-ModelMapper" class="headerlink" title="2.4. ModelMapper"></a>2.4. ModelMapper</h3><p>ModelMapper 是一个旨在简化对象映射的框架，它根据约定确定对象之间的映射方式。它提供了类型安全的和重构安全的 API。</p><p>更多关于 ModelMapper 的内容可以在官方文档中找到：<a href="http://modelmapper.org/">http://modelmapper.org/</a> 。</p><p>要使用 ModelMapper 框架，我们需要添加这样的依赖到我们的项目:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.modelmapper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>modelmapper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-5-JMapper"><a href="#2-5-JMapper" class="headerlink" title="2.5. JMapper"></a>2.5. JMapper</h3><p>JMapper 是一个映射框架，旨在提供易于使用的、高性能的 Java bean 之间的映射。该框架旨在使用注释和关系映射应用 DRY 原则。该框架允许不同的配置方式:基于注释、XML 或基于 api。</p><p>更多关于 JMapper 的内容可以在官方文档中找到：<a href="https://github.com/jmapper-framework/jmapper-core/wiki%E3%80%82">https://github.com/jmapper-framework/jmapper-core/wiki。</a></p><p>要使用 JMapper 框架，我们需要添加这样的依赖到我们的项目:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;dependency&gt;</span><br>    <span class="hljs-section">&lt;groupId&gt;</span><span class="hljs-attribute">com</span>.googlecode.jmapper-framework&lt;/groupId&gt;<br>    <span class="hljs-section">&lt;artifactId&gt;</span><span class="hljs-attribute">jmapper</span>-core&lt;/artifactId&gt;<br>    <span class="hljs-section">&lt;version&gt;</span><span class="hljs-attribute">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>&lt;/version&gt;<br><span class="hljs-section">&lt;/dependency&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-测试模型"><a href="#3-测试模型" class="headerlink" title="3.测试模型"></a>3.测试模型</h2><p>为了能够正确地测试映射，我们需要有一个源和目标模型。我们已经创建了两个测试模型。</p><p>第一个是一个只有一个字符串字段的简单 POJO，它允许我们在更简单的情况下比较框架，并检查如果我们使用更复杂的 bean 是否会发生任何变化。</p><p>简单的源模型如下:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SourceCode</span> </span>&#123;<br>    <span class="hljs-keyword">String</span> code;<br>    <span class="hljs-comment">// getter and setter</span><br>&#125;<br></code></pre></td></tr></table></figure><p>它的目标也很相似:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DestinationCode</span> </span>&#123;<br>    <span class="hljs-keyword">String</span> code;<br>    <span class="hljs-comment">// getter and setter</span><br>&#125;<br></code></pre></td></tr></table></figure><p>源 bean 的实际示例如下:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">SourceOrder</span> &#123;<br>    <span class="hljs-keyword">private</span> String orderFinishDate;<br>    <span class="hljs-keyword">private</span> PaymentType paymentType;<br>    <span class="hljs-keyword">private</span> Discount discount;<br>    <span class="hljs-keyword">private</span> DeliveryData deliveryData;<br>    <span class="hljs-keyword">private</span> User orderingUser;<br>    <span class="hljs-keyword">private</span> List&lt;Product&gt; orderedProducts;<br>    <span class="hljs-keyword">private</span> Shop offeringShop;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> orderId;<br>    <span class="hljs-keyword">private</span> OrderStatus status;<br>    <span class="hljs-keyword">private</span> LocalDate orderDate;<br>    <span class="hljs-comment">// standard getters and setters</span><br>&#125;<br></code></pre></td></tr></table></figure><p>目标类如下图所示:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Order</span> &#123;<br>    <span class="hljs-keyword">private</span> User orderingUser;<br>    <span class="hljs-keyword">private</span> List&lt;Product&gt; orderedProducts;<br>    <span class="hljs-keyword">private</span> OrderStatus orderStatus;<br>    <span class="hljs-keyword">private</span> LocalDate orderDate;<br>    <span class="hljs-keyword">private</span> LocalDate orderFinishDate;<br>    <span class="hljs-keyword">private</span> PaymentType paymentType;<br>    <span class="hljs-keyword">private</span> Discount discount;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> shopId;<br>    <span class="hljs-keyword">private</span> DeliveryData deliveryData;<br>    <span class="hljs-keyword">private</span> Shop offeringShop;<br>    <span class="hljs-comment">// standard getters and setters</span><br>&#125;<br></code></pre></td></tr></table></figure><p>整个模型结构可以在这里找到:<a href="https://github.com/eugenp/tutorials/tree/master/performance-tests/src/main/java/com/baeldung/performancetests/model/source%E3%80%82">https://github.com/eugenp/tutorials/tree/master/performance-tests/src/main/java/com/baeldung/performancetests/model/source。</a></p><h2 id="4-转换器"><a href="#4-转换器" class="headerlink" title="4. 转换器"></a>4. 转换器</h2><p>为了简化测试设置的设计，我们创建了如下所示的转换器接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Converter</span> </span>&#123;<br>    <span class="hljs-function">Order <span class="hljs-title">convert</span><span class="hljs-params">(SourceOrder sourceOrder)</span></span>;<br>    <span class="hljs-function">DestinationCode <span class="hljs-title">convert</span><span class="hljs-params">(SourceCode sourceCode)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们所有的自定义映射器都将实现这个接口。</p><h3 id="4-1-OrikaConverter"><a href="#4-1-OrikaConverter" class="headerlink" title="4.1. OrikaConverter"></a>4.1. OrikaConverter</h3><p>Orika 支持完整的 API 实现，这大大简化了 mapper 的创建:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrikaConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Converter</span></span>&#123;<br>    <span class="hljs-keyword">private</span> MapperFacade mapperFacade;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OrikaConverter</span><span class="hljs-params">()</span> </span>&#123;<br>        MapperFactory mapperFactory = <span class="hljs-keyword">new</span> DefaultMapperFactory<br>          .Builder().build();        mapperFactory.classMap(Order.class, SourceOrder.class)<br>          .field(<span class="hljs-string">&quot;orderStatus&quot;</span>, <span class="hljs-string">&quot;status&quot;</span>).byDefault().register();<br>        mapperFacade = mapperFactory.getMapperFacade();<br>    &#125;    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">Order <span class="hljs-title">convert</span><span class="hljs-params">(SourceOrder sourceOrder)</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> mapperFacade.<span class="hljs-title">map</span><span class="hljs-params">(sourceOrder, Order.class)</span></span>;<br>    &#125;    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">DestinationCode <span class="hljs-title">convert</span><span class="hljs-params">(SourceCode sourceCode)</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> mapperFacade.<span class="hljs-title">map</span><span class="hljs-params">(sourceCode, DestinationCode.class)</span></span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-DozerConverter"><a href="#4-2-DozerConverter" class="headerlink" title="4.2. DozerConverter"></a>4.2. <strong>DozerConverter</strong></h3><p>Dozer 需要 XML 映射文件，有以下几个部分:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://dozer.sourceforge.net&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://dozer.sourceforge.net</span></span><br><span class="hljs-tag"><span class="hljs-string">  http://dozer.sourceforge.net/schema/beanmapping.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">class-a</span>&gt;</span>com.baeldung.performancetests.model.source.SourceOrder<span class="hljs-tag">&lt;/<span class="hljs-name">class-a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">class-b</span>&gt;</span>com.baeldung.performancetests.model.destination.Order<span class="hljs-tag">&lt;/<span class="hljs-name">class-b</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">field</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>status<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>orderStatus<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">field</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">class-a</span>&gt;</span>com.baeldung.performancetests.model.source.SourceCode<span class="hljs-tag">&lt;/<span class="hljs-name">class-a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">class-b</span>&gt;</span>com.baeldung.performancetests.model.destination.DestinationCode<span class="hljs-tag">&lt;/<span class="hljs-name">class-b</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>定义了 XML 映射后，我们可以从代码中使用它:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DozerConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Converter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Mapper mapper;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DozerConverter</span><span class="hljs-params">()</span> </span>&#123;<br>        DozerBeanMapper mapper = <span class="hljs-keyword">new</span> DozerBeanMapper();<br>        mapper.addMapping(<br>          DozerConverter.class.getResourceAsStream(<span class="hljs-string">&quot;/dozer-mapping.xml&quot;</span>));<br>        <span class="hljs-keyword">this</span>.mapper = mapper;<br>    &#125;    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">Order <span class="hljs-title">convert</span><span class="hljs-params">(SourceOrder sourceOrder)</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> mapper.<span class="hljs-title">map</span><span class="hljs-params">(sourceOrder,Order.class)</span></span>;<br>    &#125;    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">DestinationCode <span class="hljs-title">convert</span><span class="hljs-params">(SourceCode sourceCode)</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> mapper.<span class="hljs-title">map</span><span class="hljs-params">(sourceCode, DestinationCode.class)</span></span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-MapStructConverter"><a href="#4-3-MapStructConverter" class="headerlink" title="4.3. MapStructConverter"></a>4.3. MapStructConverter</h3><p>Map 结构的定义非常简单，因为它完全基于代码生成:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MapStructConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Converter</span> </span>&#123;<br>    MapStructConverter MAPPER = Mappers.getMapper(MapStructConverter.class);    <span class="hljs-meta">@Mapping</span>(source = <span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-keyword">target</span> = <span class="hljs-string">&quot;orderStatus&quot;</span>)<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function">Order <span class="hljs-title">convert</span><span class="hljs-params">(SourceOrder sourceOrder)</span></span>;    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function">DestinationCode <span class="hljs-title">convert</span><span class="hljs-params">(SourceCode sourceCode)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-JMapperConverter"><a href="#4-4-JMapperConverter" class="headerlink" title="4.4. JMapperConverter"></a>4.4. <strong>JMapperConverter</strong></h3><p>JMapperConverter 需要做更多的工作。接口实现后:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> JMapperConverter implements Converter &#123;<br>    JMapper realLifeMapper;<br>    JMapper simpleMapper;    <span class="hljs-built_in">public</span> JMapperConverter() &#123;<br>        JMapperAPI api = <span class="hljs-built_in">new</span> JMapperAPI()<br>          .<span class="hljs-keyword">add</span>(JMapperAPI.mappedClass(<span class="hljs-keyword">Order</span>.<span class="hljs-keyword">class</span>));<br>        realLifeMapper = <span class="hljs-built_in">new</span> JMapper(<span class="hljs-keyword">Order</span>.<span class="hljs-keyword">class</span>, SourceOrder.<span class="hljs-keyword">class</span>, api);<br>        JMapperAPI simpleApi = <span class="hljs-built_in">new</span> JMapperAPI()<br>          .<span class="hljs-keyword">add</span>(JMapperAPI.mappedClass(DestinationCode.<span class="hljs-keyword">class</span>));<br>        simpleMapper = <span class="hljs-built_in">new</span> JMapper(<br>          DestinationCode.<span class="hljs-keyword">class</span>, SourceCode.<span class="hljs-keyword">class</span>, simpleApi);<br>    &#125;    @Override<br>    <span class="hljs-built_in">public</span> <span class="hljs-keyword">Order</span> convert(SourceOrder sourceOrder) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">Order</span>) realLifeMapper.getDestination(sourceOrder);<br>    &#125;    @Override<br>    <span class="hljs-built_in">public</span> DestinationCode convert(SourceCode sourceCode) &#123;<br>        <span class="hljs-keyword">return</span> (DestinationCode) simpleMapper.getDestination(sourceCode);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们还需要向目标类的每个字段添加<code>@JMap</code>注释。此外，JMapper 不能在 enum 类型之间转换，它需要我们创建自定义映射函数:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@JMapConversion</span>(<span class="hljs-keyword">from</span> = <span class="hljs-string">&quot;paymentType&quot;</span>, to = <span class="hljs-string">&quot;paymentType&quot;</span>)<br><span class="hljs-keyword">public</span> PaymentType <span class="hljs-function"><span class="hljs-title">conversion</span>(<span class="hljs-params">com.baeldung.performancetests.model.source.PaymentType <span class="hljs-keyword">type</span></span>)</span> &#123;<br>    PaymentType paymentType = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">switch</span>(<span class="hljs-keyword">type</span>) &#123;<br>        <span class="hljs-keyword">case</span> CARD:<br>            paymentType = PaymentType.CARD;<br>            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> CASH:<br>            paymentType = PaymentType.CASH;<br>            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> TRANSFER:<br>            paymentType = PaymentType.TRANSFER;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> paymentType;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5-ModelMapperConverter"><a href="#4-5-ModelMapperConverter" class="headerlink" title="4.5. ModelMapperConverter"></a>4.5. <strong>ModelMapperConverter</strong></h3><p>ModelMapperConverter 只需要提供我们想要映射的类:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ModelMapperConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Converter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> ModelMapper modelMapper;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ModelMapperConverter</span><span class="hljs-params">()</span> </span>&#123;<br>        modelMapper = <span class="hljs-keyword">new</span> ModelMapper();<br>    &#125;    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">Order <span class="hljs-title">convert</span><span class="hljs-params">(SourceOrder sourceOrder)</span> </span>&#123;<br>       <span class="hljs-function"><span class="hljs-keyword">return</span> modelMapper.<span class="hljs-title">map</span><span class="hljs-params">(sourceOrder, Order.class)</span></span>;<br>    &#125;    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">DestinationCode <span class="hljs-title">convert</span><span class="hljs-params">(SourceCode sourceCode)</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> modelMapper.<span class="hljs-title">map</span><span class="hljs-params">(sourceCode, DestinationCode.class)</span></span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-简单的模型测试"><a href="#5-简单的模型测试" class="headerlink" title="5. 简单的模型测试"></a>5. 简单的模型测试</h2><p>对于性能测试，我们可以使用 Java Microbenchmark Harness，关于如何使用它的更多信息可以在 这篇文章：<a href="https://www.baeldung.com/java-microbenchmark-harness">https://www.baeldung.com/java-microbenchmark-harness</a> 中找到。</p><p>我们为每个转换器创建了一个单独的基准测试，并将基准测试模式指定为 Mode.All。</p><h3 id="5-1-平均时间"><a href="#5-1-平均时间" class="headerlink" title="5.1. 平均时间"></a>5.1. 平均时间</h3><p>对于平均运行时间，JMH 返回以下结果(越少越好):</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/2472732648.png" alt="平均时间.png"></p><p>这个基准测试清楚地表明，MapStruct 和 JMapper 都有最佳的平均工作时间。</p><h3 id="5-2-吞吐量"><a href="#5-2-吞吐量" class="headerlink" title="5.2. 吞吐量"></a>5.2. 吞吐量</h3><p>在这种模式下，基准测试返回每秒的操作数。我们收到以下结果(越多越好):</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/3516383806.png" alt="吞吐量.png"></p><p>在吞吐量模式中，MapStruct 是测试框架中最快的，JMapper 紧随其后。</p><h3 id="5-3-SingleShotTime"><a href="#5-3-SingleShotTime" class="headerlink" title="5.3. SingleShotTime"></a>5.3. <strong>SingleShotTime</strong></h3><p>这种模式允许测量单个操作从开始到结束的时间。基准给出了以下结果(越少越好):</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/3156994960.png" alt="单例最短时间.png"></p><p>这里，我们看到 JMapper 返回的结果比 MapStruct 好得多。</p><h3 id="5-4-采样时间"><a href="#5-4-采样时间" class="headerlink" title="5.4. 采样时间"></a>5.4. <strong>采样时间</strong></h3><p>这种模式允许对每个操作的时间进行采样。三个不同百分位数的结果如下:</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/2765869866.png" alt="采样时间.png"></p><p>所有的基准测试都表明，根据场景的不同，MapStruct 和 JMapper 都是不错的选择，尽管 MapStruct 对 SingleShotTime 给出的结果要差得多。</p><h2 id="6-真实模型测试"><a href="#6-真实模型测试" class="headerlink" title="6. 真实模型测试"></a>6. 真实模型测试</h2><p>对于性能测试，我们可以使用 Java Microbenchmark Harness，关于如何使用它的更多信息可以在 这篇文章：<a href="https://www.baeldung.com/java-microbenchmark-harness">https://www.baeldung.com/java-microbenchmark-harness</a> 中找到。</p><p>我们为每个转换器创建了一个单独的基准测试，并将基准测试模式指定为 Mode.All。</p><h3 id="6-1-平均时间"><a href="#6-1-平均时间" class="headerlink" title="6.1. 平均时间"></a>6.1. 平均时间</h3><p>JMH 返回以下平均运行时间结果（越少越好）：</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/2134022080.png" alt="真实模型平均时间.png"></p><p>该基准清楚地表明，MapStruct 和 JMapper 均具有最佳的平均工作时间。</p><h3 id="6-2-吞吐量"><a href="#6-2-吞吐量" class="headerlink" title="6.2. 吞吐量"></a>6.2. 吞吐量</h3><p>在这种模式下，基准测试返回每秒的操作数。我们收到以下结果(越多越好):</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/2776552119.png" alt="真实模型吞吐量.png"></p><p>在吞吐量模式中，MapStruct 是测试框架中最快的，JMapper 紧随其后。</p><h3 id="6-3-SingleShotTime"><a href="#6-3-SingleShotTime" class="headerlink" title="6.3. SingleShotTime"></a>6.3. <strong>SingleShotTime</strong></h3><p>这种模式允许测量单个操作从开始到结束的时间。基准给出了以下结果(越少越好):</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/503880226.png" alt="真实模型单例最短时间.png"></p><h3 id="6-4-采样时间"><a href="#6-4-采样时间" class="headerlink" title="6.4. 采样时间"></a>6.4. <strong>采样时间</strong></h3><p>这种模式允许对每个操作的时间进行采样。三个不同百分位数的结果如下:</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/1520861077.png" alt="真实模型采样时间.png"></p><p>尽管简单示例和实际示例的确切结果明显不同，但是它们的趋势相同。在哪种算法最快和哪种算法最慢方面，两个示例都给出了相似的结果。</p><h3 id="6-5-结论"><a href="#6-5-结论" class="headerlink" title="6.5. 结论"></a>6.5. 结论</h3><p>根据我们在本节中执行的真实模型测试，我们可以看出，最佳性能显然属于 MapStruct。在相同的测试中，我们看到 Dozer 始终位于结果表的底部。</p><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. <strong>总结</strong></h2><p>在这篇文章中，我们已经进行了五个流行的 Java Bean 映射框架性能测试：ModelMapper <strong>，</strong> MapStruct <strong>，</strong> Orika ，Dozer， JMapper。</p><p>示例代码地址：<a href="https://github.com/eugenp/tutorials">https://github.com/eugenp/tutorials</a></p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蛋壳暴雷之后，租房应该注意什么</title>
    <link href="/2020/11/30/2020-11-30-housing-pay-attention-to/"/>
    <url>/2020/11/30/2020-11-30-housing-pay-attention-to/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前段时间在微博上频频出现蛋壳公寓暴雷的现象。</p><p>对于在外漂泊打工人来说，能有个自己住的地方，真的是最低的要求了，下班了回去自己的小窝，好好放松，丢掉一天的疲惫。</p><p>现在连自己唯一的避风港都要被收回了，真的很心酸。</p><p>蛋壳暴雷，对于打工人来说真的是晴天霹雳。</p><hr><p>想想自己，我来7月份来西安，也是为找住的地方发愁，花了两天时间在公司附件找房子</p><p>看了一大圈大多房子都是中介承包了，中介会抽取一个月的中介服务费，所以一直很排斥从中介租房，但是很多房源都给中介垄断了</p><p>后来实在没方法在西安还好有认识的小伙伴，刚好他住的地方便宜，没有中介，直接是和房东打交道，终于安定下来</p><hr><p>租房的几点建议：</p><ol><li>在外有朋友的尽量先和朋友联系，方向租房经验，避免踩坑</li><li>避开长租公寓公司</li><li>尽量在小区找房东直租，避开中介</li><li>不着急敲定，多看看</li><li>不建议组隔断房</li><li>仔细检查家用电器、设备等</li><li>入住前约定房东对房间进行拍照，来是什么样子，走是什么样子</li><li>仔细查阅合同</li><li>要和房东当面签</li><li>合同签订对象是个人还是公司</li><li>需要租客支付的费用有哪些(房租、水电、管理费、网费、押金，是否还有其他费用，需要确认清楚并分项列出)</li><li>记录水电表的数字<br>…</li></ol>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql索引类型如何选择？</title>
    <link href="/2020/11/25/2020-11-25-select-mysql-index/"/>
    <url>/2020/11/25/2020-11-25-select-mysql-index/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>用个图温习一下索引<br><img src="https://images.niaobulashi.com/typecho/uploads/2020/11/1780898756.png" alt="索引简介"></p><h2 id="问题1：mysql索引类型normal，unique，full-text的区别是什么？"><a href="#问题1：mysql索引类型normal，unique，full-text的区别是什么？" class="headerlink" title="问题1：mysql索引类型normal，unique，full text的区别是什么？"></a>问题1：mysql索引类型normal，unique，full text的区别是什么？</h2><p>normal：表示普通索引</p><p>unique：表示唯一的，不允许重复的索引，如果该字段信息保证不会重复例如身份证号用作索引时，可设置为unique</p><p>full textl: 表示 全文搜索的索引。 FULLTEXT 用于搜索很长一篇文章的时候，效果最好。用在比较短的文本，如果就一两行字的，普通的 INDEX 也可以。</p><p>总结，索引的类别由建立索引的字段内容特性来决定，通常normal最常见。</p><h2 id="问题2：在实际操作过程中，应该选取表中哪些字段作为索引？"><a href="#问题2：在实际操作过程中，应该选取表中哪些字段作为索引？" class="headerlink" title="问题2：在实际操作过程中，应该选取表中哪些字段作为索引？"></a>问题2：在实际操作过程中，应该选取表中哪些字段作为索引？</h2><p>为了使索引的使用效率更高，在创建索引时，必须考虑在哪些字段上创建索引和创建什么类型的索引,有7大原则：</p><p>1．选择唯一性索引<br>2．为经常需要排序、分组和联合操作的字段建立索引<br>3．为常作为查询条件的字段建立索引<br>4．限制索引的数目<br>5．尽量使用数据量少的索引<br>6．尽量使用前缀来索引<br>7．删除不再使用或者很少使用的索引</p><h2 id="MySQL-索引以B树格式保存"><a href="#MySQL-索引以B树格式保存" class="headerlink" title="MySQL: 索引以B树格式保存"></a>MySQL: 索引以B树格式保存</h2><p>　　Memory存储引擎可以选择Hash或BTree索引，Hash索引只能用于=或&lt;=&gt;的等式比较。 </p><p>　　1、普通索引：create index on Tablename(列的列表) </p><p>　　alter table TableName add index (列的列表) </p><p>　　create table TableName([…], index [IndexName] (列的列表) </p><p>　　2、唯一性索引：create unique index </p><p>　　alter … add unique </p><p>　　主键：一种唯一性索引，必须指定为primary key </p><p>　　3、全文索引：从3.23.23版开始支持全文索引和全文检索，FULLTEXT， </p><p>　　可以在char、varchar或text类型的列上创建。 </p><p>　　4、单列索引、多列索引： </p><p>　　多个单列索引与单个多列索引的查询效果不同，因为： </p><p>　　执行查询时，MySQL只能使用一个索引，会从多个索引中选择一个限制最为严格的索引。 </p><p>　　5、最左前缀(Leftmost Prefixing)：多列索引，例如：fname_lname_age索引，以下的搜索条件MySQL都将使用 </p><p>　　fname_lname_age索引：firstname,lastname,age;firstname,lastname;firstname，其他情况将不使用。 </p><h2 id="根据sql查询语句确定创建哪种类型的索引，如何优化查询"><a href="#根据sql查询语句确定创建哪种类型的索引，如何优化查询" class="headerlink" title="根据sql查询语句确定创建哪种类型的索引，如何优化查询"></a>根据sql查询语句确定创建哪种类型的索引，如何优化查询</h2><p>　　选择索引列： </p><p>　　a.性能优化过程中，选择在哪个列上创建索引是最重要的步骤之一。可以考虑使用索引的主要有 </p><p>　　两种类型的列：在where子句中出现的列，在join子句中出现的列。 </p><p>　　b.考虑列中值的分布，索引的列的基数越大，索引的效果越好。 </p><p>　　c.使用短索引，如果对字符串列进行索引，应该指定一个前缀长度，可节省大量索引空间，提升查询速度。 </p><p>　　d.利用最左前缀 </p><p>　　e.不要过度索引，只保持所需的索引。每个额外的索引都要占用额外的磁盘空间，并降低写操作的性能。 </p><p>　　在修改表的内容时，索引必须进行更新，有时可能需要重构，因此，索引越多，所花的时间越长。</p><p>　　MySQL只对一下操作符才使用索引：&lt;,&lt;=,=,&gt;,&gt;=,between,in, </p><p>　　以及某些时候的like(不以通配符%或_开头的情形)。 </p><h2 id="mysql-索引分类"><a href="#mysql-索引分类" class="headerlink" title="mysql 索引分类"></a>mysql 索引分类</h2><p>在数据库表中，对字段建立索引可以大大提高查询速度。通过善用这些索引，可以令 MySQL的查询和运行更加高效。索引是快速搜索的关键。MySQL索引的建立对于MySQL的高效运行是很重要的。下面介绍几种常见的MySQL索引类型。 </p><h4 id="1、普通型索引"><a href="#1、普通型索引" class="headerlink" title="1、普通型索引"></a>1、普通型索引</h4><p>这是最基本的索引类型，而且它没有唯一性之类的限制。普通索引可以通过以下几种方式创建：<br>（1）创建索引，例如CREATE INDEX 索引的名字 ON tablename (列名1，列名2,…);<br>（2）修改表，例如ALTER TABLE tablename ADD INDEX 索引的名字 (列名1，列名2,…);<br>（3）创建表的时候指定索引，例如CREATE TABLE tablename ( […], INDEX 索引的名字 (列名1，列名<br>2,…) ); </p><h4 id="2、唯一索引"><a href="#2、唯一索引" class="headerlink" title="2、唯一索引"></a>2、唯一索引</h4><p>这种索引和前面的“普通索引”基本相同，但有一个区别：索引列的所有值都只能出现一次，即必须唯一。唯一性索引可以用以下几种方式创建：<br>（1）创建索引，例如CREATE UNIQUE INDEX 索引的名字 ON tablename (列的列表);<br>（2）修改表，例如ALTER TABLE tablename ADD UNIQUE 索引的名字 (列的列表);<br>（3）创建表的时候指定索引，例如CREATE TABLE tablename ( […], UNIQUE 索引的名字 (列的列<br>表) ); </p><h4 id="3、主键"><a href="#3、主键" class="headerlink" title="3、主键"></a>3、主键</h4><p>主键是一种唯一性索引，但它必须指定为“PRIMARY KEY”。如果你曾经用过AUTO_INCREMENT类型的列，你可能已经熟悉主键之类的概念了。主键一般在创建表的时候指定，例如“CREATE TABLE tablename ( […], PRIMARY KEY (列的列表) ); ”。但是，我们也可以通过修改表的方式加入主键，例如“ALTER TABLE tablename ADD PRIMARY KEY (列的列表); ”。每个表只能有一个主键。 （主键相当于聚合索引，是查找最快的索引） </p><h4 id="4、单列索引和多列索引"><a href="#4、单列索引和多列索引" class="headerlink" title="4、单列索引和多列索引"></a>4、单列索引和多列索引</h4><p>索引可以是单列索引，也可以是多列索引。<br>（1）单列索引就是常用的一个列字段的索引，常见的索引。<br>（2）多列索引就是含有多个列字段的索引<br>alter table student add index sy(name,age，score);<br>索引sy就为多列索引，多列索引在以下几中情况下才能有效：<br>select * from student where name=’jia’ and age&gt;=’12’ //where条件中含有索引的首列字段和<br>第二个字段<br>select * from student where name=’jia’ //where条件中只含有首列字段<br>select * from student where name=’jia’ and score&lt;60//where条件中含有首列字段和第三个字<br>段<br>总结：多列索引只有在where条件中含有索引中的首列字段时才有效 </p><h4 id="5、选择索引列"><a href="#5、选择索引列" class="headerlink" title="5、选择索引列"></a>5、选择索引列</h4><p>应该怎样选择索引列，首先要看查询条件，一般将查询条件中的列作为索引</p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何理解多租户架构？</title>
    <link href="/2020/11/19/2020-11-19-multi-tenancy-framework/"/>
    <url>/2020/11/19/2020-11-19-multi-tenancy-framework/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　前段时间公司产品进行了架构的进化，进化到了多租户架构。当我第一次听到多租户时，我也挺纳闷，不理解。但当我逐渐的翻阅资料，以及研发功能时。不断的加深了对多租户的理解。尽管我现在也只是浅浅的懂一点而已。</p><p>　　OK,Let’s get this straight（让我们搞懂它），接下来让我们问自己几个问题:</p><p>　　1.什么是多租户架构？<br>　　2.多租户架构的优缺点？<br>　　3.多租户架构的适用场景？</p><p>　　让我们带着这几个问题进入下面的阅读。</p><h2 id="一、对多租户的理解"><a href="#一、对多租户的理解" class="headerlink" title="一、对多租户的理解"></a>一、对多租户的理解</h2><p>　　多租户定义：多租户技术或称多重租赁技术，简称SaaS，是一种软件架构技术，是实现如何在多用户环境下（此处的多用户一般是面向企业用户）共用相同的系统或程序组件，并且可确保各用户间数据的隔离性。简单讲：在一台服务器上运行单个应用实例，它为多个租户（客户）提供服务。从定义中我们可以理解：多租户是一种架构，目的是为了让多用户环境下使用同一套程序，且保证用户间数据隔离。那么重点就很浅显易懂了，多租户的重点就是同一套程序下实现多用户数据的隔离。对于实现方式，我们下面会讨论到。</p><p>　　在了解详细一点：在一个多租户的结构下，应用都是运行在同样的或者是一组服务器下，这种结构被称为“单实例”架构（Single Instance），单实例多租户。多个租户的数据是保存在相同位置，依靠对数据库分区来实现隔离操作。既然用户都在运行相同的应用实例，服务运行在服务供应商的服务器上，用户无法去进行定制化的操作，所以这对于对该产品有特殊需要定制化的客户就无法适用，所以多租户适合通用类需求的客户。那么缺点来了，多租户下无法实现用户的定制化操作。</p><p>　　在翻阅多租户的资料时，还有一个名词与之相对应，那就是单租户SaaS架构（也被称作多实例架构（Multiple Instance））。单租户架构与多租户的区别在于，单租户是为每个客户单独创建各自的软件应用和支撑环境。单租户SaaS被广泛引用在客户需要支持定制化的应用场合，而这种定制或者是因为地域，抑或是他们需要更高的安全控制。通过单租户的模式，每个客户都有一份分别放在独立的服务器上的数据库和操作系统，或者使用强的安全措施进行隔离的虚拟网络环境中。因为本篇主要是讨论多租户，所以单租户的相关知识就简单了解一下，不做过多的阐述了。</p><h2 id="二、多租户数据隔离的三种方案"><a href="#二、多租户数据隔离的三种方案" class="headerlink" title="二、多租户数据隔离的三种方案"></a>二、多租户数据隔离的三种方案</h2><p>　　在当下云计算时代，多租户技术在共用的数据中心以单一系统架构与服务提供多数客户端相同甚至可定制化的服务，并且仍可以保障客户的数据隔离。目前各种各样的云计算服务就是这类技术范畴，例如阿里云数据库服务（RDS）、阿里云服务器等等。</p><p>　　多租户在数据存储上存在三种主要的方案，分别是：</p><h3 id="1-独立数据库"><a href="#1-独立数据库" class="headerlink" title="1. 独立数据库"></a>1. 独立数据库</h3><p>　　这是第一种方案，即一个租户一个数据库，这种方案的用户数据隔离级别最高，安全性最好，但成本较高。<br>　　优点：<br>　　　　为不同的租户提供独立的数据库，有助于简化数据模型的扩展设计，满足不同租户的独特需求；如果出现故障，恢复数据比较简单。<br>　　缺点：<br>　　　　增多了数据库的安装数量，随之带来维护成本和购置成本的增加。<br>　　这种方案与传统的一个客户、一套数据、一套部署类似，差别只在于软件统一部署在运营商那里。如果面对的是银行、医院等需要非常高数据隔离级别的租户，可以选择这种模式，提高租用的定价。如果定价较低，产品走低价路线，这种方案一般对运营商来说是无法承受的。</p><h3 id="2-共享数据库，独立-Schema"><a href="#2-共享数据库，独立-Schema" class="headerlink" title="2.共享数据库，独立 Schema"></a>2.共享数据库，独立 Schema</h3><p>这是第二种方案，即多个或所有租户共享Database，但是每个租户一个Schema（也可叫做一个user）。底层库比如是：DB2、ORACLE等，一个数据库下可以有多个SCHEMA<br>　　优点：<br>　　　　为安全性要求较高的租户提供了一定程度的逻辑数据隔离，并不是完全隔离；每个数据库可支持更多的租户数量。<br>　　缺点：<br>　　　　如果出现故障，数据恢复比较困难，因为恢复数据库将牵涉到其他租户的数据；<br>　　如果需要跨租户统计数据，存在一定困难。</p><h3 id="4-共享数据库，共享-Schema，共享数据表"><a href="#4-共享数据库，共享-Schema，共享数据表" class="headerlink" title="4.共享数据库，共享 Schema，共享数据表"></a>4.共享数据库，共享 Schema，共享数据表</h3><p>这是第三种方案，即租户共享同一个Database、同一个Schema，但在表中增加TenantID多租户的数据字段。这是共享程度最高、隔离级别最低的模式。<br>　　即每插入一条数据时都需要有一个客户的标识。这样才能在同一张表中区分出不同客户的数据。<br>　　优点：<br>　　　　三种方案比较，第三种方案的维护和购置成本最低，允许每个数据库支持的租户数量最多。<br>　　缺点：<br>　　　　隔离级别最低，安全性最低，需要在设计开发时加大对安全的开发量； 数据备份和恢复最困难，需要逐表逐条备份和还原。</p><p>　　如果希望以最少的服务器为最多的租户提供服务，并且租户接受牺牲隔离级别换取降低成本，这种方案最适合。<br>　　　　<br>　　在SaaS实施过程中，有一个显著的考量点，就是如何对应用数据进行设计，以支持多租户，而这种设计的思路，是要在数据的共享、安全隔离和性能间取得平衡。</p><p>　　因为我们用的底层库是MySQL，且要保证数据的完全隔离，所以用的方案属于第一种。独立数据库。因为MySQL下SCHEMA就是他的数据库名。所以每多服务一个用户，都需要新建一个数据库。如果是DB2或者是ORACLE的话，一个数据库下，可以采用独立的SCHEMA来进行数据隔离，这样会相对节省成本，且数据隔离的强度高。</p><h2 id="三、选择合理的实现模式"><a href="#三、选择合理的实现模式" class="headerlink" title="三、选择合理的实现模式"></a>三、选择合理的实现模式</h2><p>　　衡量三种模式主要考虑的因素是隔离还是共享。</p><p>　　成本角度因素 </p><p>　　　　隔离性越好，设计和实现的难度和成本越高，初始成本越高。共享性越好，同一运营成本下支持的用户越多，运营成本越低。</p><p>　　安全因素 </p><p>　　　　要考虑业务和客户的安全方面的要求。安全性要求越高，越要倾向于隔离。</p><p>　　从租户数量上考虑<br>　　　　主要考虑下面一些因素<br>　　　　系统要支持多少租户？上百？上千还是上万？可能的租户越多，越倾向于共享。<br>　　　　平均每个租户要存储数据需要的空间大小。存贮的数据越多，越倾向于隔离。<br>　　　　每个租户的同时访问系统的最终用户数量。需要支持的越多，越倾向于隔离。<br>　　　　是否想针对每一租户提供附加的服务，例如数据的备份和恢复等。这方面的需求越多， 越倾向于隔离</p><p>　　技术储备<br>　　　　共享性越高，对技术的要求越高。</p><p>–转载学习</p>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多租户</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是多租户</title>
    <link href="/2020/11/18/2020-11-18-multi-tenancy/"/>
    <url>/2020/11/18/2020-11-18-multi-tenancy/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>多租户是指软件架构支持一个实例服务多个用户（Customer），每一个用户被称之为租户（tenant），软件给予租户可以对系统进行部分</p><p>定制的能力，如用户界面颜色或业务规则，但是他们不能定制修改软件的代码。</p><p>由于共享开发和维护成本，都某些用户来说，多租户是一种经济的解决方案。从维护角度来说，多租户系统维护更加简单，相比于每个用户</p><p>一个实例的单租户系统，多租户系统提供者在系统变更时仅需更新一次，而单租户则需要针对每个用户进行更新，举个例子吧，操作系统可以视为</p><p>单租户系统，电子邮件则是典型的多租户系统（这里只说邮件服务系统，不是客户端），操作系统升级时，每个用户都要执行，而电子邮件的升级</p><p>无需用户参与。</p><p>在云计算领域，由于新的服务模型利用了虚拟化和远程访问，多租户的含义已被扩展。例如，软件即服务（SaaS）提供者，利用运行在一个数据</p><p>库实例上的应用系统，向多个用户提供Web访问服务。在这个场景下，租户之间的数据是隔离的，并且保证每个用户的数据对其他租户不可见。</p><ul><li>百科</li></ul><p>多租户技术可以实现多个租户之间共享系统实例，同时又可以实现租户的系统实例的个性化定制。</p><p>通过使用多租户技术可以保证系统共性的部分被共享，个性的部分被单独隔离。</p><p>通过在多个租户之间的资源复用，运营管理维护资源，有效节省开发应用的成本。而且，在租户之间共享应用程序的单个实例，可以实现当应用程序升级时，所有租户可以同时升级。</p><p>同时，因为多个租户共享一份系统的核心代码，因此当系统升级时，只需要升级相同的核心代码即可</p>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多租户</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解析json报文，获取key的value</title>
    <link href="/2020/11/05/2020-11-05-oracle-json/"/>
    <url>/2020/11/05/2020-11-05-oracle-json/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>新增解析json报文，获取key的value</p><h2 id="建立如下两种类型"><a href="#建立如下两种类型" class="headerlink" title="建立如下两种类型"></a>建立如下两种类型</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE TYPE ty_row_str_split  <span class="hljs-keyword">as</span> object (strValue VARCHAR2 (<span class="hljs-number">4000</span>));<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE TYPE ty_tbl_str_split <span class="hljs-keyword">AS</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">OF</span> ty_row_str_split;<br></code></pre></td></tr></table></figure><h2 id="新建json截取通用方法"><a href="#新建json截取通用方法" class="headerlink" title="新建json截取通用方法"></a>新建json截取通用方法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">FUNCTION</span> fun_split(p_str       <span class="hljs-keyword">IN</span> VARCHAR2,<br>                                     p_delimiter <span class="hljs-keyword">IN</span> VARCHAR2)<br>  <span class="hljs-keyword">RETURN</span> ty_tbl_str_split <span class="hljs-keyword">IS</span><br>  <span class="hljs-comment">--名称：json截取通用方法</span><br>  <span class="hljs-comment">--传入参数：</span><br>  <span class="hljs-comment">--p_str json报文内容</span><br>  <span class="hljs-comment">--p_delimiter json报文中的key值</span><br>  j         <span class="hljs-type">INT</span> :<span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  i         <span class="hljs-type">INT</span> :<span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>  len       <span class="hljs-type">INT</span> :<span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  len1      <span class="hljs-type">INT</span> :<span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  str       VARCHAR2(<span class="hljs-number">4000</span>);<br>  str_split ty_tbl_str_split :<span class="hljs-operator">=</span> ty_tbl_str_split();<br><span class="hljs-keyword">BEGIN</span><br>  <span class="hljs-comment">--获取json长度len</span><br>  len  :<span class="hljs-operator">=</span> LENGTH(p_str);<br>  <span class="hljs-comment">--获取key长度len1</span><br>  len1 :<span class="hljs-operator">=</span> LENGTH(p_delimiter);<br><br>  WHILE j <span class="hljs-operator">&lt;</span> len LOOP<br>    j :<span class="hljs-operator">=</span> INSTR(p_str, p_delimiter, i);<br><br>    IF j <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span><br>      j   :<span class="hljs-operator">=</span> len;<br>      str :<span class="hljs-operator">=</span> SUBSTR(p_str, i);<br>      str_split.EXTEND;<br>      str_split(str_split.COUNT) :<span class="hljs-operator">=</span> ty_row_str_split(strValue <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> str);<br><br>      IF i <span class="hljs-operator">&gt;=</span> len <span class="hljs-keyword">THEN</span><br>        EXIT;<br>      <span class="hljs-keyword">END</span> IF;<br>    <span class="hljs-keyword">ELSE</span><br>      str :<span class="hljs-operator">=</span> SUBSTR(p_str, i, j <span class="hljs-operator">-</span> i);<br>      i   :<span class="hljs-operator">=</span> j <span class="hljs-operator">+</span> len1;<br>      str_split.EXTEND;<br>      str_split(str_split.COUNT) :<span class="hljs-operator">=</span> ty_row_str_split(strValue <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> str);<br>    <span class="hljs-keyword">END</span> IF;<br>  <span class="hljs-keyword">END</span> LOOP;<br><br>  <span class="hljs-keyword">RETURN</span> str_split;<br><span class="hljs-keyword">END</span> fun_split;<br></code></pre></td></tr></table></figure><h2 id="解析json通用方法"><a href="#解析json通用方法" class="headerlink" title="解析json通用方法"></a>解析json通用方法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">FUNCTION</span> fun_parsejson(p_jsonstr varchar2, p_key varchar2)<br>  <span class="hljs-keyword">RETURN</span> VARCHAR2 <span class="hljs-keyword">AS</span><br>  <span class="hljs-comment">--名称：解析json通用方法</span><br>  rtnVal    VARCHAR2(<span class="hljs-number">1000</span>);<br>  i         NUMBER(<span class="hljs-number">2</span>);<br>  jsonkey   VARCHAR2(<span class="hljs-number">500</span>);<br>  jsonvalue VARCHAR2(<span class="hljs-number">1000</span>);<br>  json      VARCHAR2(<span class="hljs-number">3000</span>);<br><span class="hljs-keyword">BEGIN</span><br>  IF p_jsonstr <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">THEN</span><br>    <span class="hljs-comment">--将前后的括号去掉</span><br>    json :<span class="hljs-operator">=</span> REPLACE(p_jsonstr, <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>    json :<span class="hljs-operator">=</span> REPLACE(json, <span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>    json :<span class="hljs-operator">=</span> replace(json, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-keyword">FOR</span> temprow <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> strvalue <span class="hljs-keyword">AS</span> <span class="hljs-keyword">VALUE</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">TABLE</span>(fun_split(json, <span class="hljs-string">&#x27;,&#x27;</span>))) LOOP<br>      IF temprow.VALUE <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">THEN</span><br>        i         :<span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        jsonkey   :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>        jsonvalue :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">FOR</span> tem2 <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> strvalue <span class="hljs-keyword">AS</span> <span class="hljs-keyword">VALUE</span><br>                       <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">TABLE</span>(fun_split(temprow.value, <span class="hljs-string">&#x27;:&#x27;</span>))) LOOP<br>          IF i <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span><br>            jsonkey :<span class="hljs-operator">=</span> tem2.VALUE;<br>          <span class="hljs-keyword">END</span> IF;<br>          IF i <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span><br>            jsonvalue :<span class="hljs-operator">=</span> tem2.VALUE;<br>          <span class="hljs-keyword">END</span> IF;<br>        <br>          i :<span class="hljs-operator">=</span> i <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">END</span> LOOP;<br>      <br>        IF (jsonkey <span class="hljs-operator">=</span> p_key) <span class="hljs-keyword">THEN</span><br>          rtnVal :<span class="hljs-operator">=</span> jsonvalue;<br>        <span class="hljs-keyword">END</span> if;<br>      <span class="hljs-keyword">END</span> IF;<br>    <span class="hljs-keyword">END</span> LOOP;<br>  <span class="hljs-keyword">END</span> IF;<br>  <span class="hljs-keyword">RETURN</span> rtnVal;<br><span class="hljs-keyword">END</span> fun_parsejson;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--更新</span><br>update t_confirm_letter t<br>   <span class="hljs-keyword">set</span> t.d_confirm_date <span class="hljs-operator">=</span> to_date(fun_parsejson(t.report_data, <span class="hljs-string">&#x27;confirmDate&#x27;</span>),<span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>)<br> <span class="hljs-keyword">where</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br>   <span class="hljs-keyword">and</span> t.d_confirm_date <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span><br>   <span class="hljs-keyword">and</span> t.report_data <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 校验是否为连续的区间</title>
    <link href="/2020/09/29/2020-09-29-java-continuation/"/>
    <url>/2020/09/29/2020-09-29-java-continuation/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>工作中遇到需要校验是否为连续</p></blockquote><p>给出示例</p><p>|  —-  | —-  |<br>| 0  | 100 |<br>| 100  | 600 |<br>| 600  | -1 |</p><p>从0到正无穷的连续区间。</p><p>使用-1代表无穷大</p><p>可以考虑使用二维数组array来存放数据，同样使用二维数组比较数据是最方便的。</p><p>可以找到规则</p><ul><li><code>array[0][0]=0</code>，第一个数据总是等于0</li><li><code>array[0][1]=array[1][0]</code></li><li><code>array[1][1]=array[2][0]</code>，从第二个数据开始，等于下一个的第一个数据，以此类推</li><li><code>array[2][1]=-1</code>，最后一个总是等于-1（正无穷大）</li></ul><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/09/1047437796.png" alt="二维数组临近相等"></p><p>通过以上分析，可以使用二维数组来校验是否为连续的区间</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/12/1173788277.png" alt="代码截图"> </p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020年上半年近况-又来了西安</title>
    <link href="/2020/09/04/2020-09-04-come-to-xi-an-again/"/>
    <url>/2020/09/04/2020-09-04-come-to-xi-an-again/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>好久没有更新博客了，我还是来了西安，和西安真的有着不可分割的缘分。</p><p>7月6号入职的新公司，同一个甲方，是的，我又来进了一家外包公司。这与我心中所想完全违背了。下次，也就是下次换公司，一定不能去外包公司了。</p><p>时隔7个月，又来到了西安，一切是那么的熟悉，又那么的陌生。</p><p>从17年年底来到西安，到19年年底回去，刚好有两年了，这两年去过大唐不夜城，尤其晚上灯管特别绚丽，每天都开满了灯光，这电费花销肯定很大吧，但是吸引着全国各地的游客前来，本肯定赚回了。去过大明宫国家遗址公园，被安史之乱烧得一干二净，去了之后会感受到可惜，大唐盛世的大明宫什么都没了，留下的只有一片地，去玩的人很多本地人和第一次来的游客，游客很少再次去大明宫了。我没有再去过。</p><p>19年刚好12月31日项目结项，元旦那天回了武汉，过了没几天就爆发疫情了，就很尴尬，幸好赶在武汉封城之前，回了家。</p><p>之后由于工作原因，又回到了西安。</p><p>来的第一件事就是在西安找家驾校，把驾照给考了，说出去尴尬，到现在我还驾照，虽然我也没有车，一步一步来嘛，说不定拿到驾照了就想买车了呢。</p><p>现在一眨眼又晃到9月份，时间快得很，留下的足迹也会慢慢模糊。有句话说得好“<strong>越是泥泞的道路，留下的足迹越清晰</strong>”，可我目前的道路却平平无奇，道不出多么精彩，所以就平平无奇，这本是和平年代，不求大富大贵，但求平平安安。</p><p>在西安这边的工作，干的还是上家公司干的活，不过轻松了许多。该下班就下班了，不会强制去加班，毕竟我是项目经理。。不太喜欢去加班，保证活干好干完就行，没啥事早早下班得了。</p><p>都是为了生活，谁想让工作充满了生活呢，得给自己留出时间干点自己喜欢的事情。</p><p>生活也需要健康，要有一定的运动，保持着健康的体魄。周三周五，会早早下班去体育馆打两小时羽毛球，运动出出汗，很开心。</p><p>马上快国庆了，准备去哪里玩呢</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图解！24张图彻底弄懂九大常见数据结构！（转）</title>
    <link href="/2020/08/03/2020-08-03-picture-datastruct/"/>
    <url>/2020/08/03/2020-08-03-picture-datastruct/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>对于学习数据结构，打牢基础的小伙伴来说，是篇相当棒的文章，值得学习</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/06/4248174982.png" alt="微信截图_20200603230908.png"></p><p>文章链接：<br><a href="https://blog.csdn.net/u014398524/article/details/106322387/">图解！24张图彻底弄懂九大常见数据结构！</a></p><p>事情发展就是这样，也许很啰嗦。</p><p>大致就是公司A（工作4年7个月）–&gt;B（试用期2星期）–&gt;C（3月20日至今）。B公司开始挖我。</p><p>纠结</p>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人生有很多岔路口</title>
    <link href="/2020/05/08/2020-05-08-way-of-life/"/>
    <url>/2020/05/08/2020-05-08-way-of-life/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>人生有很多岔路口</p><blockquote><p>人生有很多岔路口，所以我们会不断的面临选择！</p></blockquote><p>最近在新公司的第一个版本的需求顺利完成，没有遇到什么大的问题，总算是松了一口气。</p><p>在五一之前接到一个电话，是之前项目的乙方的老总打来的，要挖我过去继续做那个项目，在西安，给我开出的薪资比我现在还高出4k。说实话，我当时就心动了，哪里给得高就去哪里，这是明显的道理，况且还是自己熟悉做过两年的项目，我说五一假期之后给出答复。</p><p>五一假期期间，我和我媳妇去了丈母娘家，也一起讨论了这件事，也主要是看我的选择。</p><p>说起来我这工作跳槽在2月25日离职到3月20日入职新公司这段时间里也是曲曲折折。</p><p>我第一家公司简称A，挖我过去的那家公司简称B，现在入职的公司简称C</p><p>事情龙脉大致是这样的：</p><ol><li>在A公司做的项目快结项之际，B公司联系到了我，说B公司将接收该项目，想让我过去，开的待遇比A高71%</li><li>我说等过完年再过去，谁知元旦之后遇到疫情这件事了，于是就开始在家办公。</li><li>从A离职这件事是可以肯定的了，于是在2月25日提出离职。</li><li>离职之后立马联系了B公司，那时候疫情正式增长阶段，也是在家办公。</li><li>和B公司无需面试，约定试用期一个月（正常三个月），工作内容没有做实际的开发工作，主要做调研工作（SpringCloud方向）交付调研结果文档，计划疫情结束之后去西安。</li><li>期间内心很纠结，主要是去年刚结婚，想就在武汉工作发展（不担心疫情，疫情肯定可以搞定），试用期刚好两个星期，经过内心挣扎，还是选择离职，试用期两个星期离职，打算还是在武汉找工作。</li><li>在B公司试用期的两个星期的工资没有给我，说是甲方没有算人头进去，白干了两个星期（对此我开始对B公司有点减分）</li><li>离职B公司后，我开始在武汉投简历，网上进行电话面试，最后面试过了目前这家公司C，开的待遇比A高57%。</li><li>虽然没有B开的工资高，相比西安那么远，在武汉离家近一点这点优势就无须纠结太多了。入职C公司，在武汉这边租房，一下子就是押二付三。。</li><li>临近五一，B公司的领导直接打电话给我，还是要我过去支持之前的项目，并且开出的待遇比A高114%，着实让我心动。</li><li>我和现在C公司的上级沟通了这件事，想了解这家公司能给我涨到多少，让我可以在B和C之间做出选择。</li><li>就等C公司能否同意我的诉求，同意的话就在C，达不到的话就去B。</li><li>B和C公司给出的发展方向都是PM项目管理方向，职业培养方面差不多。</li></ol><p>事情发展就是这样，也许很啰嗦。</p><p>大致就是公司A（工作4年7个月）–&gt;B（试用期2星期）–&gt;C（3月20日至今）。B公司开始挖我。</p><p>纠结</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>跳槽了</title>
    <link href="/2020/04/25/2020-04-25-job-hopping/"/>
    <url>/2020/04/25/2020-04-25-job-hopping/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>为什么跳槽，不仅仅是由于工作上项目的不太喜欢，最主要的原因还是福利待遇。。额，确实是硬伤。</p><p>在上家公司也工作了差不多4年多，大四就去公司实习，转正后工作到2020年2月。<br>提出离职，一开始是在过不去心里这道坎，因为不知道怎么开口，纠结了很久<br>刚好也遇到了这个疫情，一直呆在家里</p><p>最后还是鼓起勇气，提出了离职，并说出离职原因：福利待遇问题</p><p>找工作的这段时间，心里想着不想再去外包公司了，一定要去一个甲方的研发公司之类。</p><p>终究还是自己能力不太行，最后还是进了外包公司。。</p><p>3月20号入职的，差不多一家1个多月了。</p><p>参与的第一个版本的需求，顺利将主要的开发内容提交测试完毕，心安了许多。</p><p>进来PM对我抱有很大的期望，希望我可以将武汉这边的团队带领起来，当时听着也是比较惊讶，同时也有点压力了。自己从来没有带领过团队，刚进公司还没一个月，就赋予我这么大的职能，我硬着头皮上了，不仅仅需要负责自己开发的这块内容，还需要负责新进成员的这块培养，头都大了。和之前相比一下子跨度有点大了。</p><p>其实想想，这是一个比较难得的机会，一般情况刚进项目，不可能给你这么大的职能吧。而且这个确实我所期望的，当个项目经理。</p><p>这边慢慢会陆续壮大起来，明天就有一位新同事入职</p><p>希望自己能调节好节奏，工作固然有压力，但是一定要调节好，不心急，有条不絮的处理好事务。</p><p>带领好团队，健壮起来。</p><p>给自己的一句话：</p><p>压力别太大，身体最重要！</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谢谢关心，一切安全</title>
    <link href="/2020/03/06/2020-02-13-is-safe/"/>
    <url>/2020/03/06/2020-02-13-is-safe/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一开始没有上网，没有注意到博客这边的回复</p><p>同时家里最近也为了离职跳槽的一系列事情，忙着</p><p>家里还好，村里没有发现有新型冠状病毒感染者，也请大家注意防护好自己和家人。</p><p>我外婆种了很多菜，菜倒是够吃。</p><table>    <tr>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2020/02/3803887949.jpg" alt="家1" width="650px"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2020/02/3650381899.jpg" alt="家旁边" width="650px"/></td>    </tr></table><p>家里不是住的小区楼，是在离马路还有一点距离的村里的小方楼。<br>这段时间不能去武汉，小县城的交通都管制了，处理得还是很专业，村里也每天有个人来挨家挨户进行消毒</p><p>就这样在家呆了20多天了</p><table>    <tr>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2020/02/2688778554.jpg" alt="家对面" width="650px"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2020/02/1950362972.jpg" alt="家的天空" width="650px"/></td>    </tr></table><p>秀一秀家里的冰箱的肉类储备，嘿嘿</p><table>    <tr>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2020/02/80188484.jpg" alt="肉类储备" width="650px"/></td>    </tr></table><p>门口也做好的防护措施，不让外来人员包括村的人来串门，也是对得起别人，对得起自己</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/02/605851922.jpg" alt="11.jpg"></p><p>谢谢大家关心</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>赶在10点出武汉！</title>
    <link href="/2020/01/23/2020-01-23-out-of-wuhan/"/>
    <url>/2020/01/23/2020-01-23-out-of-wuhan/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天早上6点钟醒来看到一条推送消息：武汉要在10点之后进行封城！<br><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/3537065123.jpeg" alt="E44A8C23-6AEB-405A-B6FD-6F7BB3E68DD2.jpeg"></p><p>我瞬间不淡定了，本来买好了12点半，可是得赶在10点之前。</p><p>本来我媳妇11点会从随州出发，来武汉，然后我们一起回我家过年。</p><p>现在计划全都打乱了。</p><p>我赶紧和我家人说了这个新闻情况。</p><p>最后做出决定，我先回随州，到我媳妇娘家，我哥开车去随州接我们回家。</p><p>我哥从家里出发，去随州。<br>我从武汉出发，买了8点40分的票，去随州。现在已经赶上动车了<br>现在武汉进地铁都要开始量体温了。在汉口火车站排队进站的人超级多。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/3875209127.jpeg" alt="1738B72C-4A2A-4420-9627-B91293BC2517.jpeg"></p><p>出城成功！</p><p>大家出门一定要戴口罩，非武汉地区的也不要掉以轻心。</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Oracle服务端1521端口无法telnet，服务名未开启监听问题</title>
    <link href="/2020/01/18/2020-01-18-oracle-connect/"/>
    <url>/2020/01/18/2020-01-18-oracle-connect/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>场景：oracle服务安装在windows本地，oracle客户端在虚拟机中，使用虚拟机连接windows的oracle数据库。</strong></p></blockquote><h2 id="问题1：使用虚拟机telnet我本地oracle1521端口，不通"><a href="#问题1：使用虚拟机telnet我本地oracle1521端口，不通" class="headerlink" title="问题1：使用虚拟机telnet我本地oracle1521端口，不通"></a>问题1：使用虚拟机telnet我本地oracle1521端口，不通</h2><p>解决思路：</p><ul><li><p>关闭虚拟机linux防火墙（这个方法有点粗暴，建议在只需要修改防火墙的端口允许通过即可）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1:查看防火状态</span><br>systemctl status firewalld<br>service  iptables status<br><span class="hljs-comment"># 2:暂时关闭防火墙</span><br>systemctl stop firewalld<br>service  iptables stop<br><span class="hljs-comment"># 3:永久关闭防火墙</span><br>systemctl <span class="hljs-built_in">disable</span> firewalld<br>chkconfig iptables off<br><span class="hljs-comment"># 4:重启防火墙</span><br>systemctl <span class="hljs-built_in">enable</span> firewalld<br>service iptables restart  <br><span class="hljs-comment"># 5:永久关闭后重启</span><br>chkconfig iptables on<br></code></pre></td></tr></table></figure></li><li><p>防火墙配置规则 端口 允许得端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看已打开的端口</span><br>netstat -anp<br><span class="hljs-comment"># 添加允许的端口</span><br>firewall-cmd --add-port=1521/tcp --permanent<br><span class="hljs-comment"># 若移除端口</span><br>firewall-cmd --permanent --remove-port=1521/tcp<br><span class="hljs-comment"># 策略修改完成，请重启： </span><br>systemctl restart firewalld<br></code></pre></td></tr></table></figure></li><li><p>添加windows防火墙对1521的入站允许规则</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/2275375255.png" alt="1579253672708"></p></li></ul><h2 id="问题2：使用sqlplus登录报错，ORA-12514-TNS-监听程序当前无法识别连接描述符中请求的服务"><a href="#问题2：使用sqlplus登录报错，ORA-12514-TNS-监听程序当前无法识别连接描述符中请求的服务" class="headerlink" title="问题2：使用sqlplus登录报错，ORA-12514: TNS: 监听程序当前无法识别连接描述符中请求的服务"></a>问题2：使用sqlplus登录报错，ORA-12514: TNS: 监听程序当前无法识别连接描述符中请求的服务</h2><p>解决思路：关键字**<code>监听程序</code>**</p><ul><li><p>查看监听服务状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 关闭监听服务</span><br>lsnrctl stop<br><span class="hljs-comment"># 启动监听服务</span><br>lsnrctl start<br><span class="hljs-comment"># 查看监听服务状态</span><br>lsnrctl <span class="hljs-built_in">stat</span><br></code></pre></td></tr></table></figure><p>查看监听服务如果出现下列问题</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/1004579222.png" alt="1579254533200"></p><p>说明监听服务没有启动</p><p>去启动oracle监听服务，监听服务有两个，这里只做单监听讲，随便启动一个即可。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/3169635404.png" alt="1579254625812"></p><p>再通过<code>lsnrctl stat</code>查看监听服务，如果出现下图情况</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/1436926014.png" alt="1579254724154"></p><p>只看到一个服务名”CLRExtProc”启动了，而我们想要的是ORCL服务名</p><p>这是需要修改<code>listener.ora</code> 文件</p></li><li><p>修改<code>listener.ora</code> 文件</p><p>文件路径，我本地的路径是：D:\app\niaobulashi\product\11.2.0\dbhome_1\NETWORK\ADMIN</p><p>需要添加以下<font color=red size=4>红色部分代码</font>，将服务名为ORCL添加到监听配置文件中</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/108328150.png" alt="1579254216172"></p><p>贴出来如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">SID_LIST_LISTENER =<br>  (SID_LIST =<br>    (SID_DESC =<br>      (SID_NAME = CLRExtProc)<br>      (ORACLE_HOME = D:\app\niaobulashi\product\<span class="hljs-number">11.2</span><span class="hljs-number">.0</span>\dbhome_1)<br>      (PROGRAM = extproc)<br>      (ENVS = <span class="hljs-string">&quot;EXTPROC_DLLS=ONLY:D:\app\niaobulashi\product\11.2.0\dbhome_1\bin\oraclr11.dll&quot;</span>)<br>    )<br>(SID_DESC=<br>  (SID_NAME = ORCL)<br>      (ORACLE_HOME = D:\app\niaobulashi\product\<span class="hljs-number">11.2</span><span class="hljs-number">.0</span>\dbhome_1)<br>      (PROGRAM = extproc)<br>      (ENVS = <span class="hljs-string">&quot;EXTPROC_DLLS=ONLY:D:\app\niaobulashi\product\11.2.0\dbhome_1\bin\oraclr11.dll&quot;</span>)<br>    )<br>  )<br><br>LISTENER =<br>  (DESCRIPTION =<br>    (ADDRESS = (PROTOCOL = TCP)(HOST = DESKTOP-NNDNCEI)(PORT = <span class="hljs-number">1521</span>))<br>  )<br>ADR_BASE_LISTENER = D:\app\niaobulashi<br></code></pre></td></tr></table></figure><p>再查看监听服务状态，可以看到ORCL有了</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/1361715811.png" alt="1579254808269"></p></li><li><p>修改<code>tnsname.ora</code>的<code>HOST</code>为本地主机名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">ORACLR_CONNECTION_DATA =<br>  (DESCRIPTION =<br>    (ADDRESS_LIST =<br>      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))<br>    )<br>    (CONNECT_DATA =<br>      (SID = CLRExtProc)<br>      (PRESENTATION = RO)<br>    )<br>  )<br><br>LISTENER_ORCL =<br>  (ADDRESS = (PROTOCOL = TCP)(HOST = DESKTOP-NNDNCEI)(PORT = 1521))<br><br>ORCL =<br>  (DESCRIPTION =<br>    (ADDRESS_LIST =<br>      (ADDRESS = (PROTOCOL = TCP)(HOST = DESKTOP-NNDNCEI)(PORT = 1521))<br>    )<br>    (CONNECT_DATA =<br>      (SERVICE_NAME = ORCL)<br>    )<br>  )<br></code></pre></td></tr></table></figure></li></ul><p>最后使用虚拟机就可以正常连接本地oracle服务了</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/1794099600.png" alt="1579254894242"></p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>商转公攻略</title>
    <link href="/2020/01/17/2020-01-17-shang-to-gong/"/>
    <url>/2020/01/17/2020-01-17-shang-to-gong/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录商转公的攻略流程</p><p>官方获取商转公信息的渠道：<br>1、度娘  <a href="http://www.baidu.com,/">www.baidu.com，</a><br>2、武汉得意生活：<a href="http://www.deyi.com/thread-18155169-1-1.html%E7%AD%89%E7%9B%B8%E5%85%B3%E8%AE%BA%E5%9D%9B%E6%9C%89%E5%90%84%E7%A7%8D%E9%93%B6%E8%A1%8C%E5%95%86%E8%BD%AC%E5%85%AC%E7%9A%84%E6%94%BB%E7%95%A5">http://www.deyi.com/thread-18155169-1-1.html等相关论坛有各种银行商转公的攻略</a><br>3、百度经验：<a href="https://jingyan.baidu.com/article/4853e1e5a25eb51909f726d6.html">https://jingyan.baidu.com/article/4853e1e5a25eb51909f726d6.html</a><br>4、武汉公积金官网贷款业务部分<a href="http://gjj.wuhan.gov.cn/html/ywzn/dkyw/index.html">http://gjj.wuhan.gov.cn/html/ywzn/dkyw/index.html</a><br>5、武汉公积金官方公众号：【武汉公积金】（任何有关公积金事宜可以咨询人工服务）<br>6、武汉城市留言板：<a href="http://liuyan.cjn.cn/threads/list?fid=9%E5%A6%82%E6%9E%9C%E9%93%B6%E8%A1%8C%E6%95%85%E6%84%8F%E5%80%9F%E5%8F%A3%E6%8B%96%E5%BB%B6%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%AD%A4%E7%BD%91%E7%AB%99%E6%8A%95%E8%AF%89%EF%BC%8C%E5%BE%88%E6%9C%89%E6%95%88%E6%9E%9C">http://liuyan.cjn.cn/threads/list?fid=9如果银行故意借口拖延，可以在此网站投诉，很有效果</a><br>7、武汉公积金APP：可以查看贷款进度、贷款额度试算以及自己发现的其他功能</p><p>基本上只要认真搜索了以上信息来源的，百分之九十的问题可以找到答案</p><p>以下是当代万国城我们这一批四个人的商转公流程：</p><p>注：商转公无需提前还完装修贷，必须在武汉缴纳的公积金</p><p>商转公前提：房产证（必须）</p><p>需准备的资料：<br>1、到开发商B某那里领取四张办房产证所需的证明（申请表、宗地图、分户图、不动产权属证明），最好都提前复印一份留存<br>2、购房合同原件<br>3、身份证原件及复印件（最好自己提前复印，节约时间）<br>4、户口本及户主页和自己那一页的复印件<br>5、购房发票原件（记得是两张，发票最高面额只有100万，我们是一共两张）<br>6、维修基金交存发票（这个要找物业拿的）<br>7、银行卡（预存总房款（毛坯总价）的1.5%）<br>8、准备一百的现金，在办理完所有的手续以后邮寄的时候需要交纳现金</p><p>提前到中国银行显正支行（地图导航或者直接一个滴滴）去办理房产证办理登记，等银行通知短信以后，早点到房管所（房管所据说不在墨水湖了，要自己搜位置）排队（我是7点去的，排第三，速度还蛮快）</p><p>第一步：商转公申请</p><p>需准备的资料：<br>1、房产证原件<br>2、贷款合同原件（最好先复印一份，有备无患）<br>3、夫妻双方收入证明（需要找公司开，模板可以在网上下载一个，没有格式限制，主要看公司的公章）<br>4、夫妻双方征信报告（<a href="http://www.sohu.com/a/298015578_223290%EF%BC%89%EF%BC%8C%E8%AF%A5%E7%BD%91%E7%AB%99%E6%98%AF%E6%AD%A6%E6%B1%89%E5%BE%81%E4%BF%A1%E6%8A%A5%E5%91%8A%E8%87%AA%E5%8A%A9%E6%9F%A5%E8%AF%A2%E6%89%93%E5%8D%B0%E6%9C%BA%E7%9A%84%E7%9B%B8%E5%85%B3%E5%9C%B0%E5%9D%80%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E6%90%BA%E5%B8%A6%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%8E%BB%E6%89%93%E5%8D%B0%E4%BA%86%EF%BC%8C%E7%8E%B0%E5%9C%A8%E6%AF%94%E4%BB%A5%E5%89%8D%E5%BF%AB%E5%A4%9A%E4%BA%86%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E6%8E%92%E9%98%9F">http://www.sohu.com/a/298015578_223290），该网站是武汉征信报告自助查询打印机的相关地址，只需要携带身份证就可以去打印了，现在比以前快多了，不需要排队</a><br>5、夫妻双方银行流水（打印工资卡的银行流水，最好是一年，加盖银行柜面专用章，别搞错了）</p><p>时间：提前跟买房时的贷款经理约好哪天，确定有人了再去<br>地点：中国银行汉阳支行二楼（上二楼需要登记）<br>人物：我们是A经理，不知道到时候你们的贷款经理是谁<br>流程：带好上述资料，跟着银行的经理操作就OK了，此时已完成第一步的商转公申请</p><p>第二步：实时关注公积金APP的贷款进度流程图，一直到复审</p><p>在未到复审之前都不用去银行</p><p>第三步：办理担保<br>需准备的资料：<br>1、提前交存差额到银行卡内<br>2、房产证原件<br>3、去银行领取两张申请表<br>4、身份证原件及复印件<br>5、户口本原件及复印件（户主及本人页）<br>6、准备1400的担保费</p><p>时间：等贷款经理给你打电话，确定好日期后到银行领取两张申请表<br>地点：中国银行汉阳支行二楼（上二楼需要登记）<br>人物：我们是A经理，不知道到时候你们的贷款经理是谁<br>流程：到银行领取申请表后直接打车去香港路的外贸大厦，上四楼到武汉担保公司，根据现场要求流程进行填表</p><p>第四步：等公积金中心终审、银行进行抵押、公积金委托银行放款</p><p>在放款之前都不用去银行，坐等就行了，主要就是催银行的人办的积极点</p><p>第五步：公积金中心流程显示放款之后去开户行开新卡<br>需准备的资料：<br>1、身份证<br>2、中国银行借记卡（储蓄卡）</p><p>时间：等开户行办理业务人员给你打电话，确定好日期后<br>地点：中国银行墨水湖支行一楼柜台<br>人物：给你打电话的业务人员<br>流程：主要是去新开一张卡，这张卡的作用是公积金将钱打进这张卡内，此卡不要随意存取款</p><p>第六步：公积金放款到新卡后（一般一天就到账了），到显正支行办理结清手续<br>需准备的资料：<br>1、能带的都带上</p><p>时间：提前跟显正支行的人员联系，一般到账以后就可以去办理，无需预约<br>地点：中国银行显正支行<br>人物：找到相应窗口办理即可<br>流程：依据窗口人员办理即可</p><p>第七步：后面还有委托扣划、再抵押赎回房产证等步骤，  未完待续………</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux 同时启动多个tomcat</title>
    <link href="/2020/01/13/2020-01-13-linux-mutli-tomcat/"/>
    <url>/2020/01/13/2020-01-13-linux-mutli-tomcat/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="linux同时启动多个tomcat"><a href="#linux同时启动多个tomcat" class="headerlink" title="linux同时启动多个tomcat"></a>linux同时启动多个tomcat</h1><p>今天下班学习nginx负载均衡时，需要多个tomcat端口服务，在一台机启动多个tomcat服务，于是记录下操作过程。</p><h2 id="复制tomcat"><a href="#复制tomcat" class="headerlink" title="复制tomcat"></a>复制tomcat</h2><p>原tomcat端口默认8080，复制出的tomcat端口8081。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/2432263281.png" alt="1578923845682"></p><h2 id="编辑环境变量"><a href="#编辑环境变量" class="headerlink" title="编辑环境变量"></a>编辑环境变量</h2><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/2341475484.png" alt="1578923929147"></p><p>贴出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#tomcat_8080</span><br><span class="hljs-built_in">export</span> CATALINA_HOME=/root/service/tomcat_8080<br><span class="hljs-built_in">export</span> CATALINA_BASE=/root/service/tomcat_8080<br><span class="hljs-built_in">export</span> TOMCAT_HOME=/root/service/tomcat_8080<br><br><span class="hljs-comment">#tomcat_8081</span><br><span class="hljs-built_in">export</span> CATALINA_HOME2=/root/service/tomcat_8081<br><span class="hljs-built_in">export</span> CATALINA_BASE2=/root/service/tomcat_8081<br><span class="hljs-built_in">export</span> TOMCAT_HOME2=/root/service/tomcat_8081<br></code></pre></td></tr></table></figure><p>使配置文件生效</p><p><code>source .bash_profile</code></p><h2 id="修改第二份catalina-sh"><a href="#修改第二份catalina-sh" class="headerlink" title="修改第二份catalina.sh"></a>修改第二份catalina.sh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /root/service/tomcat_8081/bin<br></code></pre></td></tr></table></figure><p>添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> CATALINA_BASE=<span class="hljs-variable">$CATALINA_BASE2</span><br><span class="hljs-built_in">export</span> CATALINA_HOME=<span class="hljs-variable">$CATALINA_HOME2</span><br></code></pre></td></tr></table></figure><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/4081550225.png" alt="1578924182554"></p><h2 id="修改第二份修改server-xml"><a href="#修改第二份修改server-xml" class="headerlink" title="修改第二份修改server.xml"></a>修改第二份修改server.xml</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/root/</span>service<span class="hljs-regexp">/tomcat_8081/</span>conf<br></code></pre></td></tr></table></figure><p>将三个端口从上到下，一次修改为<code>8006</code>，<code>8081</code>，<code>8010</code></p><p>OK，配置完成</p><h2 id="启动两个tomcat"><a href="#启动两个tomcat" class="headerlink" title="启动两个tomcat"></a>启动两个tomcat</h2><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/2367557515.png" alt="1578924369993"></p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql锁、事务隔离级别、MVCC底层原理机制</title>
    <link href="/2020/01/12/2020-01-12-mysql-transaction-mvcc/"/>
    <url>/2020/01/12/2020-01-12-mysql-transaction-mvcc/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="锁定义"><a href="#锁定义" class="headerlink" title="锁定义"></a>锁定义</h2><p>​        锁是计算机协调多个进程或线程并发访问某一资源的机制。<br>​        在数据库中，除了传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供需要用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。</p><h2 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h2><p>1、从性能上分类：乐观锁和悲观锁</p><ul><li>乐观锁： version字段（比较跟上一次的版本号，如果一样则更新，如果失败则要重复读-比较-写的操作。）</li><li>悲观锁：for update（锁定查询的行）</li></ul><p>2、从对数据库操作的类型分，分为 读锁和写锁(都属于悲观锁)</p><ul><li>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响</li><li>写锁（排它锁）：当前写操作没有完成前，它会阻断其他写锁和读锁</li></ul><p>3、从对数据操作的粒度分，分为 表锁和行锁</p><p>其中扩展<code>表锁</code>和<code>行锁</code></p><h4 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h4><p>每次操作锁住整张表。开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲<br>突的概率最高，并发度最低。</p><p>手动增加表锁<br><code>lock table 表名称 read(write),表名称2 read(write);</code><br>查看表上加过的锁<br><code>show open tables;</code><br>删除表锁<br><code>unlock tables;</code></p><p>加读锁：当前session和其他session都可以读该表，当前session中插入或者更新锁定的表都会报错，其他session插入或更新则会等待。</p><p>加写锁：当前session对该表的增删改查都没有问题，其他session对该表的所有操作被阻塞。</p><p>MyISAM在执行查询语句(SELECT)前,会自动给涉及的所有表加读锁,在执行增删改操作前,会自动给涉及的表加写锁。<br>1、对MyISAM表的读操作(加读锁) ,不会阻寒其他进程对同一表的读请求,但会阻赛对同一表的写请求。只有当读锁释放后,才会执行其它进程的写操作。<br>2、对MylSAM表的写操作(加写锁) ,会阻塞其他进程对同一表的读和写操作,只有当写锁释放后,才会执行其它进程的读写操作<br>总结：<br>简而言之，就是读锁会阻塞写，但是不会阻塞读。而写锁则会把读和写都阻塞。</p><h4 id="行琐"><a href="#行琐" class="headerlink" title="行琐"></a>行琐</h4><p>每次操作锁住一行数据。开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度最高。</p><p>InnoDB与MYISAM的最大不同有两点：</p><ul><li>支持事务（TRANSACTION）</li><li>支持行级锁</li></ul><p>支持事务（TRANSACTION）<br>支持行级锁</p><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><h4 id="事务（Transaction）及其ACID属性"><a href="#事务（Transaction）及其ACID属性" class="headerlink" title="事务（Transaction）及其ACID属性"></a>事务（Transaction）及其ACID属性</h4><p>行锁支持事务</p><p>事务是由一组SQL语句组成的逻辑处理单元,事务具有以下4个属性,通常简称为事务的ACID属性。</p><ul><li>原子性(Atomicity) ：事务是一个原子操作单元,其对数据的修改,要么全都执行,要么全都不执行。</li><li>一致性(Consistent) ：在事务开始和完成时,数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改,以保持数据的完整性;事务结束时,所有的内部数据结构(如B树索引或双向链表)也都必须是正确的。</li><li>隔离性(Isolation) ：数据库系统提供一定的隔离机制,保证事务在不受外部并发操作影响的“独立”环境执行。这意味着事务处理过程中的中间状态对外部是不可见的,反之亦然。</li><li>持久性(Durable) ：事务完成之后,它对于数据的修改是永久性的,即使出现系统故障也能够保持。</li></ul><h4 id="并发事务处理带来的问题"><a href="#并发事务处理带来的问题" class="headerlink" title="并发事务处理带来的问题"></a>并发事务处理带来的问题</h4><ul><li>更新丢失（Lost Update）<br>　　当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每<br>个事务都不知道其他事务的存在，就会发生丢失更新问题–最后的更新覆盖了由其<br>他事务所做的更新。</li><li>脏读（Dirty Reads）<br>　　一个事务正在对一条记录做修改，在这个事务完成并提交前，这条记录的数据就处于不一致的状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”数据，并据此作进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象的叫做“脏读”。<br>  　　一句话：事务A读取到了事务B已经修改但尚未提交的数据，还在这个数据基础上做了操作。此时，如果B事务回滚，A读取的数据无效，不符合一致性要求。</li><li>不可重读（Non-Repeatable Reads）<br>　　一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现其读出的数据已经发生了改变、或某些记录已经被删除了！这种现象就叫做“不可重复读”。<br>  　　一句话：事务A读取到了事务B已经提交的修改数据，不符合隔离性</li><li>幻读（Phantom Reads）<br>　　一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读”。<br>  　　一句话：事务A读取到了事务B提交的新增数据，不符合隔离性</li></ul><h4 id="事务隔离级别-1"><a href="#事务隔离级别-1" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><p>脏读”、“不可重复读”和“幻读”,其实都是数据库读一致性问题,必须由数<br>据库提供一定的事务隔离机制来解决。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/2642382755.png" alt="1578801689788"></p><p>数据库的事务隔离越严格,并发副作用越小,但付出的代价也就越大,因为事务隔离实质上就是使事务在一定程度上“串行化”进行,这显然与“并发”是矛盾的。</p><p>同时,不同的应用对读一致性和事务隔离程度的要求也是不同的,比如许多应用对“不可重复读”和“幻读”并不敏感,可能更关心数据并发访问的能力。</p><p>常看当前数据库的事务隔离级别: show variables like ‘tx_isolation’;<br>设置事务隔离级别：set tx_isolation=’REPEATABLE-READ’;</p><p>简单描述一下隔离级别：</p><p>1、读未提交（Read uncommitted）</p><p>客户端A开启一个事务，查询用户表id=1的余额为400</p><p>在客户端A的事务提交之前，客户端B开启了另外一个事务，更新用户表id=1的余额为350，还未提交。此时客户A就可以查询到B已经更新的数据。如果客户端B回滚了，客户端B所有的操作被撤销，那么现在客户端A查询到的数据其实就是脏数据。</p><p>2、读已提交（Read committed）</p><p>客户端A开启一个事务，查询用户表id=1的余额为400</p><p>在客户端A的事务提交之前，客户端B开启一个事务，更新用户表id=1的余额为350，还未提交。此时客户端A不能查询B已经更新的数据，解决了脏数据的问题。</p><p>此时客户端B提交，客户A再进行查询，结果和上述不一致了，查询结果是客户端B更新后的数据350，即产生了不可重复读的问题。</p><p>3、可重复度（Repeatable read）</p><p>客户端A开启一个事务，查询用户表id=1的余额为400</p><p>在客户端A的事务提交之前，客户端B开启一个事务，更新用户表id=1的余额为350，提交。此时客户端A再查询用户id=1的余额还是和上一次一样是400，解决了不可重复度的问题。</p><p>此时客户端A执行更新余额，将余额-50，预测应该更新为350，但是却是300。余额使用的是客户端B提交的数据，最后数据的一致性倒是没有被破快。那么这是什么原理呢？</p><p>这是因为Mysql在可重复度隔离级别下使用了MVCC（multi-version concurrency control）机制。</p><p>select操作不会更新版本号，快照读（历史版本）（readview，快照）；</p><p>insert、update和delete会更新版本号，当前读（当前版本）。</p><p>重新打开客户端B，插入一条新的数据id=4</p><p>在客户端A查询用户表，没有查询出新的数据</p><p>客户端A执行更新语句条件是where id = 4，查询更新成功。再次查询就可以查询到客户端B新增的用户id=4的数据，出现幻读。</p><h2 id="MVCC机制"><a href="#MVCC机制" class="headerlink" title="MVCC机制"></a>MVCC机制</h2><p>如果事务隔离级别是可重复读，那快照readview是第一次查询时所生产的。</p><p>每一个事务开启到提交中间，每次insert、update、delete操作都会生成一个undo回滚日志。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/2715093167.png" alt="1578803927800"></p><p>这里模拟不同的客户端操作，操作顺序从上到下。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/2475687894.png" alt="1578804320776"></p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql的Explain使用及索引总结</title>
    <link href="/2020/01/11/2020-01-11-mysql-explain/"/>
    <url>/2020/01/11/2020-01-11-mysql-explain/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Explain工具介绍"><a href="#Explain工具介绍" class="headerlink" title="Explain工具介绍"></a>Explain工具介绍</h2><p>使用EXPLAIN关键字可以模拟优化器执行SQL语句，分析你的查询语句或是结构的性能瓶颈<br>在 select 语句之前增加 explain 关键字，MySQL 会在查询上设置一个标记，执行查询会返<br>回执行计划的信息，而不是执行这条SQL<br>注意：如果 from 中包含子查询，仍会执行该子查询，将结果放入临时表中。</p><p>actor建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `actor`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `actor` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">45</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of actor</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `actor` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;2020-01-11 19:57:26&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `actor` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;2020-01-11 19:57:38&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `actor` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;2020-01-11 19:57:57&#x27;</span>);<br></code></pre></td></tr></table></figure><p>film建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `film`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `film` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `idx_name` (`name`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of film</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `film` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;film0&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `film` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;film1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `film` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;film2&#x27;</span>);<br></code></pre></td></tr></table></figure><p>film_actor建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `file_actor`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `file_actor` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `film_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `actor_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `remark` <span class="hljs-type">varchar</span>(<span class="hljs-number">25</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `idx_film_actor_id` (`film_id`,`actor_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of file_actor</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `file_actor` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `file_actor` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `file_actor` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><p>Explain展示的字段</p><h2 id="explain列"><a href="#explain列" class="headerlink" title="explain列"></a>explain列</h2><p>展示explain中的每个列的信息。</p><h4 id="1、id列"><a href="#1、id列" class="headerlink" title="1、id列"></a>1、id列</h4><p>id列的编号是select的序号，有几个select就有几个id，并且id的顺序是按select出现的顺序增长的。</p><p>id值越大优先级越高，id相同则从上往下执行，id为NULL最后执行。</p><h4 id="2、select-type"><a href="#2、select-type" class="headerlink" title="2、select_type"></a>2、select_type</h4><p>select_type表示对应行是简单还是复杂的查询</p><ol><li>simple：简单查询。查询不包含子查询和union</li></ol><p>如上图</p><ol start="2"><li>primary：复杂查询中最外层的select</li></ol><p>3）subquery：包含在 select 中的子查询（不在 from 子句中）<br>4）derived：包含在 from 子句中的子查询。MySQL会将结果存放在一个临时表中，也称为<br>派生表（derived的英文含义）<br>用这个例子来了解 primary、subquery 和 derived 类型<br>mysql&gt; set session optimizer_switch=’derived_merge=off’;   #关闭mysql5.7新特性对衍<br>生表的合并优化<br>mysql&gt; explain select (select 1 from actor where id = 1) from (select * from film<br>where id = 1) der;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/2716589489.png" alt="1578737130125"></p><p>mysql&gt; set session optimizer_switch=’derived_merge=on’; #还原默认配置</p><p>5）union：在 union 中的第二个和随后的 select</p><p>mysql&gt; explain select 1 union all select 1;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/1013800051.png" alt="1578737906626"></p><h4 id="3、table列"><a href="#3、table列" class="headerlink" title="3、table列"></a>3、table列</h4><p>这一列表示 explain 的一行正在访问哪个表。<br>当 from 子句中有子查询时，table列是 <derivenN> 格式，表示当前查询依赖 id=N 的查<br>询，于是先执行 id=N 的查询。<br>当有 union 时，UNION RESULT 的 table 列的值为&lt;union1,2&gt;，1和2表示参与 union 的<br>select 行id。</p><h4 id="4、type列"><a href="#4、type列" class="headerlink" title="4、type列"></a>4、type列</h4><p>这一列表示关联类型或访问类型，即MySQL决定如何查找表中的行，查找数据行记录的大概<br>范围。<br>依次从<strong>最优到最差</strong>分别为：system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL<br>一般来说，得保证查询达到range级别，最好达到ref<br>NULL：mysql能够在优化阶段分解查询语句，在执行阶段用不着再访问表或索引。例如：在<br>索引列中选取最小值，可以单独查找索引来完成，不需要在执行时访问表<br>mysql&gt; explain select min(id) from film;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/521284259.png" alt="1578738042346"><br>const, system：mysql能对查询的某部分进行优化并将其转化成一个常量（可以看show<br>warnings 的结果）。用于 primary key 或 unique key 的所有列与常数比较时，所以表最多<br>有一个匹配行，读取1次，速度比较快。system是const的特例，表里只有一条元组匹配时为<br>system<br>mysql&gt; explain extended select * from (select * from film where id = 1) tmp;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/1588839168.png" alt="1578738056468"><br>mysql&gt; show warnings;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/902622157.png" alt="1578738061877"><br>eq_ref：primary key 或 unique key 索引的所有部分被连接使用 ，最多只会返回一条符合<br>条件的记录。这可能是在 const 之外最好的联接类型了，简单的 select 查询不会出现这种<br>type。<br>mysql&gt; explain select * from film_actor left join film on film_actor.film_id = film.id;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/296224253.png" alt="1578738068602"><br>ref：相比 eq_ref，不使用唯一索引，而是使用普通索引或者唯一性索引的部分前缀，索引要<br>和某个值相比较，可能会找到多个符合条件的行。</p><ol><li><p>简单 select 查询，name是普通索引（非唯一索引）<br>mysql&gt; explain select * from film where name = ‘film1’;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/2580514485.png" alt="1578744663729"></p></li><li><p>关联表查询，idx_film_actor_id是film_id和actor_id的联合索引，这里使用到了film_actor<br>的左边前缀film_id部分。<br>mysql&gt; explain select film_id from film left join film_actor on film.id =<br>film_actor.film_id;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/173014895.png" alt="1578744633297"></p><p>range：范围扫描通常出现在 in(), between ,&gt; ,&lt;, &gt;= 等操作中。使用一个索引来检索给定<br>范围的行。<br>mysql&gt; explain select * from actor where id &gt; 1;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/3698856681.png" alt="1578744638020"></p><p>index：扫描全表索引，这通常比ALL快一些。<br>mysql&gt; explain select * from film;</p><p>ALL：即全表扫描，意味着mysql需要从头到尾去查找所需要的行。通常情况下这需要增加索<br>引来进行优化了<br>mysql&gt; explain select * from actor;</p></li></ol><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/1898987101.png" alt="1578744600423"></p><h4 id="5、possible-keys列"><a href="#5、possible-keys列" class="headerlink" title="5、possible_keys列"></a>5、possible_keys列</h4><p>这一列显示查询可能使用哪些索引来查找。<br>explain 时可能出现 possible_keys 有列，而 key 显示 NULL 的情况，这种情况是因为表中<br>数据不多，mysql认为索引对此查询帮助不大，选择了全表查询。<br>如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查 where 子句看是否可<br>以创造一个适当的索引来提高查询性能，然后用 explain 查看效果。</p><h4 id="6、key列"><a href="#6、key列" class="headerlink" title="6、key列"></a>6、key列</h4><p>这一列显示mysql实际采用哪个索引来优化对该表的访问。<br>如果没有使用索引，则该列是 NULL。如果想强制mysql使用或忽视possible_keys列中的索<br>引，在查询中使用 force index、ignore index。</p><h4 id="7、key-len列"><a href="#7、key-len列" class="headerlink" title="7、key_len列"></a>7、key_len列</h4><p>这一列显示了mysql在索引里使用的字节数，通过这个值可以算出具体使用了索引中的哪些<br>列。<br>举例来说，film_actor的联合索引 idx_film_actor_id 由 film_id 和 actor_id 两个int列组成，<br>并且每个int是4字节。通过结果中的key_len=4可推断出查询使用了第一个列：film_id列来执<br>行索引查找。<br>mysql&gt; explain select * from film_actor where film_id = 2;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/45810768.png" alt="1578745125184"></p><p>key_len计算规则如下：</p><ul><li><p>字符串</p><p>char(n)：n字节长度</p><p>varchar(n)：2字节存储字符串长度，如果是utf-8，则长度3n+2</p></li><li><p>数值类型</p><p>tinyint：1字节<br>smallint：2字节<br>int：4字节<br>bigint：8字节</p></li><li><p>时间类型</p><p>date：3字节<br>timestamp：4字节<br>datetime：8字节</p></li><li><p>如果字段允许为 NULL，需要1字节记录是否为 NULL</p></li></ul><p>索引最大长度是768字节，当字符串过长时，mysql会做一个类似左前缀索引的处理，将前半<br>部分的字符提取出来做索引。</p><h4 id="8、ref列"><a href="#8、ref列" class="headerlink" title="8、ref列"></a>8、ref列</h4><p>这一列显示了在key列记录的索引中，表查找值所用到的列或常量，常见的有：const（常<br>量），字段名（例：film.id）</p><h4 id="9、rows列"><a href="#9、rows列" class="headerlink" title="9、rows列"></a>9、rows列</h4><p>这一列是mysql估计要读取并检测的行数，注意这个不是结果集里的行数。</p><h4 id="10、Extra列"><a href="#10、Extra列" class="headerlink" title="10、Extra列"></a>10、Extra列</h4><p>这一列展示的是额外信息。常见的重要值如下：<br>1）Using index：使用覆盖索引<br>mysql&gt; explain select film_id from film_actor where film_id = 1;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/3956387964.png" alt="1578745277257"></p><p>2）Using where：使用 where 语句来处理结果，查询的列未被索引覆盖</p><p>mysql&gt; explain select * from actor where name = ‘a’;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/1722679615.png" alt="1578745291241"></p><p>3）Using index condition：查询的列不完全被索引覆盖，where条件中是一个前导列的范<br>围；</p><p>mysql&gt; explain select * from film_actor where film_id &gt; 1;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/3678510800.png" alt="1578746022429"></p><p>4）Using temporary：mysql需要创建一张临时表来处理查询。出现这种情况一般是要进行<br>优化的，首先是想到用索引来优化。</p><p>1、actor.name没有索引，此时创建了张临时表来distinct<br>mysql&gt; explain select distinct name from actor;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/3121044303.png" alt="1578746041902"></p><p>2、film.name建立了idx_name索引，此时查询时extra是using index,没有用临时表<br>mysql&gt; explain select distinct name from film;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/941771548.png" alt="1578746057709"></p><p>5）Using filesort：将用外部排序而不是索引排序，数据较小时从内存排序，否则需要在磁盘<br>完成排序。这种情况下一般也是要考虑使用索引来优化的。</p><p>1、actor.name未创建索引，会浏览actor整个表，保存排序关键字name和对应的id，然后排<br>序name并检索行记录<br>mysql&gt; explain select * from actor order by name;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/4045994156.png" alt="1578746090990"></p><p>2、film.name建立了idx_name索引,此时查询时extra是using index<br>mysql&gt; explain select * from film order by name;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/919562841.png" alt="1578746100958"></p><p>6）Select tables optimized away：使用某些聚合函数（比如 max、min）来访问存在索引<br>的某个字段是<br>mysql&gt; explain select min(id) from film;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/2021516824.png" alt="1578746115229"></p><h2 id="Using-filesort文件排序原理详解"><a href="#Using-filesort文件排序原理详解" class="headerlink" title="Using filesort文件排序原理详解"></a>Using filesort文件排序原理详解</h2><h4 id="filesort文件排序方式"><a href="#filesort文件排序方式" class="headerlink" title="filesort文件排序方式"></a>filesort文件排序方式</h4><p>单路排序：是一次性取出满足条件行的所有字段，然后在sort buffer中进行排序；用trace工具可<br>以看到sort_mode信息里显示&lt; sort_key, additional_fields &gt;或者&lt; sort_key,<br>packed_additional_fields &gt;</p><p>双路排序（又叫回表排序模式）：是首先根据相应的条件取出相应的排序字段和可以直接定位行<br>数据的行 ID，然后在 sort buffer 中进行排序，排序完后需要再次取回其它需要的字段；用trace工具<br>可以看到sort_mode信息里显示&lt; sort_key, rowid &gt;</p><p>MySQL 通过比较系统变量 max_length_for_sort_data(默认1024字节) 的大小和需要查询的字段总大小来<br>判断使用哪种排序模式。<br>如果 max_length_for_sort_data 比查询字段的总长度大，那么使用 单路排序模式；<br>如果 max_length_for_sort_data 比查询字段的总长度小，那么使用 双路排序模式。</p><p>我们先看单路排序的详细过程：</p><ol><li><p>从索引name找到第一个满足 name = ‘xx’ 条件的主键 id</p></li><li><p>根据主键 id 取出整行，取出所有字段的值，存入 sort_buffer 中</p></li><li><p>从索引name找到下一个满足 name = ‘xx’ 条件的主键 id</p></li><li><p>重复步骤 2、3 直到不满足 name = ‘xx’</p></li><li><p>对 sort_buffer 中的数据按照字段 position 进行排序</p></li><li><p>返回结果给客户端</p></li></ol><p>我们再看下双路排序的详细过程：</p><ol><li>从索引 name 找到第一个满足 name = ‘xx’  的主键id</li><li>根据主键 id 取出整行，把排序字段 position 和主键 id 这两个字段放到 sort buffer 中</li><li>从索引 name 取下一个满足 name = ‘xx’  记录的主键 id</li><li>重复 3、4 直到不满足 name = ‘xx’</li><li>对 sort_buffer 中的字段 position 和主键 id 按照字段 position 进行排序</li><li>遍历排序好的 id 和字段 position，按照 id 的值回到原表中取出 所有字段的值返回给客户端</li></ol><p>其实对比两个排序模式，单路排序会把所有需要查询的字段都放到 sort buffer 中，而双路排序只会把主键<br>和需要排序的字段放到 sort buffer 中进行排序，然后再通过主键回到原表查询需要的字段。<br>如果 MySQL 排序内存配置的比较小并且没有条件继续增加了，可以适当把 max_length_for_sort_data 配<br>置小点，让优化器选择使用双路排序算法，可以在sort_buffer 中一次排序更多的行，只是需要再根据主键<br>回到原表取数据。<br>如果 MySQL 排序内存有条件可以配置比较大，可以适当增大 max_length_for_sort_data 的值，让优化器<br>优先选择全字段排序(单路排序)，把需要的字段放到 sort_buffer 中，这样排序后就会直接从内存里返回查<br>询结果了。<br>所以，MySQL通过 max_length_for_sort_data 这个参数来控制排序，在不同场景使用不同的排序模式，<br>从而提升排序效率。<br>注意，如果全部使用sort_buffer内存排序一般情况下效率会高于磁盘文件排序，但不能因为这个就随便增<br>大sort_buffer(默认1M)，mysql很多参数设置都是做过优化的，不要轻易调整。</p><h2 id="Join关联查询优化"><a href="#Join关联查询优化" class="headerlink" title="Join关联查询优化"></a>Join关联查询优化</h2><p>mysql的表关联常见有两种算法</p><ul><li>Nested-Loop Join 算法</li><li>Block Nested-Loop Join 算法</li></ul><h4 id="嵌套循环连接-Nested-Loop-Join-NLJ-算法"><a href="#嵌套循环连接-Nested-Loop-Join-NLJ-算法" class="headerlink" title="嵌套循环连接 Nested-Loop Join(NLJ) 算法"></a>嵌套循环连接 Nested-Loop Join(NLJ) 算法</h4><p>一次一行循环地从第一张表（称为驱动表）中读取行，在这行数据中取到关联字段，根据关联字段在另一张表（被驱动<br>表）里取出满足条件的行，然后取出两张表的结果合集。<br>mysql&gt; EXPLAIN select*from t1 inner join t2 on t1.a= t2.a;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/3786110290.png" alt="1578748848466"></p><p>从执行计划中可以看到这些信息：<br>驱动表是 t2，被驱动表是 t1。先执行的就是驱动表(执行计划结果的id如果一样则按从上到下顺序执行sql)；优<br>化器一般会优先选择小表做驱动表。所以使用 inner join 时，排在前面的表并不一定就是驱动表。<br>使用了 NLJ算法。一般 join 语句中，如果执行计划 Extra 中未出现 Using join buffer 则表示使用的 join 算<br>法是 NLJ。<br>上面sql的大致流程如下：</p><ol><li>从表 t2 中读取一行数据；</li><li>从第 1 步的数据中，取出关联字段 a，到表 t1 中查找；</li><li>取出表 t1 中满足条件的行，跟 t2 中获取到的结果合并，作为结果返回给客户端；</li><li>重复上面 3 步。</li></ol><p>整个过程会读取 t2 表的所有数据(扫描100行)，然后遍历这每行数据中字段 a 的值，根据 t2 表中 a 的值索引扫描 t1 表<br>   中的对应行(扫描100次 t1 表的索引，1次扫描可以认为最终只扫描 t1 表一行完整数据，也就是总共 t1 表也扫描了100<br>   行)。因此整个过程扫描了 200 行。<br>   如果被驱动表的关联字段没索引，使用NLJ算法性能会比较低(下面有详细解释)，mysql会选择Block Nested-Loop Join<br>   算法。</p><h4 id="基于块的嵌套循环连接-Block-Nested-Loop-Join-BNL-算法"><a href="#基于块的嵌套循环连接-Block-Nested-Loop-Join-BNL-算法" class="headerlink" title="基于块的嵌套循环连接 Block Nested-Loop Join( BNL )算法"></a>基于块的嵌套循环连接 Block Nested-Loop Join( BNL )算法</h4><p>把驱动表的数据读入到 join_buffer 中，然后扫描被驱动表，把被驱动表每一行取出来跟 join_buffer 中的数据做对比。<br>mysql&gt;EXPLAIN select*from t1 inner join t2 on t1.b= t2.b;</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/139960535.png" alt="1578748917735"></p><p>Extra 中 的Using join buffer (Block Nested Loop)说明该关联查询使用的是 BNL 算法。<br>上面sql的大致流程如下：</p><ol><li>把 t2 的所有数据放入到 join_buffer 中</li><li>把表 t1 中每一行取出来，跟 join_buffer 中的数据做对比</li><li>返回满足 join 条件的数据</li></ol><p>整个过程对表 t1 和 t2 都做了一次全表扫描，因此扫描的总行数为10000(表 t1 的数据总量) + 100(表 t2 的数据总量) =10100。并且 join_buffer 里的数据是无序的，因此对表 t1 中的每一行，都要做 100 次判断，所以内存中的判断次数是100 * 10000= 100 万次。</p><p>被驱动表的关联字段没索引为什么要选择使用 BNL 算法而不使用 Nested-Loop Join 呢？</p><p>如果上面第二条sql使用 Nested-Loop Join，那么扫描行数为 100 * 10000 = 100万次，这个是磁盘扫描。<br>很显然，用BNL磁盘扫描次数少很多，相比于磁盘扫描，BNL的内存计算会快得多。<br>因此MySQL对于被驱动表的关联字段没索引的关联查询，一般都会使用 BNL 算法。如果有索引一般选择 NLJ 算法，有<br>索引的情况下 NLJ 算法比 BNL算法性能更高</p><h2 id="对于关联sql的优化"><a href="#对于关联sql的优化" class="headerlink" title="对于关联sql的优化"></a>对于关联sql的优化</h2><p>关联字段加索引，让mysql做join操作时尽量选择NLJ算法<br>小标驱动大表，写多表连接sql时如果明确知道哪张表是小表可以用straight_join写法固定连接驱动方式，省去<br>mysql优化器自己判断的时间<br>straight_join解释：straight_join功能同join类似，但能让左边的表来驱动右边的表，能改表优化器对于联表查询的执<br>行顺序。<br>比如：select * from t2 straight_join t1 on t2.a = t1.a; 代表制定mysql选着 t2 表作为驱动表。<br>straight_join只适用于inner join，并不适用于left join，right join。（因为left join，right join已经代表指<br>定了表的执行顺序）<br>尽可能让优化器去判断，因为大部分情况下mysql优化器是比人要聪明的。使用straight_join一定要慎重，因<br>为部分情况下人为指定的执行顺序并不一定会比优化引擎要靠谱。<br>in和exsits优化<br>原则：小表驱动大表，即小的数据集驱动大的数据集<br>in：当B表的数据集小于A表的数据集时，in优于exists</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> B)<br> #等价于：<br>   for(select id from B)&#123;<br>  <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A <span class="hljs-keyword">where</span> A.id <span class="hljs-operator">=</span> B.id<br>  &#125;<br></code></pre></td></tr></table></figure><p>exis`ts：当A表的数据集小于B表的数据集时，exists优于in<br>　　将主查询A的数据，放到子查询B中做条件验证，根据验证结果（true或false）来决定主查询的数据是否保留</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A <span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> B <span class="hljs-keyword">where</span> B.id <span class="hljs-operator">=</span> A.id)<br> #等价于:<br>for(select * from A) &#123;<br>  <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> B <span class="hljs-keyword">where</span> B.id <span class="hljs-operator">=</span> A.id<br>&#125;<br></code></pre></td></tr></table></figure><p>#A表与B表的ID字段应建立索引<br>1、EXISTS (subquery)只返回TRUE或FALSE,因此子查询中的SELECT * 也可以用SELECT 1替换,官方说法是实际执行时会<br>忽略SELECT清单,因此没有区别<br>2、EXISTS子查询的实际执行过程可能经过了优化而不是我们理解上的逐条对比<br>3、EXISTS子查询往往也可以用JOIN来代替，何种最优需要具体问题具体分析</p><h2 id="索引最佳实践"><a href="#索引最佳实践" class="headerlink" title="索引最佳实践"></a>索引最佳实践</h2><p>1.全值匹配</p><p>2.最左前缀法则（指的是查询从索引的最左前列开始并且不跳过索引<br>中的列）</p><p>3.不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转<br>向全表扫描</p><p>4.存储引擎不能使用索引中范围条件右边的列</p><p>5.尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少select *语句</p><p>6.mysql在使用不等于（！=或者&lt;&gt;）的时候无法使用索引会导致全表扫描</p><p>7.is null,is not null 也无法使用索引</p><p>8.like以通配符开头（’$abc…’）mysql索引失效会变成全表扫描操作</p><p>9.字符串不加单引号索引失效</p><p>10.少用or或in，用它查询时，mysql不一定使用索引，mysql内部优化器会根据检索比例、<br>表大小等多个因素整体评估是否使用索引，详见范围查询优化</p><p>11.范围查询优化(缩小范围)</p><p>12.查询个数推荐使用count(*)</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/4263609658.png" alt="1578746314207"></p><p>like KK%相当于=常量，%KK和%KK% 相当于范围</p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网上支付平台接口使用总结</title>
    <link href="/2020/01/10/2020-01-10-payment-interface/"/>
    <url>/2020/01/10/2020-01-10-payment-interface/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2019年年底，也就是12月31号那天，西安这边的项目组工作已经结束，项目组人员调回武汉，时隔两年，终于回武汉了！<br>这次回武汉，进入一个与政府有关的项目，主要做<strong>统一支付平台</strong>。<br>主要是归纳一下支付有关的交易工作使用总结。</p><p>如果有感兴趣的同学，建议搜查银行官网的支付对接的文档，比如银联、农行等等都有提供支付接口文档。这里所说的支付场景并不是我们日常使用的二维码支付，那又是另外一种方式。这里所讲的就是一般的支付场景：下订单，选择支付方式，支付请求，支付通知。</p><h2 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h2><p>针对对象有三：消费者浏览器、商户交易网站服务器、银行网上支付平台（以农行为例）</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/3949648068.png" alt="总体架构图"></p><p>我们相当于交易网站服务器，提供支付请求和支付结果通知的转达，记账，对账，清算等处理。</p><h2 id="交易流程"><a href="#交易流程" class="headerlink" title="交易流程"></a>交易流程</h2><h4 id="支付交易"><a href="#支付交易" class="headerlink" title="支付交易"></a>支付交易</h4><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/2439822400.png" alt="支付交易图"></p><p>支付交易因为需要三方的配合（消费者、商户交易网站、网上支付平台），且交易流程是分两阶段进行，所以商户交易平台需要开发两个主要的程序才能完成整个支付的流程，此两支程序为“<strong>支付请求程序</strong>”及“<strong>支付结果接收程序</strong>”。</p><p>交易的过程根据支付结果的接收方式的不同而不同，两种交易流程分别如下图所述：<br><strong>页面通知</strong>支付结果方式：</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/2911269413.png" alt="页面通知的支付流程图"></p><p><strong>服务器通知</strong>支付结果方式：</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/3470969017.png" alt="服务器通知的支付流程图"></p><h4 id="确保支付结果正确送达商户网站的措施"><a href="#确保支付结果正确送达商户网站的措施" class="headerlink" title="确保支付结果正确送达商户网站的措施"></a>确保支付结果正确送达商户网站的措施</h4><p>网上支付平台为了防止网络异常中断所造成的支付结果丢失，建议商户实现下列网上支付平台所提供的机制。</p><ul><li>交易查询<br>针对未收到银行交易结果回复的订单，或银行响应交易状态未明的订单，商户可以在任何时刻主动发起交易查询请求（详细交易说明请参考 5.7 交易查询），查询订单（支付）的状态。例如在商户网站提供消费者支付结果查询的功能，如该订单未收到网上支付平台交易结果，则调用网上支付平台的交易查询交易取得交易结果（订单状态），然后以取得的交易结果更新商户网站的支付状态。</li></ul><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/1495867818.png" alt="交易查询"></p><ul><li><p>通知商户支付成功</p><p>支付成功后，如果消费者浏览器安装了某些拦截弹出窗口软件（例如 3721），那么支付结果接收页面有可能不会正常弹出，此时消费者可以点击【通知商户支付成功】按钮，重新发送支付结果到商户交易平台，确保商户能够收到网上支付平台的交易结果通知。</p></li></ul><h4 id="其它交易"><a href="#其它交易" class="headerlink" title="其它交易"></a>其它交易</h4><p>其它的交易（单笔退款、交易查询、对账单查询）只需要商户及网上支付平台的参与，交易的过程是实时响应，商户只需要简单的开发交易程序即可完成交易的过程。交易过程如下图所述：</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/183663467.png" alt="其它交易"></p><h2 id="交易使用时机"><a href="#交易使用时机" class="headerlink" title="交易使用时机"></a>交易使用时机</h2><ul><li>支付请求交易<br>消费者在商户网站上购买商品，并选择网上支付时。</li><li>支付结果接收<br>消费者在网上支付平台上进行在线支付的操作，支付成功后，网上支付平台会将支付的结果通知到商户指定的支付结果通知页面。商户必须开发此页面，否则无法收到支付结果的<br>通知。</li><li>退款<br>针对已经结帐的订单，商户可以使用单笔退款或批量退款交易来退还交易金额给消费者。退款的交易由商户自行发起，不需要消费者的参与。</li><li>交易查询<br>针对未收到银行交易结果回复的订单，或银行响应交易状态未明的订单，商户可以发起订单查询请求，查询订单的状态。网上支付平台的支付结果页面也会提供消费者通知商户支付成功的链接按钮，用来确定商户是否已经收到网上支付平台的通知。商户必须开发此页面。</li><li>交易流水查询<br>商户可以指定时间段批量查询交易状态。</li><li>对账单查询<br>网上支付平台每日根据联机交易后台返回的会计日期来生成对账单。商户可下载前一日的交易对账单，确定是否有未回传的成功交易。</li><li>网上 K  码支付<br>不需要跳转页面即能实现网上支付。包括网上 K 码支付账单发送、网上 K 码支付支付请求和网上 K 码支付验证码重发。</li><li>授权支付<br>客户、商户和银行三方签约后，银行可以代替商户对客户进行扣款。包括授权支付签约、授权支付签约结果查询、授权支付解约、单笔授权扣款、批量授权扣款和批量授权扣款结果查询。</li><li>身份验证<br>验证客户证件类型、证件号码和卡号是否与本人户名相匹配，包括需要页面跳转的身份验证和非页面跳转的身份验证。</li><li>预授权确认/ 取消<br>支付请求中的支付类型选择“预授权支付”时，预授权确认交易进行扣款，预授权取消交易取消预授权。</li></ul><h2 id="两种接收支付结果方式的区别"><a href="#两种接收支付结果方式的区别" class="headerlink" title="两种接收支付结果方式的区别"></a>两种接收支付结果方式的区别</h2><p>消费者在网上支付平台上进行在线支付的操作，支付成功后，网上支付平台会将支付结果通知给商户，目前通知方式有两种： <strong>通过显示给消费者的支付结果接收页面通知商户</strong>和<strong>通过支付平台服务器通知商户</strong></p><h4 id="通过显示给消费者的支付结果接收页面通知商户"><a href="#通过显示给消费者的支付结果接收页面通知商户" class="headerlink" title="通过显示给消费者的支付结果接收页面通知商户"></a>通过显示给消费者的支付结果接收页面通知商户</h4><p>商户选择此种接收支付结果通知的方式，需要开发一个接收支付结果通知的页面。</p><p>商户在向网上支付平台发送交易请求的时候选择通过 页面通知方式接收支付结果，传送给支付平台一个支付结果通知的页面地址；然后消费者在网上进行在线支付，如果支付成功后，网上支付平台会将支付结果信息通过显示给消费者的支付结果通知页面通知给商户。<br>交易流程如下：</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/2911269413.png" alt="页面通知的支付流程图"></p><h4 id="通过支付平台服务器通知商户"><a href="#通过支付平台服务器通知商户" class="headerlink" title="通过支付平台服务器通知商户"></a>通过支付平台服务器通知商户</h4><p>商户选择此种接收支付结果通知的方式，需要开发两个页面：</p><ul><li>接收服务器通知的页面 ServerURL（ ReceiveServerPage.jsp）。</li><li>展示给消费者支付结果信息的页面 CustomerURL（ResultSuccess.jsp 和 ResultFail.jsp）。</li></ul><p>注意：<strong>这两个页面的 URL  应该是在公网能访问的地址，而且接收服务器通知的页面 仅能 以<br>http  方式访问，不能用 https  访问。</strong></p><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/3470969017.png" alt="服务器通知的支付流程图"></p><p>商户在向网上支付平台发送交易请求的时候选择通过 服务器通知的方式接收支付结果，传送给支付平台一个接收服务器通知的页面（ServerURL），此页面的 HTML 代码里应该包含一个准备展示给消费者支付结果的 URL 链接（CustomerURL） （注意：链接之间需要用<URL></URL>包含，具体代码参见程序范例中的ReceiveServerPage.jsp ），然后消费者在网上进行在线支付，如果支付成功后，网上支付平台会将支付结果通知给商户，商户接收到支付结果信息后，必需将显示给消费者的页面 URL（CustomerURL）链接返回给支付平台服务器，然后支付平台服务器把接收到的这个展示给消费者支付结果信息的页面弹出给消费者显示。</p><p>如果第一次向商户发送通知时发生下列情况时：</p><ul><li> 1、无法连接到指定的商户交易结果接收页面；</li><li>2、商户交易结果接收页面没有正确响应消费者支付结果 URL。</li></ul><p>系统将会在消费者的浏览器弹出一个新的窗口，并以此新窗口打开商户支付结果接收页面（ServerURL）。为了保证在此状况下消费者还是可以看到正常的商户交易结果页面（CustomerURL），建议在 ServerURL 页面加上自动转向 CustomerURL 的脚本，此脚本范例请参考程序范例中的 ReceiveServerPage.jsp 页面。</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>采取通过<strong>页面通知</strong>的方式将支付结果通知给商户，如果消费者的浏览器里安装了一些弹出窗口拦截软件（例如：3721），就会导致页面无法弹出，商户也就无法接收到通知消息；</p><p>采用<strong>服务器通知</strong>的方法，网上支付平台会将支付结果消息通过服务器直接发送给商户指定的URL，而且发送失败以后可以重复发送，这样就保证了商户可以不受消费者本地设置的影响，正确的接收到支付结果通知。</p><h2 id="对账流程"><a href="#对账流程" class="headerlink" title="对账流程"></a>对账流程</h2><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/3124490748.png" alt="对账流程"></p><h2 id="清算流程"><a href="#清算流程" class="headerlink" title="清算流程"></a>清算流程</h2><p><img src="https://images.niaobulashi.com/typecho/uploads/2020/01/2672568168.png" alt="清算流程"></p>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>支付平台</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 压缩zip异常，java.util.zip.ZipException：duplicate entry： 问题</title>
    <link href="/2019/12/09/2019-12-09-java-zip/"/>
    <url>/2019/12/09/2019-12-09-java-zip/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>在测试过程中看到后台打印的日志出现异常，发现这也是历史遗留问题</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.zip</span><span class="hljs-selector-class">.ZipException</span>: duplicate entry: <span class="hljs-number">111111</span>.txt<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.zip</span><span class="hljs-selector-class">.ZipOutputStream</span><span class="hljs-selector-class">.putNextEntry</span>(ZipOutputStream<span class="hljs-selector-class">.java</span>:<span class="hljs-number">215</span>)<br></code></pre></td></tr></table></figure><p>出现这种错误的原因是：<strong>打包的过程中，出现相同的文件名称</strong></p><p>关键代码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doCompress</span><span class="hljs-params">(<span class="hljs-built_in">File</span> file, ZipOutputStream out)</span> throws IOException </span>&#123;<br>    <span class="hljs-keyword">if</span>( file.<span class="hljs-built_in">exists</span>() )&#123;<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        FileInputStream fis = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FileInputStream</span>(file);<br>        out.<span class="hljs-built_in">putNextEntry</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">ZipEntry</span>(file.<span class="hljs-built_in">getName</span>()));<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span> ;<br>        <span class="hljs-comment">// 读取文件的内容,打包到zip文件</span><br>        <span class="hljs-keyword">while</span> ((len = fis.<span class="hljs-built_in">read</span>(buffer)) &gt; <span class="hljs-number">0</span>) &#123;<br>            out.<span class="hljs-built_in">write</span>(buffer, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        out.<span class="hljs-built_in">flush</span>();<br>        out.<span class="hljs-built_in">closeEntry</span>();<br>        fis.<span class="hljs-built_in">close</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这里</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">out.put<span class="hljs-constructor">NextEntry(<span class="hljs-params">new</span> ZipEntry(<span class="hljs-params">file</span>.<span class="hljs-params">getName</span>()</span>));<br></code></pre></td></tr></table></figure><p>参数<code>file.getName()</code>存在相同的文件名称时，就会出现开头处的异常信息。</p><p>解决方法：<br>针对文件名做唯一处理，后面见加上时间戳信息，也可以加上别的数据，避免文件名一致</p><p>也就是在方法doCompress的参数file中，name应该做唯一处理</p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Java的File.separator</title>
    <link href="/2019/12/04/2019-12-04-write-post/"/>
    <url>/2019/12/04/2019-12-04-write-post/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>File file=new File(); 这句是新建一个文件。<br>file.separator这个代表系统目录中的间隔符，说白了就是斜线，不过有时候需要双线，有时候是单线，你用这个静态变量就解决兼容问题了。</p></blockquote><p>在<strong>Windows</strong>下的路径分隔符和<strong>Linux</strong>下的路径分隔符是不一样的，当直接使用绝对路径时，跨平台会暴出“No such file or diretory”的异常。</p><p>比如说要在temp目录下建立一个test.txt文件，在<strong>Windows</strong>下应该这么写：<br>File file1 = new File (“C:\tmp\test.txt”);<br>在<strong>linux</strong>下则是这样的：<br>File file2 = new File (“/tmp/test.txt”);</p><p>如果要考虑跨平台，则最好是这么写：<br>File myFile = new File(“C:” + File.separator + “tmp” + File.separator, “test.txt”);</p><p>File类有几个类似separator的静态字段，都是与系统相关的，在编程时应尽量使用。</p><p><strong>separatorChar</strong></p><p>public static final char separatorChar</p><p>与系统有关的默认名称分隔符。此字段被初始化为包含系统属性 file.separator 值的第一个字符。在 UNIX 系统上，此字段的值为 ‘/‘；在 Microsoft Windows 系统上，它为 ‘&#39;。</p><p><strong>separator</strong></p><p>public static final String separator</p><p>与系统有关的默认名称分隔符，为了方便，它被表示为一个字符串。此字符串只包含一个字符，即 separatorChar。</p><p><strong>pathSeparatorChar</strong></p><p>public static final char pathSeparatorChar</p><p>与系统有关的路径分隔符。此字段被初始为包含系统属性 path.separator 值的第一个字符。此字符用于分隔以路径列表 形式给定的文件序列中的文件名。在 UNIX 系统上，此字段为 ‘:’；在 Microsoft Windows 系统上，它为 ‘;’。</p><p><strong>pathSeparator</strong></p><p>public static final String pathSeparator</p><p>与系统有关的路径分隔符，为了方便，它被表示为一个字符串。此字符串只包含一个字符，即 pathSeparatorChar。</p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>癌症发生的时候，有什么状态预警吗？</title>
    <link href="/2019/10/25/2019-10-25-cancer/"/>
    <url>/2019/10/25/2019-10-25-cancer/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>周五啦，又是划水的一天</p><p>本来开开心心的刷知乎热搜，刷到这一条。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/10/3686351753.png" alt="你是如何发现早期癌症的.png"></p><p>本来生活不易，要是来个这，那还不得急死，但是这也是可以防范的。</p><p>为了更多的了解这方面的知识，还特地开通的知乎盐选的盐选会员∠( ᐛ 」∠)＿</p><p>个人觉得有必要让各位小伙伴知道的也会在博客贴出</p><p><strong>珍爱生命！</strong></p><p>[scode type=”red”]纯属推广知识，望各位小伙伴悉知。[/scode]</p><p><strong>早期发现，早点治疗！</strong></p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/10/3134954103.png" alt="癌症发生的时候，有什么状态预警吗1"></p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/10/1087549246.png" alt="癌症发生的时候，有什么状态预警吗2"></p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/10/3066470078.png" alt="癌症发生的时候，有什么状态预警吗3"></p><p>最后附上一张：十大癌症死亡率</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/10/1141866718.jpg" alt="十大癌症死亡率"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iPhone11入手感受</title>
    <link href="/2019/09/29/2019-09-29-iPhone11/"/>
    <url>/2019/09/29/2019-09-29-iPhone11/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[scode type=”blue”]iPhone11在某宝购入，下单时间9月19号，20号发售，我算是第一批最晚入手的了。[/scode]</p><p>入手的是iPhone11，宝强绿，256G机身存储。软妹币6799<br>机子23才拿到货，一路奔波啊。（详见上篇文章）<br>[post cid=”1329” /]</p><p>在收到机器第一时间，拆开之前查看了序列号，发现产地是深圳富士康，放心了。<br>于是就放心的拆盒，激活</p><table>    <tr>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/09/1365705976.jpg" alt="iPhone11包装照片" width="500px"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/09/131923104.jpg" alt="iPhone11激活照片" width="500px"/></td>    </tr></table><p>近一点看看背面照，我觉得蛮好看的 ::aru:cheer:: </p><img src="https://images.niaobulashi.com/typecho/uploads/2019/09/3984418504.jpg" alt="iPhone11背面照" width="800px"/><p>有段时间发烫的iPhone11好几次登上微博知乎的热搜讨论话题</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/09/1447767381.png" alt="知乎讨论热点问题1"></p><p>好多人在激活的时候机身发烫，当然，我也遇见了。<br>也只是在激活的时候发烫一下。后面的具体使用起来并没有什么发烫了。一切功能都是正常的使用着。<br>因为我上一个iPhone还是5s，中间换用安卓机了，现在直接跳到iPhone11。对我的直接感受肯定是质的提升。<br>使用起来简直飞起了。</p><p>我也看了这届屏幕容易有划痕，昨晚我就去贴了个168的膜（心疼）上了20多的保护套。<br>握在手里的感觉：好重，也厚；亮屏的黑边确实可以跑马了哈哈哈哈，黑边太大了。好在带了套，视觉感觉不明显了。</p><p>我以为这波车有点不稳，但是实际使用两天的感受，达到自己的预期。没有翻车。</p><p>激活后，拿着大学时买的5s小手机，备份出资料到iTunes。然后连上iPhone11，将陈年老照片还原备份到新iPhone上。<br>下载了爱思助手，连上iPhone11，就读取了相关资料，查看了验机报告如下：<br><img src="https://images.niaobulashi.com/typecho/uploads/2019/09/1114179378.png" alt="iPhone 11_验机报告"></p><p>验机报告没有问题，没有在官网买，在某宝买的，送了天猫精灵和无线充电，还不错哦~<br><img src="https://images.niaobulashi.com/typecho/uploads/2019/09/2363432167.jpg" alt="到货物品" width="800px"/></p><p>最后看下手机的截图数据</p><table>    <tr>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/09/2918834426.png" alt="iPhone11截图照片1" width="300px"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/09/4033219463.png" alt="iPhone11截图照片2" width="300px"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/09/609033422.png" alt="iPhone11截图照片3" width="300px"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/09/2506052701.png" alt="iPhone11截图照片3" width="300px"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/09/597823546.jpg" alt="iPhone11关于截图" width="300px"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/09/2001989561.png" alt="iPhone11存储空间截图" width="300px"/></td>    </tr></table><p>看下手机的关于截图，和存储截图<br>256G大小是真的爽，完全不用担心存储不够，照片全都转移到手机了</p><p>最后说说其他的<br>续航能力：续航能力个人觉得还不错的，够用一天。<br>信号强度：信号肯定不及安卓机的，和上一个手机在相同位置相比，我这才3G的型号，信号肯定一般般。<br>充电速度：我另外买了18W的充电套装，5福1安肯定不会用的。<br>音质：环绕音效（上方听筒、下方充电处）超赞！</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>还是忍不住买了iPhone11绿色版</title>
    <link href="/2019/09/23/2019-09-23-buy-iphone11/"/>
    <url>/2019/09/23/2019-09-23-buy-iphone11/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>—————20190923更新—————-<br>更新快递最新走势<br>今天是周一，我本来写的收件地址是宿舍。因为周末会到，但是没有 ::aru:crying::<br>于是今天一大早打客服电话要求转寄，转寄到公司地址，需要额外到付收取转寄费用10元<br>我以为转寄流程挺方便的，只需要从A快递员转给B快递员，然后由B快递员寄送。<br>但是我想得太简单了。。<br>快递件需要重新回到<strong>集散中心</strong><br>在<strong>集散中心</strong>重新分配发货啊啊啊啊啊啊啊<br>于是本来上午就可以拿到的，被我手贱转寄到下午才能拿到了。 ::aru:dead::<br>下图是快递的运单追踪，是我见过最长的快递追踪单了</p><img src="https://images.niaobulashi.com/typecho/uploads/2019/09/816952258.png" alt="iPhone11快递追踪单" width="400px"/><p>—————原文—————<br>中意你很久了！<br>不知道现在买11是不是一个很好的选择，放弃了未来的5G会不会让自己后悔，<br>记得上一个iPhone还是5s来着，之后改用安卓机了。现在又开始用iPhone，直接跳到11了<br>希望别翻车(ﾟДﾟ)/</p><p>经过媳妇的同意了，不过说的是64G<br>怕说256G ::aru:crying::  ::aru:crying:: </p><img src="https://images.niaobulashi.com/typecho/uploads/2019/09/1672144239.jpg" alt="订单" width="400px"/>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>认识你7年后终于领证了</title>
    <link href="/2019/09/16/2019-09-16-certification/"/>
    <url>/2019/09/16/2019-09-16-certification/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2019年9月9号</p><p>终于领证了，从大一认识到现在，已经7年了<br>实属不易<br>毕业之后异地<br>期间分分合合，始终放不下<br>最后<br>我们熬过去了<br>以后<br>好好走下去<br> ::twemoji:congratulate::  ::twemoji:congratulate::  ::twemoji:congratulate:: </p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/09/1807370924.png" alt="结婚证"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>性能调优-Mysql索引数据结构详解与索引优化</title>
    <link href="/2019/08/30/2019-08-30-mysql-indexes/"/>
    <url>/2019/08/30/2019-08-30-mysql-indexes/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>最近报名了图灵学院的架构专题的付费课程，没有赶上6月份开课，中途加入的。错过了多线程的直播课程，只能看录播了😭。从性能调优正式开始，视频学习，对自己很有帮助。对自己的学习进行投资是最有用的投资。加油！</p></blockquote><p>本篇文章主要学习了MySQL的索引的数据结构和不同类型索引的认识，做一个大概的了解学习总结。</p><h2 id="一、索引"><a href="#一、索引" class="headerlink" title="一、索引"></a>一、索引</h2><p>在关系数据库中，索引是一种单独的、物理的对数据库表中一列或多列的值进行<strong>排序</strong>的一种存储<strong>数据结构</strong>，它是某个表中一列或若干列值的集合和相应的指向表中物理标识这些值的数据页的逻辑<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88/2878304">指针</a>清单。索引的作用相当于图书的目录，可以根据目录中的页码快速查找到所需的内容。</p><p>在MySQL中，存储引擎用类似的方法使用索引，先在索引中找到对应值，然后根据匹配的索引记录找到对应的行。</p><p>首先说明下MySQL的索引主要是基于Hash表或者B+树。</p><h2 id="二、索引数据结构"><a href="#二、索引数据结构" class="headerlink" title="二、索引数据结构"></a>二、索引数据结构</h2><p>了解索引就需要从索引常见的数据结构开始了解学习，这里有集中常见的的索引数据结构。</p><h3 id="二叉树（Binary-Trees）"><a href="#二叉树（Binary-Trees）" class="headerlink" title="二叉树（Binary Trees）"></a>二叉树（Binary Trees）</h3><p>二叉树是每个节点最多只有两个分支（即不存在分支度大于2的节点）的树结构。通常被称之为“左子树”和“右子树”</p><p><a href="https://images.niaobulashi.com/typecho/uploads/2019/08/266359583.jpg"><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/266359583.jpg" alt="二叉树示例图"></a></p><p><strong>左子树&lt;父节点&lt;=右子树</strong></p><p>二叉树的第i层至多有有2^(i-1)个节点，</p><p>深度为K的二叉树至多总共有个2^k-1节点（定义根节点所在深度 k0=0），而总计拥有节点数符合的，称为“满二叉树”；</p><p>二叉树通常作为数据结构应用，典型用法是对节点定义一个标记函数，将一些值与每个节点相关系。这样标记的二叉树就可以实现<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9">二叉搜索树</a>和<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E5%A0%86%E7%A9%8D">二叉堆</a>，并应用于高效率的搜索和排序。</p><p>同时学习数据结构，这里还推荐<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">Data Structure Visualizations</a>进行学习，可以非常直观的看到数据结构允许的过程，一步一步的怎么走的都可以很清晰看得到。</p><p>找到其中的<a href="https://www.cs.usfca.edu/~galles/visualization/BST.html">Binary Search Trees</a>二叉树</p><p><a href="https://images.niaobulashi.com/typecho/uploads/2019/08/3377076316.png"><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/3377076316.png" alt="1566357073576.png"></a></p><p>可以直观的看到二叉树的数据插入过程，如下：</p><p><a href="https://images.niaobulashi.com/typecho/uploads/2019/08/694518672.gif"><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/694518672.gif" alt="二叉树插入过程"></a></p><p>可以看到二叉树不适合用作当作索引的，数据量庞大的话，二叉树的层数会很大，查找效率固然也很慢了。</p><p>推荐阅读：<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91">维基百科-二叉树</a></p><h3 id="红黑树（Red-Black-Trees）"><a href="#红黑树（Red-Black-Trees）" class="headerlink" title="红黑树（Red-Black Trees）"></a>红黑树（Red-Black Trees）</h3><p>是一种自平衡二叉查找树，典型用途是实现关联数组。</p><p>红黑树的结构复杂，但它的操作有着良好的最坏情况<a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90">运行时间</a>，并且在实践中高效：它可以在O(log n)时间内完成查找，插入和删除，这里的n是树中元素的数目。</p><p>红黑树遵行以下原则：</p><ol><li>节点是红色或黑色。</li><li>根是黑色。</li><li>所有叶子都是黑色（叶子是NIL节点）。</li><li>每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</li><li>从任一节点到其每个叶子的所有<a href="https://zh.wikipedia.org/wiki/%E9%81%93%E8%B7%AF_(%E5%9B%BE%E8%AE%BA)">简单路径</a>都包含相同数目的黑色节点。</li></ol><p>下面是一个具体的红黑树的图例：</p><p><a href="https://images.niaobulashi.com/typecho/uploads/2019/08/397413570.png"><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/397413570.png" alt="简单红黑树示例图"></a></p><p>这些约束确保了红黑树的关键特性：从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。结果是这个树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91">二叉查找树</a>。</p><p>要知道为什么这些性质确保了这个结果，注意到性质4导致了路径不能有两个毗连的红色节点就足够了。最短的可能路径都是黑色节点，最长的可能路径有交替的红色和黑色节点。因为根据性质5所有最长的路径都有相同数目的黑色节点，这就表明了没有路径能多于任何其他路径的两倍长。</p><p>同样在<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">Data Structure Visualizations</a>中选择<a href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html">Red-Black Trees</a>红黑树进行插入操作可以直观的看到红黑树的插入过程</p><p><a href="https://images.niaobulashi.com/typecho/uploads/2019/08/588681853.gif"><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/588681853.gif" alt="红黑树插入过程"></a></p><p>同样红黑树也不适用于MySQL的索引，数据量庞大之后，数层也会变大。</p><p>推荐阅读：</p><p><a href="https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91">维基百科-红黑树</a></p><p><a href="https://mp.weixin.qq.com/s/jz1ajDUygZ7sXLQFHyfjWA">程序员小灰-红黑树</a></p><h3 id="其他结构的问题"><a href="#其他结构的问题" class="headerlink" title="其他结构的问题"></a>其他结构的问题</h3><p>由于无法装入内存，则必然依赖磁盘（或SSD）存储。而内存的读写速度是磁盘的成千上万倍（与具体实现有关），因此，核心问题是“如何减少磁盘读写次数”。</p><p>首先不考虑页表机制，假设每次读、写都直接穿透到磁盘，那么：</p><ul><li>线性结构：读/写平均O(n)次</li><li>二叉搜索树（<code>BST</code>）：读/写平均O(log2(n))次；如果树不平衡，则最差读/写O(n)次</li><li>自平衡二叉搜索树（<code>AVL</code>）：在BST的基础上加入了自平衡算法，读/写最大O(log2(n))次</li><li>红黑树（<code>RBT</code>）：另一种自平衡的查找树，读/写最大O(log2(n))次</li></ul><p><code>BST</code>、<code>AVL</code>、<code>RBT</code>很好的将读写次数从O(n)优化到O(log2(n))；其中，<code>AVL</code>和<code>RBT</code>都比<code>BST</code>多了自平衡的功能，将读写次数降到最大O(log2(n))。</p><p>假设使用自增主键，则主键本身是有序的，树结构的读写次数能够优化到树高，树高越低读写次数越少；自平衡保证了树结构的稳定。如果想进一步优化，可以引入<code>B树</code>和<code>B+树</code>。</p><h3 id="B树（B-Trees）"><a href="#B树（B-Trees）" class="headerlink" title="B树（B-Trees）"></a>B树（B-Trees）</h3><p>又称：多路平衡查找树。大多数存储引擎都支持B树索引。b树通常意味着所有的值都是按顺序存储的，并且每一个叶子节点到根的距离相同。B树索引能够加快访问数据的速度，因为存储引擎不再需要进行全表扫描来获取数据。下图就是一颗简单的B树。</p><p>在B树中，内部（非叶子）节点可以拥有可变数量的子节点（数量范围预先定义好）。当数据被插入或从一个节点中移除，它的子节点数量发生变化。为了维持在预先设定的数量范围内，内部节点可能会被合并或者分离。</p><p>如下图所示：</p><p><a href="https://images.niaobulashi.com/typecho/uploads/2019/08/1766166186.png"><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/1766166186.png" alt="B数结构图"></a></p><ul><li>叶节点具有相同的深度，叶节点的指针为空</li><li>所有索引元素不重复</li><li>节点中的数据索引从左到右递增排列</li><li>无论中间节点还是叶子节点都带有卫星数据data（索引元素所指向的数据记录）</li></ul><p><a href="https://images.niaobulashi.com/typecho/uploads/2019/08/2998451842.gif"><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/2998451842.gif" alt="B树插入过程"></a></p><p>只演示了插入的过程，其中可以通过delete、find执行删除和查找操作。直观的感受到B树的执行过程。</p><p>每个节点存储了多个Key和子树，子树与Key按顺序排列。</p><blockquote><p>同二叉搜索树类似，每个节点存储了多个key和子树，子树与key按顺序排列。</p><p>页表的目录是扩展外存+加速磁盘读写，一个页（Page）通常4K（等于磁盘数据块block的大小，见inode与block的分析），操作系统每次以页为单位将内容从磁盘加载到内存（以摊分寻道成本），修改页后，再择期将该页写回磁盘。考虑到页表的良好性质，可以使每个节点的大小约等于一个页（使m非常大），这每次加载的一个页就能完整覆盖一个节点，以便选择下一层子树；对子树同理。对于页表来说，AVL（或RBT）相当于1个key+2个子树的B树，由于逻辑上相邻的节点，物理上通常不相邻，因此，读入一个4k页，页面内绝大部分空间都将是无效数据。</p></blockquote><p>假设key、子树节点指针均占用4B，则B树节点最大<code>m * (4 + 4) = 8m B</code>；页面大小4KB。则<code>m = 4 * 1024 / 8m = 512</code>，一个512叉的B树，1000w的数据，深度最大 <code>log(512/2)(10^7) = 3.02 ~= 4</code>。对比二叉树如AVL的深度为<code>log(2)(10^7) = 23.25 ~= 24</code>，相差了5倍以上。震惊！B树索引深度竟然如此！</p><p>那为什么B数这么厉害了，还有B+树的出现呢，必然是解决B树存在的问题</p><p>1、为定位行数</p><p>2、无法处理范围查询</p><p><strong>问题1：为定位行数</strong></p><p>数据表的记录有多个字段，仅仅定位到主键是不够的，还需要定位到数据行。有3个方案解决：</p><ol><li>直接将key对应的数据行（可能对应多行）存储子节点中。</li><li>数据行单独存储；节点中增加一个字段，定位key对应数据行的位置。</li><li>修改key与子树的判断逻辑，使子树大于等于上一key小于下一key，最终所有访问都将落于叶子节点；叶子节点中直接存储数据行或数据行的位置。</li></ol><p>方案1直接pass，存储数据行将减少页面中的子树个数，m减小树高增大。</p><p>方案2的节点中增加了一个字段，假设是4B的指针，则新的<code>m = 4 * 1024 / 12m = 341.33 ~= 341</code>，深度最大 <code>log(341/2)(10^7) = 3.14 ~= 4</code>。</p><p>方案3的节点m与深度不变，但时间复杂度变为稳定的O(logm(n))。</p><p>方案3可以考虑。</p><p><strong>问题2：无法处理范围查询</strong></p><p>实际业务中，范围查询的频率非常高，B树只能定位到一个索引位置（可能对应多行），很难处理范围查询。改动较小的是2个方案：</p><ol><li>不改动；查询的时候先查到左界，再查到右界，然后DFS（或BFS）遍历左界、右界之间的节点。</li><li>在“问题1-方案3”的基础上，由于所有数据行都存储在叶子节点，B树的叶子节点本身也是有序的，可以增加一个指针，指向当前叶子节点按主键顺序的下一叶子节点；查询时先查到左界，再查到右界，然后从左界到有界线性遍历。</li></ol><p>乍一看感觉方案1比方案2好——时间复杂度和常数项都一样，方案1还不需要改动。但是别忘了局部性原理，不管节点中存储的是数据行还是数据行位置，方案2的好处在于，依然可以利用页表和缓存预读下一节点的信息。而方案1则面临节点逻辑相邻、物理分离的缺点。<br>推荐阅读：</p><p><a href="https://zh.wikipedia.org/wiki/B%E6%A0%91">维基百科-B树</a></p><p><a href="https://mp.weixin.qq.com/s/rDCEFzoKHIjyHfI_bsz5Rw">程序员小灰-B树</a></p><h3 id="B-树（B-Trees）"><a href="#B-树（B-Trees）" class="headerlink" title="B+树（B+Trees）"></a>B+树（B+Trees）</h3><p>主要变动如上所述：</p><ul><li>修改key与子树的组织逻辑，将索引访问都落到叶子节点</li><li>按顺序将叶子节点串起来（方便范围查询）</li></ul><p>回顾上一个B树，<strong>一个m阶的B树具有如下几个特征：</strong></p><p>1.根结点至少有两个子女。</p><p>2.每个中间节点都包含k-1个元素和k个孩子，其中 m/2 &lt;= k &lt;= m</p><p>3.每一个叶子节点都包含k-1个元素，其中 m/2 &lt;= k &lt;= m</p><p>4.所有的叶子结点都位于同一层。</p><p>5.每个节点中的元素从小到大排列，节点当中k-1个元素正好是k个孩子包含的元素的值域分划。</p><p><strong>一个m阶的B+树具有如下几个特征：</strong></p><p>1.有k个子树的中间节点包含有k个元素（B树中是k-1个元素），每个元素不保存数据，只用来索引，所有数据都保存在叶子节点。</p><p>2.所有的叶子结点包含了全部元素的信息，及指向含这些元素记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。</p><p>3.所有的中间节点元素都同时存在于子节点，在子节点元素中是最大（或最小）元素。</p><p><strong>B+树特性总结</strong></p><p><strong>B+树是B树的升级版</strong>，其有如下特性</p><ul><li>非叶子节点不存储data，只存储索引(冗余)，可以放更多的索引</li><li>叶子节点包含所有索引字段</li><li>叶子节点用指针连接，提高区间访问的性能</li><li>只有叶子节点带有卫星数据data（索引元素所指向的数据记录）</li></ul><p><a href="https://images.niaobulashi.com/typecho/uploads/2019/08/1235167357.png"><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/1235167357.png" alt="1566368976038.png"></a></p><p>同样在<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">Data Structure Visualizations</a>中选择<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">B+ Trees</a>B+树进行插入操作可以直观的看到插入过程</p><p><a href="https://images.niaobulashi.com/typecho/uploads/2019/08/18100144.gif"><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/18100144.gif" alt="B+树插入过程"></a></p><p>在动图中可以看出，B+树的每一个叶子节点都有一个指针指向下一个节点，把所有的叶子节点串在一起。索引数据都存储在叶子节点中。</p><p>B+树相比于B树，有什么优势呢：</p><p>1.单一节点存储更多的元素，使得查询的IO次数更少。</p><p>2.所有查询都要查找到叶子节点，查询性能稳定。</p><p>3.所有叶子节点形成有序链表，便于范围查询。</p><p>总结，B+树相比B树的优势有三：1.IO次数更少；2.查询性能稳定；3.范围查询简便。</p><p>推荐阅读：</p><p><a href="https://zh.wikipedia.org/wiki/B%2B%E6%A0%91">维基百科-B+树</a></p><p><a href="https://mp.weixin.qq.com/s/jRZMMONW3QP43dsDKIV9VQ">程序员小灰-B+树</a></p><h3 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h3><p>hash索引基于hash表实现，<strong>Hash 索引是将索引键通过 Hash 运算之后，将 Hash运算结果的 Hash 值和所对应的行指针信息存放于一个 Hash 表中</strong>。只有精准匹配索引所有列的查询才有效。索引的检索可以一次定位，不像B-Tree索引需要从根节点出发到目标节点。虽然Hash索引很快，远高于B-tree索引，但是也有其弊端。</p><ol><li>Hash索引仅仅能满足’=’,’IN’,’&lt;=&gt;’查询，也就是等值查询，不能使用范围查询。很受限<ol><li>由于 Hash 索引比较的是进行 Hash 运算之后的 Hash 值，所以它只能用于等值的过滤，不能用于基于范围的过滤，因为经过相应的 Hash 算法处理之后的 Hash 值的大小关系，并不能保证和Hash运算前完全一样。</li></ol></li><li>由于Hash索引是通过hash表实现，其本身是没有排序的。<ol><li>由于 Hash 索引中存放的是经过 Hash 计算之后的 Hash 值，而且Hash值的大小关系并不一定和 Hash 运算前的键值完全一样，所以数据库无法利用索引的数据来避免任何排序运算； </li></ol></li><li>Hash索引不能利用部分索引键查询<ol><li>对于组合索引，Hash索引在计算hash值的时候是组合索引键合并后再一起计算hash值，而不是单独计算hash值，所以通过组合索引的前面一个或几个索引键进行查询的时候，Hash 索引也无法被利用。</li></ol></li><li>Hash 索引在任何时候都不能避免表扫描<ol><li>前面已经知道，Hash 索引是将索引键通过 Hash 运算之后，将 Hash运算结果的 Hash 值和所对应的行指针信息存放于一个 Hash 表中，由于不同索引键存在相同 Hash 值，所以即使取满足某个 Hash 键值的数据的记录条数，也无法从 Hash 索引中直接完成查询，还是要通过访问表中的实际数据进行相应的比较，并得到相应的结果。</li></ol></li><li>Hash 索引遇到大量Hash值相等的情况后性能并不一定就会比B-Tree索引高。<ol><li>对于选择性比较低的索引键，如果创建 Hash 索引，那么将会存在大量记录指针信息存于同一个 Hash 值相关联。这样要定位某一条记录时就会非常麻烦，会浪费多次表数据的访问，而造成整体性能低下。</li></ol></li></ol><h2 id="三、MySQL数据库引擎"><a href="#三、MySQL数据库引擎" class="headerlink" title="三、MySQL数据库引擎"></a>三、MySQL数据库引擎</h2><p>通过navicat工具查看表设计选项中，从引擎中可以看到MySQL又这么多引擎。具体细分到每个表，不同的表引擎可以不一样。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/1934170161.png" alt="MySQL数据库引擎"></p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>新建一张表t_test_myisam，引擎使用MyISAM，查看原文件可以看到有3个文件</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/1845963369.png" alt="MyISAM索引结构原文件"></p><p>可以看到索引和数据是分开的，其中索引文件仅仅保存数据记录的地址，故属于<strong>非聚簇索引</strong>。</p><h4 id="主键索引（Primary-Index）"><a href="#主键索引（Primary-Index）" class="headerlink" title="主键索引（Primary Index）"></a>主键索引（Primary Index）</h4><p>MyISAM引擎使用B+Tree作为索引结构，叶节点的data存放的是数据记录的地址。如下图是MyISAM主键索引的原理图。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/2287658511.png" alt="MyISAM主键索引"></p><p>其中Col1为主键，可以看出看出MyISAM的索引文件仅保存数据记录的地址。</p><h4 id="辅助索引（Secondary-Index）"><a href="#辅助索引（Secondary-Index）" class="headerlink" title="辅助索引（Secondary Index）"></a>辅助索引（Secondary Index）</h4><p>在Col2上建立一个辅助索引，如下图辅助索引原理图。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/1683017602.png" alt="MyISAM辅助索引"></p><p>可以看到与主键索引没有任何区别，只不过主键索引的key是唯一的，而辅助索引的key可以重复。</p><p><strong>MyISAM中索引检索的算法为首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。</strong></p><p>其中三个字段就是联合索引。</p><p>由于联合索引的出现，key由多个列组成，列的排序决定了可命中索引的列数。也叫<strong>最左前缀匹配</strong></p><p>索引只能用于查找key是否存在（相等），遇到范围查找（&gt;,&lt;,=,between,like左匹配）等就不能进一步匹配。</p><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>新建一张表t_test_innodb，引擎使用InnoDB，查看原文件可以看到有2个文件</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/2293316698.png" alt="InnoDB索引结构原文件"></p><h4 id="主键索引（Primary-Index）-1"><a href="#主键索引（Primary-Index）-1" class="headerlink" title="主键索引（Primary Index）"></a>主键索引（Primary Index）</h4><p>InnoDB的索引和数据在一个文件当中。</p><p>按照B+Tree组织的一个索引结构。</p><p>叶节点保存了完整的数据记录和索引。这种索引就叫做<strong>聚簇索引</strong>。</p><p>索引的Key是数据的主键，因此InnoDB表数据文件本身就是主索引。</p><p>如下图：</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/3621007399.png" alt="InnoDB主键索引"></p><p>可以看到叶节点包含了完整的数据记录。</p><p>因为InnoDB的数据文件本身要按照主键聚集，所以InnoDB要求<strong>必须有主键</strong>。如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段rowid作为主键，这个字段长度为6个字节，类型为长整形。</p><h4 id="辅助索引（Secondary-Index）-1"><a href="#辅助索引（Secondary-Index）-1" class="headerlink" title="辅助索引（Secondary Index）"></a>辅助索引（Secondary Index）</h4><p>辅助索引，将途中的第二行name，作为索引如图</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/3723123900.png" alt="InnoDB辅助索引"></p><p><strong>InnoDB 表是基于聚簇索引建立的</strong>。聚簇索引这种实现方式使得按照主键的搜索十分高效，但是<strong>需要首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录</strong>。</p><p><img src="https://cllc.fun/2019/04/01/mysql-index/3.png" alt="123123"></p><p>由于InnoDB索引的实现特性，推荐使用整形的自增主键。</p><p>有三点好处：</p><ol><li>自增key一般为int等整数型，key比较紧凑，这样m可以非常大，而且索引占用空间小。最极端的例子，如果使用50B的varchar（包括长度），那么<code>m = 4 * 1024 / 54m = 75.85 ~= 76</code>，深度最大<code>log(76/2)(10^7) = 4.43 ~= 5</code>，再加上cache缺失、字符串比较的成本，时间成本增加较大。同时，key由4B增长到50B，整棵索引树的空间占用增长也是极为恐怖的（如果二级索引使用主键定位数据行，则空间增长更加严重）。</li><li>MySQL索引底层的数据比较都是整数型比较，如果主键时字符串类型的，里面还有英文，还得转换ASCII码进行比较。所以不建议使用uuid作为主键。</li><li>自增的主键使得数据行的插入比如落到索引数的最右侧，发生节点分裂的频率较低。<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">B+Tree</a>实际操作插入过程。如果不是非单调主键，插入过程很大程度会发生节点重排，不利于索引优化的初衷。</li></ol><h3 id="InnoDB索引和MyISAM索引的区别"><a href="#InnoDB索引和MyISAM索引的区别" class="headerlink" title="InnoDB索引和MyISAM索引的区别"></a>InnoDB索引和MyISAM索引的区别</h3><p>一是主索引的区别：InnoDB的数据文件本身就是索引文件。而MyISAM的索引和数据是分开的。</p><p>二是辅助索引的区别：InnoDB的辅助索引data域存储相应记录主键的值而不是地址。而MyISAM的辅助索引和主索引没有多大区别。</p><h2 id="四、覆盖索引（Covering-index）"><a href="#四、覆盖索引（Covering-index）" class="headerlink" title="四、覆盖索引（Covering index）"></a>四、覆盖索引（Covering index）</h2><p>InnoDB存储引擎支持覆盖索引，即从辅助索引中就可以得到查询的记录，而不需要查询聚集索引中的记录，就是平时所说的不需要回表。</p><p>可以减少大量的IO操作。如果要查询辅助索引中不包含的字段，得先遍历辅助索引，再遍历聚集索引，而如果要查询的字段值在辅助索引上就有，就不用再查聚集索引了，这显然会减少IO操作。</p><h2 id="五、联合索引"><a href="#五、联合索引" class="headerlink" title="五、联合索引"></a>五、联合索引</h2><p>联合索引是指对表上的多个列进行索引。如下图联合索引原理图</p><p>InnoDB存储引擎支持覆盖索引，即从辅助索引中就可以得到查询的记录，不需要查询聚簇索引中的记录了。可以减少大量的IO操作。</p><p>如果要查询辅助索引中不含有的字段，得先遍历辅助索引，再遍历聚集索引，而如果要查询的字段值在辅助索引上就有，就不用再查聚集索引了，这显然会减少IO操作。</p><p>例如，联合索引（a,b,c,d）,查询条件a=1 and b=3 and c&gt;3 and d=4;会依次命中a,b,c，无法命中d，这就是最左前缀匹配。</p><p>两个或以上的列上的索引。如下图联合索引的原理图：</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/271003291.png" alt="联合索引原理图"></p><p>上图中的联合索引有三个，从上到下，严格按照排序。</p><h2 id="六、优化建议"><a href="#六、优化建议" class="headerlink" title="六、优化建议"></a>六、优化建议</h2><h3 id="最左前缀匹配"><a href="#最左前缀匹配" class="headerlink" title="最左前缀匹配"></a>最左前缀匹配</h3><p>索引可以简单如一个列(a)，也可以复杂如多个列(a, b, c, d)，即<code>联合索引</code>。如果是联合索引，那么key也由多个列组成，同时，索引只能用于查找key是否存在（相等），遇到范围查询(&gt;、&lt;、between、like左匹配)等就不能进一步匹配了，后续退化为线性查找。因此，列的排列顺序决定了可命中索引的列数。</p><p>如有索引(a, b, c, d)，查询条件<code>a = 1 and b = 2 and c &gt; 3 and d = 4</code>，则会在每个节点依次命中a、b、c，无法命中d。也就是最左前缀匹配原则。</p><h3 id="、in自动优化顺序"><a href="#、in自动优化顺序" class="headerlink" title="=、in自动优化顺序"></a>=、in自动优化顺序</h3><p>不需要考虑=、in等的顺序，mysql会自动优化这些条件的顺序，以匹配尽可能多的索引列。</p><p>如有索引(a, b, c, d)，查询条件<code>c &gt; 3 and b = 2 and a = 1 and d &lt; 4</code>与<code>a = 1 and c &gt; 3 and b = 2 and d &lt; 4</code>等顺序都是可以的，MySQL会自动优化为<code>a = 1 and b = 2 and c &gt; 3 and d &lt; 4</code>，依次命中a、b、c。</p><h3 id="索引列不能参与计算"><a href="#索引列不能参与计算" class="headerlink" title="索引列不能参与计算"></a>索引列不能参与计算</h3><p>有索引列参与计算的查询条件对索引不友好（甚至无法使用索引），如<code>from_unixtime(create_time) = &#39;2014-05-29&#39;</code>。</p><p>原因很简单，如何在节点中查找到对应key？如果线性扫描，则每次都需要重新计算，成本太高；如果二分查找，则需要针对from_unixtime方法确定大小关系。</p><p>因此，索引列不能参与计算。上述<code>from_unixtime(create_time) = &#39;2014-05-29&#39;</code>语句应该写成<code>create_time = unix_timestamp(&#39;2014-05-29&#39;)</code>。</p><h3 id="能扩展就不要新建索引"><a href="#能扩展就不要新建索引" class="headerlink" title="能扩展就不要新建索引"></a>能扩展就不要新建索引</h3><p>如果已有索引(a)，想建立索引(a, b)，尽量选择修改索引(a)为索引(a, b)。</p><p>新建索引的成本很容易理解。而基于索引(a)修改为索引(a, b)的话，MySQL可以直接在索引a的B+树上，经过分裂、合并等修改为索引(a, b)。</p><h3 id="不需要建立前缀有包含关系的索引"><a href="#不需要建立前缀有包含关系的索引" class="headerlink" title="不需要建立前缀有包含关系的索引"></a>不需要建立前缀有包含关系的索引</h3><p>如果已有索引(a, b)，则不需要再建立索引(a)，但是如果有必要，则仍然需考虑建立索引(b)。</p><h3 id="选择区分度高的列作索引"><a href="#选择区分度高的列作索引" class="headerlink" title="选择区分度高的列作索引"></a>选择区分度高的列作索引</h3><p>很容易理解。如，用性别作索引，那么索引仅能将1000w行数据划分为两部分（如500w男，500w女），索引几乎无效。</p><p><code>区分度</code>的公式是<code>count(distinct &lt;col&gt;) / count(*)</code>，表示字段不重复的比例，比例越大区分度越好。唯一键的区分度是1，而一些状态、性别字段可能在大数据面前的区分度趋近于0。</p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx的安装、配置和卸载</title>
    <link href="/2019/08/29/2019-08-29-nginx-start/"/>
    <url>/2019/08/29/2019-08-29-nginx-start/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本篇文章主要学习了Nginx的安装/配置/卸载，做一个大概的了解即可。</p><h3 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h3><p>Nginx（发音同engine x）是异步框架的网页服务器，也可以用作反向代理、负载平衡器和HTTP缓存。该软件由伊戈尔·赛索耶夫创建并于2004年首次公开发布。2011年成立同名公司以提供支持。2019年3月11日，Nginx公司被F5 Networks以6.7亿美元收购。</p><p>Nginx是免费的开源软件，根据类BSD许可证的条款发布。一大部分Web服务器使用Nginx，通常作为负载均衡器。</p><h3 id="1-nginx-卸载："><a href="#1-nginx-卸载：" class="headerlink" title="1.nginx 卸载："></a>1.nginx 卸载：</h3><p><strong>注意点：首先需要停止nginx的服务</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sudo service nginx stop<br></code></pre></td></tr></table></figure><p>（1.）删除nginx，–purge包括配置文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> --purge <span class="hljs-builtin-name">remove</span> nginx<br></code></pre></td></tr></table></figure><p>（2.）自动移除全部不使用的软件包</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> autoremove<br></code></pre></td></tr></table></figure><p>（3.）列出与nginx相关的软件 并删除显示的软件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">dpkg --get-selections|grep nginx<br><br>sudo apt-<span class="hljs-builtin-name">get</span> --purge <span class="hljs-builtin-name">remove</span> nginx<br>sudo apt-<span class="hljs-builtin-name">get</span> --purge <span class="hljs-builtin-name">remove</span> nginx-common<br>sudo apt-<span class="hljs-builtin-name">get</span> --purge <span class="hljs-builtin-name">remove</span> nginx-core<br></code></pre></td></tr></table></figure><p>（4.）再次执行</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">dpkg --get-selections<span class="hljs-string">|grep nginx</span><br><br>which nginx <span class="hljs-meta"># 不在显示nginx</span><br><br>这样就可以完全卸载掉nginx包括配置文件<br></code></pre></td></tr></table></figure><h3 id="2-nginx-安装"><a href="#2-nginx-安装" class="headerlink" title="2.nginx 安装"></a>2.nginx 安装</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install nginx <br></code></pre></td></tr></table></figure><h3 id="3-修改nginx默认端口"><a href="#3-修改nginx默认端口" class="headerlink" title="3.修改nginx默认端口"></a>3.修改nginx默认端口</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">vim <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-enabled/</span><span class="hljs-keyword">default</span><br>server &#123;<br>        listen <span class="hljs-number">80</span> default_server;<br>        listen [::]:<span class="hljs-number">80</span> default_server;<br></code></pre></td></tr></table></figure><h3 id="4-nginx部署前端代码"><a href="#4-nginx部署前端代码" class="headerlink" title="4.nginx部署前端代码"></a>4.nginx部署前端代码</h3><p>（1.）编译前端代码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm run build  <span class="hljs-comment">//生成dist文件</span><br></code></pre></td></tr></table></figure><p>（2.）将dist文件夹中的文件拷贝文件到/root/project/www</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp dist<span class="hljs-regexp">/* /</span>root<span class="hljs-regexp">/project/</span>www    <span class="hljs-regexp">//</span>如果目录不存在，提前创建www目录<br></code></pre></td></tr></table></figure><p>（3.）修改/etc/nginx/nginx.conf</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">user</span> root;<br><br><span class="hljs-section">server</span> &#123;<br>      <span class="hljs-attribute">listen</span> <span class="hljs-number">8082</span>;<br>      <span class="hljs-attribute">server_name</span> localhost;<br><br>      <span class="hljs-attribute">root</span> /root/project/www;<br>      <span class="hljs-attribute">index</span> index.html;<br><br>      <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">try_files</span> $uri $uri/ /index.html;<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-nginx启动"><a href="#5-nginx启动" class="headerlink" title="5.nginx启动"></a>5.nginx启动</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">nginx -s stop  <span class="hljs-regexp">//</span>停止<br>nginx -s reload  <span class="hljs-regexp">//</span>重新加载<br>nginx  <span class="hljs-regexp">//</span>启动<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逛一逛大唐不夜城</title>
    <link href="/2019/08/04/2019-08-04-xi-an/"/>
    <url>/2019/08/04/2019-08-04-xi-an/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>不知道有多少个周末没有出去了，之前一直宅着不想出去走，今天实在想出去走走。于是傍晚去了逛了逛大唐不夜城…</p><p>逛之前先写写对西安的一些感想：</p><p>来西安出差快两年了。这时间过得真的快</p><p>17年年底来的时候，赶上了西安严重的雾霾天气，可见度差不多不到百米，很恐怖。除了上班和吃饭，基本不想出门。</p><p>同年赶上抖音app对西安的极度推广，将西安这座城市推向了大众眼中，一度被称为抖音之城，很多网络打卡在西安各个地方爆红，举个栗子：永兴坊的摔碗酒、老茶坊的毛笔酥、冰峰和小兵马俑、石头人笑场等等。。。</p><p>以及当地人关心的房价以肉眼可见的速度迅猛飙升，这个速度领先全国。</p><p>给人的感觉有点过快，快得不是我认知中的那个西安古城。</p><p>可以感受到西安在努力想要成为一座优秀的城市，并为之不断努力着，值得肯定！但似乎有点操之过急了点。</p><p>民风的话，几度被推向了热搜，争论了很久。我也看了一些评论，个人觉得五五开，有好的也有不好的地方，我就不往这方面说下去了！</p><p>相信西安会是一个很不错的城市。毕竟是13朝的古都！</p><hr><p>回到今天的主角：大唐不夜城。<br>每到夜晚，惊艳至极<br>有人说：【从喜欢到爱上只需三秒，其实，三秒只是量化的虚数，天上街市，梦回大唐，在这里，只需一瞬，一瞬，你就可以回到大唐】</p><p>（相机廉价，原始镜头；技术过渣，随便看看）</p><p>当晚的夜色也被红色霓虹灯染成了红色，晚上的西安异常耀眼</p><table>    <tr>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/1060601031.jpg"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/657967137.jpg"/></td>    </tr></table>走一段路就会有这样醒目大字写着：大唐不夜城。人头攒动，很应景<table>    <tr>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/3413010223.jpg"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/1822173089.jpg"/></td>    </tr></table>巍巍大雁塔，历经悠悠岁月，耸立在古都长安的大慈恩寺西院内，它承载着历史，见证着沧桑，展望着未来，作为西安的标志性建筑，在时刻召喚着世界上四面八方的游客纷涌而至。<table>    <tr>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/4124619488.jpg"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/2412143900.jpg"/></td>    </tr></table>我觉得西安玩得最6的应该是灯光了，秀得你头皮发麻 ::aru:thumb:: 其实大晚上的这么多人来这里，就是来拍各种各样的灯光，包括我 ::aru:surprised:: <table>    <tr>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/1362857026.jpg"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/2744572109.jpg"/></td>    </tr></table>景区有很多工作人员在这里工作演出。玩起了悬空的玩法（我也不知道传上来照片就旋转了，刚好治一治颈椎 ::aru:bigeye:: ）<table>    <tr>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/198569365.jpg"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/65073547.jpg"/></td>    </tr></table>晚上还碰巧有游行展出的大车天上的灯光固然不会放过，连地上也别浪费了，各种踩踏感应式灯光铺满地<table>    <tr>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/522464691.jpg"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/348229430.jpg"/></td>    </tr></table>还有唐太宗李世民贞观之治的巨大雕像，象征着大唐盛世的开启，将中国传统农业社会推向鼎盛时期，那时候的GDP应该就是世界第一了吧<table>    <tr>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/956363203.jpg"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/4121878747.jpg"/></td>    </tr></table>西安市政府打造大唐不夜城还是下了不少功夫的，各种店引进来，吸引游客。<table>    <tr>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/2495059789.jpg"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/2808435176.jpg"/></td>    </tr>    <tr>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/925263401.jpg"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/3424253528.jpg"/></td>    </tr></table>回去的路上，时间大概是晚上9点半的样子，过马路，你看，对面还有这么多人进来看。【大唐不夜城，名副其实】还有很多漂亮的穿唐装的小姐姐 ，可别错过啦哈哈哈哈::aru:smile:: <table>    <tr>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/506740253.jpg"/></td>        <td><img src="https://images.niaobulashi.com/typecho/uploads/2019/08/3479488574.jpg"/></td>    </tr></table>个人最喜欢的是，旁边西安大悦城的美猴王雕像，雕像名字叫做【勿空】帅爆了![孙悟空.jpg][1]<p>大唐不夜城实在太<strong>大</strong>，实在逛不完<br>这里附上大唐不夜城的地图，地铁3号线，大雁塔站下C出口就到了广场正门了。<br>旁边就是大唐芙蓉园，顺道也可以去看看。</p><iframe width="970" height="500" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="https://www.openstreetmap.org/export/embed.html?bbox=108.94633912830615%2C34.213584598042935%2C108.97393369465136%2C34.22589828654352&amp;layer=mapnik" style="border: 1px solid black"></iframe><p>西安你刚来可能心里打分并不是很高，像我这样待久了，虽然一直对这里的饮食习惯不适宜<br>毕竟在湖北生活了20多年的人了，饮食习惯不好改变。<br>其他的你会感觉慢慢在变好，对西安的偏见也不是那么大。</p><p>说了这么多，最后一句：想故乡的云了</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础知识回顾(一)</title>
    <link href="/2019/07/29/2019-07-29-java-base-01/"/>
    <url>/2019/07/29/2019-07-29-java-base-01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-面向对象和面向过程的区别"><a href="#1-面向对象和面向过程的区别" class="headerlink" title="1. 面向对象和面向过程的区别"></a>1. 面向对象和面向过程的区别</h2><ul><li><strong>面向过程</strong> ：<strong>面向过程性能比面向对象高。</strong> 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发。但是，<strong>面向过程没有面向对象易维护、易复用、易扩展。</strong></li><li><strong>面向对象</strong> ：<strong>面向对象易维护、易复用、易扩展。</strong> 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，<strong>面向对象性能比面向过程低</strong>。</li></ul><h2 id="2-Java-语言有哪些特点"><a href="#2-Java-语言有哪些特点" class="headerlink" title="2. Java 语言有哪些特点?"></a>2. Java 语言有哪些特点?</h2><ol><li>简单易学；</li><li>面向对象（封装，继承，多态）；</li><li>平台无关性（ Java 虚拟机实现平台无关性）；</li><li>可靠性；</li><li>安全性；</li><li>支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；</li><li>支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；</li><li>编译与解释并存；</li></ol><h2 id="3-关于-JVM-JDK-和-JRE-最详细通俗的解答"><a href="#3-关于-JVM-JDK-和-JRE-最详细通俗的解答" class="headerlink" title="3. 关于 JVM JDK 和 JRE 最详细通俗的解答"></a>3. 关于 JVM JDK 和 JRE 最详细通俗的解答</h2><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>Java虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p><p><strong>什么是字节码?采用字节码的好处是什么?</strong></p><blockquote><p>在 Java 中，JVM可以理解的代码就叫做<code>字节码</code>（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java程序无须重新编译便可在多种不同操作系统的计算机上运行。</p></blockquote><p><strong>Java 程序从源代码到运行一般有下面3步：</strong></p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/Java%20%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B.png" alt="Java程序运行过程"></p><p>我们需要格外注意的是 .class-&gt;机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT 编译器，而JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。</p><blockquote><p>HotSpot采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是JIT所需要编译的部分。JVM会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK 9引入了一种新的编译模式AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了JIT预热等各方面的开销。JDK支持分层编译和AOT协作使用。但是 ，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。</p></blockquote><p><strong>总结：</strong></p><p>Java虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。</p><h3 id="JDK-和-JRE"><a href="#JDK-和-JRE" class="headerlink" title="JDK 和 JRE"></a>JDK 和 JRE</h3><p>JDK是Java Development Kit，它是功能齐全的Java SDK。它拥有JRE所拥有的一切，还有编译器（javac）和工具（如javadoc和jdb）。它能够创建和编译程序。</p><p>JRE 是 Java运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java虚拟机（JVM），Java类库，java命令和其他的一些基础构件。但是，它不能用于创建新程序。</p><p>如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装JDK了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何Java开发，仍然需要安装JDK。例如，如果要使用JSP部署Web应用程序，那么从技术上讲，您只是在应用程序服务器中运行Java程序。那你为什么需要JDK呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。</p><h2 id="4-字符型常量和字符串常量的区别"><a href="#4-字符型常量和字符串常量的区别" class="headerlink" title="4. 字符型常量和字符串常量的区别?"></a>4. 字符型常量和字符串常量的区别?</h2><ol><li>形式上: 字符常量是单引号引起的一个字符; 字符串常量是双引号引起的若干个字符</li><li>含义上: 字符常量相当于一个整型值( ASCII 值),可以参加表达式运算; 字符串常量代表一个地址值(该字符串在内存中存放位置)</li><li>占内存大小 字符常量只占2个字节; 字符串常量占若干个字节(至少一个字符结束标志) (<strong>注意： char在Java中占两个字节</strong>)</li></ol><blockquote><p>java编程思想第四版：2.2.2节 <img src="http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-15/86735519.jpg" alt="img"></p></blockquote><h2 id="5-构造器-Constructor-是否可被-override"><a href="#5-构造器-Constructor-是否可被-override" class="headerlink" title="5. 构造器 Constructor 是否可被 override?"></a>5. 构造器 Constructor 是否可被 override?</h2><p>在讲继承的时候我们就知道父类的私有属性和构造方法并不能被继承，所以 Constructor 也就不能被 override（重写）,但是可以 overload（重载）,所以你可以看到一个类中有多个构造函数的情况。</p><h2 id="6-重载和重写的区别"><a href="#6-重载和重写的区别" class="headerlink" title="6. 重载和重写的区别"></a>6. 重载和重写的区别</h2><ul><li><strong>重载：</strong> 发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同，发生在编译时。 　　</li><li><strong>重写：</strong> 发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；如果父类方法访问修饰符为 private 则子类就不能重写该方法。</li></ul><h2 id="7-Java-面向对象编程三大特性-封装-继承-多态"><a href="#7-Java-面向对象编程三大特性-封装-继承-多态" class="headerlink" title="7. Java 面向对象编程三大特性: 封装 继承 多态"></a>7. Java 面向对象编程三大特性: 封装 继承 多态</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。</p><p><strong>关于继承如下 3 点请记住：</strong></p><ol><li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，<strong>只是拥有</strong>。</li><li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。（以后介绍）。</li></ol><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p>在Java中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。</p><h2 id="8-String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的"><a href="#8-String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的" class="headerlink" title="8. String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?"></a>8. String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</h2><p><strong>可变性</strong></p><p>简单的来说：String 类中使用 final 关键字修饰字符数组来保存字符串，<code>private　final　char　value[]</code>，所以 String 对象是不可变的。而StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串<code>char[]value</code> 但是没有用 final 关键字修饰，所以这两种对象都是可变的。</p><p>StringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法也就是 AbstractStringBuilder 实现的，大家可以自行查阅源码。</p><p>AbstractStringBuilder.java</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractStringBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Appendable</span>, <span class="hljs-title">CharSequence</span> </span>&#123;<br>    <span class="hljs-built_in">char</span>[] value;<br>    <span class="hljs-built_in">int</span> <span class="hljs-keyword">count</span>;<br>    AbstractStringBuilder() &#123;<br>    &#125;<br>    AbstractStringBuilder(<span class="hljs-built_in">int</span> capacity) &#123;<br>        value = <span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span>[capacity];<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>线程安全性</strong></p><p>String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。　</p><p><strong>性能</strong></p><p>每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p><strong>对于三者使用的总结：</strong></p><ol><li>操作少量的数据: 适用String</li><li>单线程操作字符串缓冲区下操作大量数据: 适用StringBuilder</li><li>多线程操作字符串缓冲区下操作大量数据: 适用StringBuffer</li></ol><h2 id="9-自动装箱与拆箱"><a href="#9-自动装箱与拆箱" class="headerlink" title="9. 自动装箱与拆箱"></a>9. 自动装箱与拆箱</h2><ul><li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li><li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li></ul><h2 id="10-在一个静态方法内调用一个非静态成员为什么是非法的"><a href="#10-在一个静态方法内调用一个非静态成员为什么是非法的" class="headerlink" title="10. 在一个静态方法内调用一个非静态成员为什么是非法的?"></a>10. 在一个静态方法内调用一个非静态成员为什么是非法的?</h2><p>由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。</p><h2 id="11-在-Java-中定义一个不做事且没有参数的构造方法的作用"><a href="#11-在-Java-中定义一个不做事且没有参数的构造方法的作用" class="headerlink" title="11. 在 Java 中定义一个不做事且没有参数的构造方法的作用"></a>11. 在 Java 中定义一个不做事且没有参数的构造方法的作用</h2><p>Java 程序在执行子类的构造方法之前，如果没有用 <code>super()</code>来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 <code>super()</code>来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。 　</p><h2 id="12-接口和抽象类的区别是什么？"><a href="#12-接口和抽象类的区别是什么？" class="headerlink" title="12. 接口和抽象类的区别是什么？"></a>12. 接口和抽象类的区别是什么？</h2><ol><li>接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。</li><li>接口中除了static、final变量，不能有其他变量，而抽象类中则不一定。</li><li>一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过extends关键字扩展多个接口。</li><li>接口方法默认修饰符是public，抽象方法可以有public、protected和default这些修饰符（抽象方法就是为了被重写所以不能使用private关键字修饰！）。</li><li>从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。</li></ol><p>备注：在JDK8中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，接口中定义了一样的默认方法，则必须重写，不然会报错。(详见issue:<a href="https://github.com/Snailclimb/JavaGuide/issues/146">https://github.com/Snailclimb/JavaGuide/issues/146</a>)</p><h2 id="13-与-equals-重要"><a href="#13-与-equals-重要" class="headerlink" title="13. == 与 equals(重要))"></a>13. == 与 equals(重要))</h2><p><strong>==</strong> : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象(基本数据类型==比较的是值，引用数据类型==比较的是内存地址)。</p><p><strong>equals()</strong> : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><ul><li>情况1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。</li><li>情况2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</li></ul><p><strong>举个例子：</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test1</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">String</span> a = <span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">String</span></span>(<span class="hljs-string">&quot;ab&quot;</span>); <span class="hljs-comment">// a 为一个引用</span><br>        <span class="hljs-keyword">String</span> b = <span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">String</span></span>(<span class="hljs-string">&quot;ab&quot;</span>); <span class="hljs-comment">// b为另一个引用,对象的内容一样</span><br>        <span class="hljs-keyword">String</span> aa = <span class="hljs-string">&quot;ab&quot;</span>; <span class="hljs-comment">// 放在常量池中</span><br>        <span class="hljs-keyword">String</span> bb = <span class="hljs-string">&quot;ab&quot;</span>; <span class="hljs-comment">// 从常量池中查找</span><br>        <span class="hljs-keyword">if</span> (aa == bb) <span class="hljs-comment">// true</span><br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;aa==bb&quot;</span>);<br>        <span class="hljs-keyword">if</span> (a == b) <span class="hljs-comment">// false，非同一对象</span><br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;a==b&quot;</span>);<br>        <span class="hljs-keyword">if</span> (a.<span class="hljs-built_in">equals</span>(b)) <span class="hljs-comment">// true</span><br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;aEQb&quot;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">42</span> == <span class="hljs-number">42.0</span>) &#123; <span class="hljs-comment">// true</span><br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;true&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li>String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值。</li><li>当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。</li></ul><h2 id="14-hashCode-与-equals-重要"><a href="#14-hashCode-与-equals-重要" class="headerlink" title="14. hashCode 与 equals (重要)"></a>14. hashCode 与 equals (重要)</h2><p>面试官可能会问你：“你重写过 hashcode 和 equals 么，为什么重写equals时必须重写hashCode方法？”</p><h3 id="hashCode（）介绍"><a href="#hashCode（）介绍" class="headerlink" title="hashCode（）介绍"></a>hashCode（）介绍</h3><p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode() 函数。</p><p>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</p><h3 id="为什么要有-hashCode"><a href="#为什么要有-hashCode" class="headerlink" title="为什么要有 hashCode"></a>为什么要有 hashCode</h3><p><strong>我们先以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode：</strong> 当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 <code>equals（）</code>方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的Java启蒙书《Head first java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。</p><p>通过我们可以看出：<code>hashCode()</code> 的作用就是<strong>获取哈希码</strong>，也称为散列码；它实际上是返回一个int整数。这个<strong>哈希码的作用</strong>是确定该对象在哈希表中的索引位置。<strong>hashCode()在散列表中才有用，在其它情况下没用。</strong>在散列表中hashCode() 的作用是获取对象的散列码，进而确定该对象在散列表中的位置。</p><h3 id="hashCode（）与equals（）的相关规定"><a href="#hashCode（）与equals（）的相关规定" class="headerlink" title="hashCode（）与equals（）的相关规定"></a>hashCode（）与equals（）的相关规定</h3><ol><li>如果两个对象相等，则hashcode一定也是相同的</li><li>两个对象相等,对两个对象分别调用equals方法都返回true</li><li>两个对象有相同的hashcode值，它们也不一定是相等的</li><li><strong>因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖</strong></li><li>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li></ol><p>推荐阅读：<a href="https://www.cnblogs.com/skywang12345/p/3324958.html">Java hashCode() 和 equals()的若干问题解答</a></p><h2 id="15-为什么Java中只有值传递？"><a href="#15-为什么Java中只有值传递？" class="headerlink" title="15. 为什么Java中只有值传递？"></a>15. 为什么Java中只有值传递？</h2><p>首先回顾一下在程序设计语言中有关将参数传递给方法（或函数）的一些专业术语。<strong>按值调用(call by value)表示方法接收的是调用者提供的值，而按引用调用（call by reference)表示方法接收的是调用者提供的变量地址。一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。</strong> 它用来描述各种程序设计语言（不只是Java)中方法参数传递方式。</p><p><strong>Java程序设计语言总是采用按值调用。也就是说，方法得到的是所有参数值的一个拷贝，也就是说，方法不能修改传递给它的任何参数变量的内容。</strong></p><p><strong>下面通过 3 个例子来给大家说明</strong></p><h3 id="example-1"><a href="#example-1" class="headerlink" title="example 1"></a>example 1</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>    <span class="hljs-type">int</span> num1 = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> num2 = <span class="hljs-number">20</span>;<br><br>    swap(num1, num2);<br><br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;num1 = &quot; + num1);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;num2 = &quot; + num2);<br>&#125;<br><br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> swap(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-keyword">temp</span> = a;<br>    a = b;<br>    b = <span class="hljs-keyword">temp</span>;<br><br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;a = &quot; + a);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;b = &quot; + b);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = <span class="hljs-number">20</span><br><span class="hljs-attr">b</span> = <span class="hljs-number">10</span><br><span class="hljs-attr">num1</span> = <span class="hljs-number">10</span><br><span class="hljs-attr">num2</span> = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p><strong>解析：</strong></p><p><a href="https://camo.githubusercontent.com/ab46506b1a5ce09a516051c35f981e55255337f9/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d392d32372f32323139313334382e6a7067"><img src="https://camo.githubusercontent.com/ab46506b1a5ce09a516051c35f981e55255337f9/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d392d32372f32323139313334382e6a7067" alt="example 1 "></a></p><p>在swap方法中，a、b的值进行交换，并不会影响到 num1、num2。因为，a、b中的值，只是从 num1、num2 的复制过来的。也就是说，a、b相当于num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。</p><p><strong>通过上面例子，我们已经知道了一个方法不能修改一个基本数据类型的参数，而对象引用作为参数就不一样，请看 example2.</strong></p><h3 id="example-2"><a href="#example-2" class="headerlink" title="example 2"></a>example 2</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span>[] arr = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br>System.out.<span class="hljs-built_in">println</span>(arr[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">change</span>(arr);<br>System.out.<span class="hljs-built_in">println</span>(arr[<span class="hljs-number">0</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br><span class="hljs-comment">// 将数组的第一个元素变为0</span><br>array[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">1<br>0<br></code></pre></td></tr></table></figure><p><strong>解析：</strong></p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/07/4012894370.jpg" alt="example02.jpg"></p><p>array 被初始化 arr 的拷贝也就是一个对象的引用，也就是说 array 和 arr 指向的时同一个数组对象。 因此，外部对引用对象的改变会反映到所对应的对象上。</p><p><strong>通过 example2 我们已经看到，实现一个改变对象参数状态的方法并不是一件难事。理由很简单，方法得到的是对象引用的拷贝，对象引用及其他的拷贝同时引用同一个对象。</strong></p><p><strong>很多程序设计语言（特别是，C++和Pascal)提供了两种参数传递的方式：值调用和引用调用。有些程序员（甚至本书的作者）认为Java程序设计语言对对象采用的是引用调用，实际上，这种理解是不对的。由于这种误解具有一定的普遍性，所以下面给出一个反例来详细地阐述一下这个问题。</strong></p><h3 id="example-3"><a href="#example-3" class="headerlink" title="example 3"></a>example 3</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test &#123;<br><br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>// TODO Auto-<span class="hljs-keyword">generated</span> <span class="hljs-keyword">method</span> stub<br>Student s1 = <span class="hljs-built_in">new</span> Student(&quot;小张&quot;);<br>Student s2 = <span class="hljs-built_in">new</span> Student(&quot;小李&quot;);<br>Test.swap(s1, s2);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;s1:&quot; + s1.getName());<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;s2:&quot; + s2.getName());<br>&#125;<br><br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> swap(Student x, Student y) &#123;<br>Student <span class="hljs-keyword">temp</span> = x;<br>x = y;<br>y = <span class="hljs-keyword">temp</span>;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;x:&quot; + x.getName());<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;y:&quot; + y.getName());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">x:</span>小李<br><span class="hljs-symbol">y:</span>小张<br><span class="hljs-symbol">s1:</span>小张<br><span class="hljs-symbol">s2:</span>小李<br></code></pre></td></tr></table></figure><p><strong>解析：</strong></p><p>交换之前：</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/07/1702368504.jpg" alt="example03.jpg"></p><p>交换之后：</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/07/2621135131.jpg" alt="example04.jpg"></p><p>通过上面两张图可以很清晰的看出： <strong>方法并没有改变存储在变量 s1 和 s2 中的对象引用。swap方法的参数x和y被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Java程序设计语言对对象采用的不是引用调用，实际上，对象引用是按 值传递的。</p><p>下面再总结一下Java中方法参数的使用情况：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><hr><p>参考：<a href="https://github.com/niaobulashi/JavaGuide">https://github.com/niaobulashi/JavaGuide</a></p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot2(十五)：Shiro记住我rememberMe、验证码Kaptcha</title>
    <link href="/2019/07/25/2019-07-25-rememberme-kaptcha/"/>
    <url>/2019/07/25/2019-07-25-rememberme-kaptcha/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>接着上次学习的《Spring Boot2(十二)：手摸手教你搭建Shiro安全框架》，实现了Shiro的认证和授权。今天继续在这个基础上学习Shiro实现功能记住我rememberMe，以及登录时验证码Kaptcha。</p><p>Remember Me记住我：用户的登录状态会不会因为浏览器的关闭而失效，直到Cookie失效。关闭浏览器后，再次访问登录后的页面可以不用登录。因为用Cookie实现，故只在同一浏览器中有效。</p><p>Kaptcha验证码：是谷歌开源的验证码插件，实现登录的验证码验证拦截。</p><h2 id="一、记住我rememberMe"><a href="#一、记住我rememberMe" class="headerlink" title="一、记住我rememberMe"></a>一、记住我rememberMe</h2><p>用户的登录状态会不会因为浏览器的关闭而失效，直到Cookie失效。关闭浏览器后，再次访问登录后的页面可以不用登录。因为用Cookie实现，故只在同一浏览器中有效。</p><h3 id="修改ShiroConfig"><a href="#修改ShiroConfig" class="headerlink" title="修改ShiroConfig"></a>修改ShiroConfig</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 路径过滤规则</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br>@Bean<br><span class="hljs-function"><span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-title">shiroFilter</span><span class="hljs-params">(SecurityManager securityManager)</span> </span>&#123;<br>ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ShiroFilterFactoryBean</span>();<br>shiroFilterFactoryBean.<span class="hljs-built_in">setSecurityManager</span>(securityManager);<br><span class="hljs-comment">// 如果不设置默认会自动寻找Web工程根目录下的&quot;/login.jsp&quot;页面</span><br>shiroFilterFactoryBean.<span class="hljs-built_in">setLoginUrl</span>(<span class="hljs-string">&quot;/login&quot;</span>);<br>shiroFilterFactoryBean.<span class="hljs-built_in">setSuccessUrl</span>(<span class="hljs-string">&quot;/index&quot;</span>);<br><span class="hljs-comment">// 拦截器</span><br>LinkedHashMap&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt; map = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();<br><span class="hljs-comment">// 配置不会被拦截的链接 顺序判断</span><br><span class="hljs-comment">// 对静态资源设置匿名访问</span><br>map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;/static/**&quot;</span>, <span class="hljs-string">&quot;anon&quot;</span>);<br>map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;/css/**&quot;</span>, <span class="hljs-string">&quot;anon&quot;</span>);<br>map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;/js/**&quot;</span>, <span class="hljs-string">&quot;anon&quot;</span>);<br><br><span class="hljs-comment">// 过滤链定义，从上向下顺序执行，一般将/**放在最为下边</span><br><span class="hljs-comment">// 进行身份认证后才能访问</span><br><span class="hljs-comment">// authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问</span><br><span class="hljs-comment">// user指的是用户认证通过或者配置了Remember Me记住用户登录状态后可访问</span><br>map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;/**&quot;</span>, <span class="hljs-string">&quot;user&quot;</span>);<br>shiroFilterFactoryBean.<span class="hljs-built_in">setFilterChainDefinitionMap</span>(map);<br><span class="hljs-keyword">return</span> shiroFilterFactoryBean;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为对登录页面做了一些样式，新增了静态资源文件static，这时候遇到了坑，页面引用的<code>js</code>和<code>css</code>都无效了，然后发现时因为被拦截了，我们需要在Shiro的拦截器中允许对静态资源的匿名<code>anon</code>访问。</p><p>注意到将<code>ShiroFilterFactoryBean</code>的<code>map.put(&quot;/**&quot;, &quot;authc&quot;);</code>更改为<code>map.put(&quot;/**&quot;, &quot;user&quot;);</code>user是指用户认证通过或配置了RememberMe记住用户登录状态后可访问。</p><p>解决过程查阅了一些资料，不光光只对<code>css</code>和<code>js</code>的放开，还需要对<code>static</code>也放开</p><p>对静态资源的拦截相关问题可以参照这里了解学习一下：<a href="https://412887952-qq-com.iteye.com/blog/2392741">Spring Boot Shiro无法访问JS/CSS/IMG+自定义Filter无法访问完美方案</a></p><p>回来继续，调用SimpleCookie，配置Cookie的基本属性：名称和过期时间。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * cookie对象</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br>public SimpleCookie rememberMeCookie() &#123;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 设置cookie名称，对应login.html页面的<span class="hljs-operator">&lt;</span>input type<span class="hljs-operator">=</span>&quot;checkbox&quot; name<span class="hljs-operator">=</span>&quot;rememberMe&quot;<span class="hljs-operator">/</span><span class="hljs-operator">&gt;</span><br>SimpleCookie cookie <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> SimpleCookie(&quot;rememberMe&quot;);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 设置cookie的过期时间，单位为秒，这里为一天<br>cookie.setMaxAge(<span class="hljs-number">86400</span>);<br><span class="hljs-keyword">return</span> cookie;<br>&#125;<br></code></pre></td></tr></table></figure><p>SimleCookie参数中的名称为页面的name标签属性名称。</p><p>实现了Cookie对象属性配置，还需要通过<code>CookieRememberMeManager</code>进行管理起来。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * cookie管理对象</span><br><span class="hljs-comment"> * rememberMeManager()方法是生成rememberMe管理器，而且要将这个rememberMe管理器设置到securityManager中</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br>public CookieRememberMeManager remember<span class="hljs-constructor">MeManager()</span> &#123;<br>CookieRememberMeManager cookieRememberMeManager = <span class="hljs-keyword">new</span> <span class="hljs-constructor">CookieRememberMeManager()</span>;<br>cookieRememberMeManager.set<span class="hljs-constructor">Cookie(<span class="hljs-params">rememberMeCookie</span>()</span>);<br><span class="hljs-comment">// rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度(128 256 512 位)</span><br>cookieRememberMeManager.set<span class="hljs-constructor">CipherKey(Base64.<span class="hljs-params">decode</span>(<span class="hljs-string">&quot;3AvVhmFLUs0KTA3Kprsdag==&quot;</span>)</span>);<br>return cookieRememberMeManager;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来将cookie管理对象设置到<code>SecurityManager</code>中：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Bean<br>public SecurityManager security<span class="hljs-constructor">Manager()</span> &#123;<br>DefaultWebSecurityManager securityManager = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DefaultWebSecurityManager()</span>;<br><span class="hljs-comment">// 设置realm</span><br>securityManager.set<span class="hljs-constructor">Realm(<span class="hljs-params">authRealm</span>()</span>);<br><span class="hljs-comment">// 用户授权/认证信息Cache, 采用EhC//注入记住我管理器</span><br>securityManager.set<span class="hljs-constructor">RememberMeManager(<span class="hljs-params">rememberMeManager</span>()</span>);<br>return securityManager;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="加密处理"><a href="#加密处理" class="headerlink" title="加密处理"></a>加密处理</h3><p>《Spring Boot2(十二)：手摸手教你搭建Shiro安全框架》这个项目中用的明文，这里我们升个级，使用MD5加密</p><p>新建MD5加密工具类。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MD5Utils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-keyword">String</span> SALT = <span class="hljs-string">&quot;niaobulashi&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-keyword">String</span> ALGORITH_NAME = <span class="hljs-string">&quot;md5&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final int HASH_ITERATIONS = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> encrypt(<span class="hljs-keyword">String</span> pwd) &#123;<br>        <span class="hljs-keyword">String</span> <span class="hljs-keyword">new</span><span class="hljs-type">Password</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">SimpleHash</span>(ALGORITH_NAME, pwd, ByteSource.Util.bytes(SALT), HASH_ITERATIONS).toHex();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">Password</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> encrypt(<span class="hljs-keyword">String</span> username, <span class="hljs-keyword">String</span> pwd) &#123;<br>        <span class="hljs-keyword">String</span> <span class="hljs-keyword">new</span><span class="hljs-type">Password</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">SimpleHash</span>(ALGORITH_NAME, pwd, ByteSource.Util.bytes(username + SALT),<br>                HASH_ITERATIONS).toHex();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">Password</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;<br>        System.out.println(<span class="hljs-string">&quot;MD5加密后的密文为：&quot;</span> + MD5Utils.encrypt(<span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>SALT</code>是加密的盐，可自行定义。</p><p>main方法中，根据登录名和密码明文，输出最终加密的密文，将输出内容粘贴到我们的数据库中，待后续登录时使用。</p><h3 id="新增登录页面和主页面"><a href="#新增登录页面和主页面" class="headerlink" title="新增登录页面和主页面"></a>新增登录页面和主页面</h3><p>登录页login.html</p><p>添加Remember Me checkbox</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/static/css/login.css&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/static/js/jquery-1.11.1.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-page&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;required&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;required&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rememberMe&quot;</span>/&gt;</span>记住我<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;login()&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:inline</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span><span class="javascript"><span class="hljs-keyword">var</span> ctx = [[@&#123;/&#125;]];</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:inline</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> account = $(<span class="hljs-string">&quot;input[name=&#x27;account&#x27;]&quot;</span>).val();</span><br><span class="javascript">        <span class="hljs-keyword">var</span> password = $(<span class="hljs-string">&quot;input[name=&#x27;password&#x27;]&quot;</span>).val();</span><br><span class="javascript">        <span class="hljs-keyword">var</span> rememberMe = $(<span class="hljs-string">&quot;input[name=&#x27;rememberMe&#x27;]&quot;</span>).is(<span class="hljs-string">&#x27;:checked&#x27;</span>);</span><br><span class="javascript">        $.ajax(&#123;</span><br><span class="javascript">            type: <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="javascript">            url: ctx + <span class="hljs-string">&quot;login&quot;</span>,</span><br>            data: &#123;<br><span class="javascript">                <span class="hljs-string">&quot;account&quot;</span>: account,</span><br><span class="javascript">                <span class="hljs-string">&quot;password&quot;</span>: password,</span><br><span class="javascript">                <span class="hljs-string">&quot;rememberMe&quot;</span>: rememberMe</span><br>            &#125;,<br><span class="javascript">            success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">r</span>) </span>&#123;</span><br>                if (r.code == 100) &#123;<br><span class="javascript">                    location.href = ctx + <span class="hljs-string">&#x27;index&#x27;</span>;</span><br><span class="javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br>                    alert(r.message);<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>静态资源js和css可以在源码中查看</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/07/2309019532.png" alt="登录页面"></p><p>首页index.html</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>你好！[[$</span><span class="hljs-template-variable">&#123;user.getUsername()&#125;</span><span class="xml">]]<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">logout</span>&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>注销<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h3><p>在原来的基础上，新增参数rememberMe，同时对用户名和明文密码进行MD5加密处理获得密文。</p><p>登录接口</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 登录操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> account</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> password</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> rememberMe</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">&quot;/login&quot;</span>)<br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-function">ResponseCode <span class="hljs-title">login</span><span class="hljs-params">(String account, String password, Boolean rememberMe)</span> </span>&#123;<br>logger.info(<span class="hljs-string">&quot;登录请求-start&quot;</span>);<br>password = MD5Utils.encrypt(account, password);<br>Subject userSubject = SecurityUtils.getSubject();<br>UsernamePasswordToken token = <span class="hljs-keyword">new</span> UsernamePasswordToken(account, password, rememberMe);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 登录验证</span><br>userSubject.login(token);<br><span class="hljs-function"><span class="hljs-keyword">return</span> ResponseCode.<span class="hljs-title">success</span><span class="hljs-params">()</span></span>;<br>&#125; <span class="hljs-keyword">catch</span> (UnknownAccountException e) &#123;<br><span class="hljs-function"><span class="hljs-keyword">return</span> ResponseCode.<span class="hljs-title">error</span><span class="hljs-params">(StatusEnums.ACCOUNT_UNKNOWN)</span></span>;<br>&#125; <span class="hljs-keyword">catch</span> (DisabledAccountException e) &#123;<br><span class="hljs-function"><span class="hljs-keyword">return</span> ResponseCode.<span class="hljs-title">error</span><span class="hljs-params">(StatusEnums.ACCOUNT_IS_DISABLED)</span></span>;<br>&#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e) &#123;<br><span class="hljs-function"><span class="hljs-keyword">return</span> ResponseCode.<span class="hljs-title">error</span><span class="hljs-params">(StatusEnums.INCORRECT_CREDENTIALS)</span></span>;<br>&#125; <span class="hljs-keyword">catch</span> (AuthenticationException e) &#123;<br><span class="hljs-function"><span class="hljs-keyword">return</span> ResponseCode.<span class="hljs-title">error</span><span class="hljs-params">(StatusEnums.AUTH_ERROR)</span></span>;<br>&#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>e.printStackTrace();<br><span class="hljs-function"><span class="hljs-keyword">return</span> ResponseCode.<span class="hljs-title">error</span><span class="hljs-params">(StatusEnums.SYSTEM_ERROR)</span></span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注销接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 登出</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/logout&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">logout</span>(<span class="hljs-params"></span>)</span> &#123;<br>getSubject().logout();<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动项目，进行测试可以看到效果如下：</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/07/2305576115.gif" alt="登录操作"></p><h2 id="二、验证码Kaptcha"><a href="#二、验证码Kaptcha" class="headerlink" title="二、验证码Kaptcha"></a>二、验证码Kaptcha</h2><p>kaptcha 是一个非常实用的验证码生成工具。有了它，你可以生成各种样式的验证码，因为它是可配置的。kaptcha工作的原理是调用 com.google.code.kaptcha.servlet.KaptchaServlet，生成一个图片。同时将生成的验证码字符串放到 HttpSession中。</p><p>Kaptcha官网：<a href="https://code.google.com/archive/p/kaptcha/">https://code.google.com/archive/p/kaptcha/</a></p><p>使用kaptcha可以方便的配置：</p><ul><li>验证码的字体</li><li>验证码字体的大小</li><li>验证码字体的字体颜色</li><li>验证码内容的范围(数字，字母，中文汉字！)</li><li>验证码图片的大小，边框，边框粗细，边框颜色</li><li>验证码的干扰线(可以自己继承com.google.code.kaptcha.NoiseProducer写一个自定义的干扰线)</li><li>验证码的样式(鱼眼样式、3D、普通模糊……当然也可以继承com.google.code.kaptcha.GimpyEngine自定义样式)</li></ul><h3 id="kaptcha配置详解"><a href="#kaptcha配置详解" class="headerlink" title="kaptcha配置详解"></a>kaptcha配置详解</h3><table><thead><tr><th>kaptcha对象属性</th><th>作用</th><th>默认值</th></tr></thead><tbody><tr><td>kaptcha.border</td><td>是否有边框</td><td>默认为true</td></tr><tr><td>kaptcha.border.color</td><td>边框颜色</td><td>默认为Color.BLACK</td></tr><tr><td>kaptcha.border.thickness</td><td>边框粗细度</td><td>默认为1</td></tr><tr><td>kaptcha.producer.impl</td><td>验证码生成器</td><td>默认为DefaultKaptcha</td></tr><tr><td>kaptcha.textproducer.impl</td><td>验证码文本生成器</td><td>默认为DefaultTextCreator</td></tr><tr><td>kaptcha.textproducer.char.string</td><td>验证码文本字符内容范围</td><td>默认为abcde2345678gfynmnpwx</td></tr><tr><td>kaptcha.textproducer.char.length</td><td>验证码文本字符长度</td><td>默认为5</td></tr><tr><td>kaptcha.textproducer.font.names</td><td>验证码文本字体样式</td><td>宋体,楷体,微软雅黑，默认为new Font(“Arial”, 1, fontSize), new Font(“Courier”, 1, fontSize)</td></tr><tr><td>kaptcha.textproducer.font.size</td><td>验证码文本字符大小</td><td>默认为40</td></tr><tr><td>kaptcha.textproducer.font.color</td><td>验证码文本字符颜色</td><td>默认为Color.BLACK</td></tr><tr><td>kaptcha.textproducer.char.space</td><td>验证码文本字符间距</td><td>默认为2</td></tr><tr><td>kaptcha.noise.impl</td><td>验证码噪点生成对象</td><td>默认为DefaultNoise</td></tr><tr><td>kaptcha.noise.color</td><td>验证码噪点颜色</td><td>默认为Color.BLACK</td></tr><tr><td>kaptcha.obscurificator.impl</td><td>验证码样式引擎</td><td>默认为WaterRipple</td></tr><tr><td>kaptcha.word.impl</td><td>验证码文本字符渲染</td><td>默认为DefaultWordRenderer</td></tr><tr><td>kaptcha.background.impl</td><td>验证码背景生成器</td><td>默认为DefaultBackground</td></tr><tr><td>kaptcha.background.clear.from</td><td>验证码背景颜色渐进</td><td>默认为Color.LIGHT_GRAY</td></tr><tr><td>kaptcha.background.clear.to</td><td>验证码背景颜色渐进</td><td>默认为Color.WHITE</td></tr><tr><td>kaptcha.image.width</td><td>验证码图片宽度</td><td>默认为200</td></tr><tr><td>kaptcha.image.height</td><td>验证码图片高度</td><td>默认为50</td></tr></tbody></table><h3 id="添加maven依赖"><a href="#添加maven依赖" class="headerlink" title="添加maven依赖"></a>添加maven依赖</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&lt;!--验证码--&gt;</span><br><span class="hljs-string">&lt;dependency&gt;</span><br><span class="hljs-string">&lt;groupId&gt;com.github.penggle&lt;/groupId&gt;</span><br><span class="hljs-string">&lt;artifactId&gt;kaptcha&lt;/artifactId&gt;</span><br><span class="hljs-string">&lt;version&gt;2.3.2&lt;/version&gt;</span><br><span class="hljs-string">&lt;/dependency&gt;</span><br></code></pre></td></tr></table></figure><h3 id="新增验证码图片样式配置器"><a href="#新增验证码图片样式配置器" class="headerlink" title="新增验证码图片样式配置器"></a>新增验证码图片样式配置器</h3><p>具体配置可以参考上面的<strong>kaptche配置详情</strong>，针对不同的常见配置。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Configuration<br>public <span class="hljs-keyword">class</span> KaptchaConfig &#123;<br><br>    @<span class="hljs-constructor">Bean(<span class="hljs-params">name</span>=<span class="hljs-string">&quot;captchaProducer&quot;</span>)</span><br>    public DefaultKaptcha get<span class="hljs-constructor">KaptchaBean()</span>&#123;<br>        DefaultKaptcha defaultKaptcha=<span class="hljs-keyword">new</span> <span class="hljs-constructor">DefaultKaptcha()</span>;<br>        Properties properties=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Properties()</span>;<br>        <span class="hljs-comment">//验证码字符范围</span><br>        properties.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;kaptcha.textproducer.char.string&quot;</span>, <span class="hljs-string">&quot;23456789&quot;</span>)</span>;<br>        <span class="hljs-comment">//图片边框颜色</span><br>        properties.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;kaptcha.border.color&quot;</span>, <span class="hljs-string">&quot;245,248,249&quot;</span>)</span>;<br>        <span class="hljs-comment">//字体颜色</span><br>        properties.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;kaptcha.textproducer.font.color&quot;</span>, <span class="hljs-string">&quot;black&quot;</span>)</span>;<br>        <span class="hljs-comment">//文字间隔</span><br>        properties.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;kaptcha.textproducer.char.space&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)</span>;<br>        <span class="hljs-comment">//图片宽度</span><br>        properties.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;kaptcha.image.width&quot;</span>, <span class="hljs-string">&quot;100&quot;</span>)</span>;<br>        <span class="hljs-comment">//图片高度</span><br>        properties.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;kaptcha.image.height&quot;</span>, <span class="hljs-string">&quot;35&quot;</span>)</span>;<br>        <span class="hljs-comment">//字体大小</span><br>        properties.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;kaptcha.textproducer.font.size&quot;</span>, <span class="hljs-string">&quot;30&quot;</span>)</span>;<br>        <span class="hljs-comment">//session的key</span><br>        <span class="hljs-comment">//properties.setProperty(&quot;kaptcha.session.key&quot;, &quot;code&quot;);</span><br>        <span class="hljs-comment">//长度</span><br>        properties.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;kaptcha.textproducer.char.length&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>)</span>;<br>        <span class="hljs-comment">//字体</span><br>        properties.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;kaptcha.textproducer.font.names&quot;</span>, <span class="hljs-string">&quot;宋体,楷体,微软雅黑&quot;</span>)</span>;<br>        Config config=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Config(<span class="hljs-params">properties</span>)</span>;<br>        defaultKaptcha.set<span class="hljs-constructor">Config(<span class="hljs-params">config</span>)</span>;<br>        return defaultKaptcha;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="新增图片验证码Controller层"><a href="#新增图片验证码Controller层" class="headerlink" title="新增图片验证码Controller层"></a>新增图片验证码Controller层</h3><p>是一个创建文件图片流的过程，使用ServletOutPutStream输出最后的图片。</p><p>开头声明的<code>@Resource(name = &quot;captchaProducer&quot;)</code>，是验证码图片样式配置器启动时配置的Bean：<code>captchaProducer</code>。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Controller<br>@<span class="hljs-constructor">RequestMapping(<span class="hljs-string">&quot;/captcha&quot;</span>)</span><br>public <span class="hljs-keyword">class</span> KaptchaController &#123;<br><br>    <span class="hljs-keyword">private</span> static final Logger logger = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LoggerFactory</span>.</span></span>get<span class="hljs-constructor">Logger(KaptchaController.<span class="hljs-params">class</span>)</span>;<br><br>    @<span class="hljs-constructor">Resource(<span class="hljs-params">name</span> = <span class="hljs-string">&quot;captchaProducer&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> Producer captchaProducer;<br><br>    @<span class="hljs-constructor">GetMapping(<span class="hljs-string">&quot;/captchaImage&quot;</span>)</span><br>    public ModelAndView get<span class="hljs-constructor">KaptchaImage(HttpServletRequest <span class="hljs-params">request</span>, HttpServletResponse <span class="hljs-params">response</span>)</span> throws Exception &#123;<br>        ServletOutputStream out = response.get<span class="hljs-constructor">OutputStream()</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            HttpSession session = request.get<span class="hljs-constructor">Session()</span>;<br>            response.set<span class="hljs-constructor">DateHeader(<span class="hljs-string">&quot;Expires&quot;</span>, 0)</span>;<br>            <span class="hljs-comment">// Set standard HTTP/1.1 no-cache headers.</span><br>            response.set<span class="hljs-constructor">Header(<span class="hljs-string">&quot;Cache-Control&quot;</span>, <span class="hljs-string">&quot;no-store, no-cache, must-revalidate&quot;</span>)</span>;<br>            <span class="hljs-comment">// Set IE extended HTTP/1.1 no-cache headers (use addHeader).</span><br>            response.add<span class="hljs-constructor">Header(<span class="hljs-string">&quot;Cache-Control&quot;</span>, <span class="hljs-string">&quot;post-check=0, pre-check=0&quot;</span>)</span>;<br>            <span class="hljs-comment">// Set standard HTTP/1.0 no-cache header.</span><br>            response.set<span class="hljs-constructor">Header(<span class="hljs-string">&quot;Pragma&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>)</span>;<br>            <span class="hljs-comment">// return a jpeg</span><br>            response.set<span class="hljs-constructor">ContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>)</span>;<br>            <span class="hljs-comment">// create the text for the image</span><br>            String capText = captchaProducer.create<span class="hljs-constructor">Text()</span>;<br>            <span class="hljs-comment">//将验证码存到session</span><br>            session.set<span class="hljs-constructor">Attribute(Constants.KAPTCHA_SESSION_KEY, <span class="hljs-params">capText</span>)</span>;<br>            logger.info(capText);<br>            <span class="hljs-comment">// 创建一张文本图片</span><br>            BufferedImage bi = captchaProducer.create<span class="hljs-constructor">Image(<span class="hljs-params">capText</span>)</span>;<br>            <span class="hljs-comment">// 响应</span><br>            out = response.get<span class="hljs-constructor">OutputStream()</span>;<br>            <span class="hljs-comment">// 写入数据</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ImageIO</span>.</span></span>write(bi, <span class="hljs-string">&quot;jpg&quot;</span>, out);<br><br>            out.flush<span class="hljs-literal">()</span>;<br>        &#125; catch (Exception e) &#123;<br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br>        &#125; finally &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (out != null) &#123;<br>                    out.close<span class="hljs-literal">()</span>;<br>                &#125;<br>            &#125;<br>            catch (IOException e) &#123;<br>                e.print<span class="hljs-constructor">StackTrace()</span>;<br>            &#125;<br>        &#125;<br>        return null;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意最后都需要将流关闭<code>out.close()</code></p><h3 id="放开图片验证码的拦截"><a href="#放开图片验证码的拦截" class="headerlink" title="放开图片验证码的拦截"></a>放开图片验证码的拦截</h3><p>重启会发现，图片验证码的接口请求无法访问，还是跳转到了localhost:8081/login登录页面</p><p>因为Shiro配置的拦截器没有放开，需要再<code>ShiroConfig</code>中允许匿名访问改请求资源</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;/captcha/captchaImage**&quot;</span>, <span class="hljs-string">&quot;anon&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="登录页面添加图片验证码"><a href="#登录页面添加图片验证码" class="headerlink" title="登录页面添加图片验证码"></a>登录页面添加图片验证码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-page&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;required&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;required&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>验证码<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;validateCode&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;validateCode&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;validateCode&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;required&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0);&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/captcha/captchaImage&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;this.src=&#x27;/captcha/captchaImage?&#x27;+Math.random()&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rememberMe&quot;</span>/&gt;</span>记住我<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;login()&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面<code>div</code>为body的全部部分</p><p>我在请求<code>/captcha/captchaImage</code>后面添加随机值<code>Math.random()</code>。是因为客户浏览器会缓存URL相同的资源，故使用随机数来重新请求。这和前端上线时，请求后缀都会变更一个版本号一样，不需要让客户手动刷新浏览器就可以获取最新资源一样。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/07/2338195235.gif" alt="验证码请求"></p><h3 id="修改登录请求接口"><a href="#修改登录请求接口" class="headerlink" title="修改登录请求接口"></a>修改登录请求接口</h3><p>主要是验证后台生成的验证码，与前台输入的验证码进行比较，验证是否相同</p><p>这里只粘贴出验证码验证的逻辑，源码在文章最后。</p><p>可以看出<code>validateCode</code>是前端请求过来的参数，先校验是否为空。</p><p>然后从session中获取后台生成的验证码。</p><p>最后通过比较前端输入的验证码和后台生成的是否一致。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//1、检验验证码</span><br><span class="hljs-keyword">if</span>(validateCode<span class="hljs-operator"> == </span>null<span class="hljs-operator"> || </span>validateCode<span class="hljs-operator"> == </span><span class="hljs-string">&quot;&quot;</span>)&#123;<br>return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseCode</span>.</span></span>error(StatusEnums.PARAM_NULL);<br>&#125;<br>Session session = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityUtils</span>.</span></span>get<span class="hljs-constructor">Subject()</span>.get<span class="hljs-constructor">Session()</span>;<br><span class="hljs-comment">//转化成小写字母</span><br>validateCode = validateCode.<span class="hljs-keyword">to</span><span class="hljs-constructor">LowerCase()</span>;<br>String v = (String) session.get<span class="hljs-constructor">Attribute(Constants.KAPTCHA_SESSION_KEY)</span>;<br><span class="hljs-comment">//还可以读取一次后把验证码清空，这样每次登录都必须获取验证码</span><br><span class="hljs-comment">//session.removeAttribute(&quot;_come&quot;);</span><br><span class="hljs-keyword">if</span>(!validateCode.equals(v))&#123;<br>return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseCode</span>.</span></span>error(StatusEnums.VALIDATECODE_ERROR);<br>&#125;<br></code></pre></td></tr></table></figure><p>下图是登录校验验证码的debug过程。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/07/2915987549.gif" alt="kaptcha验证码校验"></p><h2 id="三、源码"><a href="#三、源码" class="headerlink" title="三、源码"></a>三、源码</h2><p>源码地址：<a href="https://github.com/niaobulashi/spring-boot-learning/tree/master/spring-boot-23-shiro-remember"><strong>spring-boot-23-shiro-remember</strong></a><br>欢迎star、fork，给作者一些鼓励</p><hr><p>菜鸟也要成为架构师，一起努力</p><p>欢迎关注我微信公众号【鸟不拉诗】</p><p>谢谢，一起学习，共同进步，成为优秀的人。</p><p><img src="https://niaobulashi.com/usr/uploads/2019/07/2427016822.png" alt="微信公众号：鸟不拉诗"></p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot2(十四)：单文件上传/下载，文件批量上传</title>
    <link href="/2019/07/20/2019-07-20-fileupload/"/>
    <url>/2019/07/20/2019-07-20-fileupload/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>文件上传和下载在项目中经常用到，这里主要学习SpringBoot完成单个文件上传/下载，批量文件上传的场景应用。结合mysql数据库、jpa数据层操作、thymeleaf页面模板。</p><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><h3 id="添加maven依赖"><a href="#添加maven依赖" class="headerlink" title="添加maven依赖"></a>添加maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--springboot核心--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--springboot测试--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--thymeleaf前端模板--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--springboot-web--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--springboot热部署--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--jpa--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--lombok--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置文件application-yml"><a href="#配置文件application-yml" class="headerlink" title="配置文件application.yml"></a>配置文件application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br>  <span class="hljs-attr">tomcat:</span><br>    <span class="hljs-attr">max-swallow-size:</span> <span class="hljs-string">1MB</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">multipart:</span><br>      <span class="hljs-comment"># 默认支持文件上传</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 最大支持文件大小</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">50MB</span><br>      <span class="hljs-comment"># 最大支持请求大小</span><br>      <span class="hljs-attr">max-request-size:</span> <span class="hljs-string">100MB</span><br>      <span class="hljs-comment"># 文件支持写入磁盘</span><br>      <span class="hljs-attr">file-size-threshold:</span> <span class="hljs-number">0</span><br>      <span class="hljs-comment"># 上传文件的临时目录</span><br>      <span class="hljs-attr">location:</span> <span class="hljs-string">/test</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">jpa:</span><br>    <span class="hljs-comment"># 数据库类型</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-comment">#打印SQL</span><br>    <span class="hljs-attr">show-sql:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">hibernate:</span><br>      <span class="hljs-attr">ddl-auto:</span> <span class="hljs-string">update</span>  <span class="hljs-comment">#第一次启动创建表，之后修改为update</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-comment"># 是否启用</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 模板编码</span><br>    <span class="hljs-attr">encoding:</span> <span class="hljs-string">UTF-8</span><br>    <span class="hljs-comment"># 模板模式</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">HTML5</span><br>    <span class="hljs-comment"># 模板存放路径</span><br>    <span class="hljs-attr">prefix:</span> <span class="hljs-string">classpath:/templates/</span><br>    <span class="hljs-comment"># 模板后缀</span><br>    <span class="hljs-attr">suffix:</span> <span class="hljs-string">.html</span><br>    <span class="hljs-comment"># 启用缓存，建议生产开启</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 校验模板是否存在</span><br>    <span class="hljs-attr">check-template-location:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># Content-type值</span><br>    <span class="hljs-attr">servlet:</span><br>      <span class="hljs-attr">content-type:</span> <span class="hljs-string">text/html</span><br>    <span class="hljs-comment"># 加配置静态资源</span><br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-attr">static-locations:</span> <span class="hljs-string">classpath:/</span><br><br><span class="hljs-attr">niaobulashi:</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">D:\workspace\javaProject\spring-boot-learning\spring-boot-22-updownload\doc</span><br>    <span class="hljs-attr">extension:</span> <span class="hljs-string">.gif,.jpeg,.png,.jpg,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.pdf,.txt,.rar,.tif</span><br></code></pre></td></tr></table></figure><p>最下面是自定义的配置属性，定义了文件存放路径和上传文件允许的后缀名称。</p><p>需要注意的是：<code>niaobulashi.file.path</code>，为你磁盘上的目录，根据你实际的目录<strong>修改</strong>。</p><h3 id="数据库表sys-file-info"><a href="#数据库表sys-file-info" class="headerlink" title="数据库表sys_file_info"></a>数据库表sys_file_info</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for `sys_file_info`</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `sys_file_info`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `sys_file_info` (<br>  `file_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;文件id&#x27;</span>,<br>  `file_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;文件名称&#x27;</span>,<br>  `file_path` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;文件路径&#x27;</span>,<br>  `file_size` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;文件大小&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`file_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;文件信息表&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><h3 id="结构目录"><a href="#结构目录" class="headerlink" title="结构目录"></a>结构目录</h3><p><img src="https://niaobulashi.github.io/assets/images/2019/springboot/springboot-fileload-01.png"></p><h3 id="页面file-html"><a href="#页面file-html" class="headerlink" title="页面file.html"></a>页面file.html</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1、单文件上传<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;upload&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    文件：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>2、文件下载<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;download&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    文件ID：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fileId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;下载文件&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>3、多文件上传<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;batchUpload&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    一次选择多个文件的多文件上传：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;files&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="统一返回ResponseCode"><a href="#统一返回ResponseCode" class="headerlink" title="统一返回ResponseCode"></a>统一返回ResponseCode</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResponseCode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HashMap</span>&lt;<span class="hljs-title">String</span>, <span class="hljs-title">Object</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final long serialVersionUID = 1L;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> final <span class="hljs-built_in">String</span> CODE_TAG = <span class="hljs-string">&quot;code&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> final <span class="hljs-built_in">String</span> MSG_TAG = <span class="hljs-string">&quot;msg&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> final <span class="hljs-built_in">String</span> DATA_TAG = <span class="hljs-string">&quot;data&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> Type<br>    &#123;<br>        <span class="hljs-comment">/** 成功 */</span><br>        SUCCESS(<span class="hljs-number">100</span>),<br>        <span class="hljs-comment">/** 警告 */</span><br>        WARN(<span class="hljs-number">200</span>),<br>        <span class="hljs-comment">/** 错误 */</span><br>        ERROR(<span class="hljs-number">300</span>);<br>        <span class="hljs-keyword">private</span> final int value;<br><br>        Type(int value)<br>        &#123;<br>            <span class="hljs-built_in">this</span>.value = value;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> int value()<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.value;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/** 状态类型 */</span><br>    <span class="hljs-keyword">private</span> Type <span class="hljs-keyword">type</span>;<br><br>    <span class="hljs-comment">/** 状态码 */</span><br>    <span class="hljs-keyword">private</span> int code;<br><br>    <span class="hljs-comment">/** 返回内容 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> msg;<br><br>    <span class="hljs-comment">/** 数据对象 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Object</span> data;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化一个新创建的 AjaxResult 对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>type 状态类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>msg 返回内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ResponseCode(Type <span class="hljs-keyword">type</span>, <span class="hljs-built_in">String</span> msg)<br>    &#123;<br>        <span class="hljs-built_in">super</span>.put(CODE_TAG, <span class="hljs-keyword">type</span>.value);<br>        <span class="hljs-built_in">super</span>.put(MSG_TAG, msg);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化一个新创建的 AjaxResult 对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>type 状态类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>data 数据对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ResponseCode(Type <span class="hljs-keyword">type</span>, <span class="hljs-built_in">String</span> msg, <span class="hljs-built_in">Object</span> data)<br>    &#123;<br>        <span class="hljs-built_in">super</span>.put(CODE_TAG, <span class="hljs-keyword">type</span>.value);<br>        <span class="hljs-built_in">super</span>.put(MSG_TAG, msg);<br>        <span class="hljs-keyword">if</span> (data !=<span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-built_in">super</span>.put(DATA_TAG, data);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return </span>成功消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseCode success()<br>    &#123;<br>        <span class="hljs-keyword">return</span> ResponseCode.success(<span class="hljs-string">&quot;操作成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return </span>成功消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseCode success(<span class="hljs-built_in">Object</span> data)<br>    &#123;<br>        <span class="hljs-keyword">return</span> ResponseCode.success(<span class="hljs-string">&quot;操作成功&quot;</span>, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return </span>成功消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseCode success(<span class="hljs-built_in">String</span> msg)<br>    &#123;<br>        <span class="hljs-keyword">return</span> ResponseCode.success(msg, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>data 数据对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return </span>成功消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseCode <span class="hljs-function"><span class="hljs-title">success</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> msg, <span class="hljs-built_in">Object</span> data</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseCode(Type.SUCCESS, msg, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回警告消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return </span>警告消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseCode warn(<span class="hljs-built_in">String</span> msg)<br>    &#123;<br>        <span class="hljs-keyword">return</span> ResponseCode.warn(msg, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回警告消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>data 数据对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return </span>警告消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseCode <span class="hljs-function"><span class="hljs-title">warn</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> msg, <span class="hljs-built_in">Object</span> data</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseCode(Type.WARN, msg, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回错误消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseCode <span class="hljs-function"><span class="hljs-title">error</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> ResponseCode.error(<span class="hljs-string">&quot;操作失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回错误消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return </span>警告消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseCode <span class="hljs-function"><span class="hljs-title">error</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> msg</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> ResponseCode.error(msg, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回错误消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>data 数据对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return </span>警告消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseCode <span class="hljs-function"><span class="hljs-title">error</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> msg, <span class="hljs-built_in">Object</span> data</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseCode(Type.ERROR, msg, data);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="model实体类SysFileInfo"><a href="#model实体类SysFileInfo" class="headerlink" title="model实体类SysFileInfo"></a>model实体类SysFileInfo</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Data</span><br><span class="hljs-variable">@Entity</span><br><span class="hljs-variable">@Table</span>(name = <span class="hljs-string">&quot;sys_file_info&quot;</span>)<br>public class SysFileInfo implements Serializable &#123;<br><br>    <span class="hljs-variable">@Id</span><br>    <span class="hljs-variable">@GeneratedValue</span><br>    private Integer fileId;<br><br>    <span class="hljs-variable">@Column</span>(nullable = false)<br>    private String fileName;<br><br>    <span class="hljs-variable">@Column</span>(nullable = false)<br>    private String filePath;<br><br>    <span class="hljs-variable">@Column</span>(nullable = false)<br>    private Long fileSize;<br>&#125;<br></code></pre></td></tr></table></figure><p>读取配置文件信息</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Data</span><br><span class="hljs-variable">@Component</span><br>public class GlobalProperties &#123;<br><br>    <span class="hljs-comment">/** 文件存放路径 */</span><br>    <span class="hljs-variable">@Value</span>(<span class="hljs-string">&quot;$&#123;niaobulashi.file.path&#125;&quot;</span>)<br>    private String serverPath;<br><br>    <span class="hljs-comment">/** 文件扩展名 */</span><br>    <span class="hljs-variable">@Value</span>(<span class="hljs-string">&quot;$&#123;niaobulashi.file.extension&#125;&quot;</span>)<br>    private String extension;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a>dao层</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">SysFileInfoDao</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">JpaRepository</span>&lt;<span class="hljs-symbol">SysFileInfo</span>, <span class="hljs-symbol">Integer</span>&gt; &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h3><p>关系的地方来了，其中有三部分：单文件上传、下载、批量文件上传</p><h4 id="头部分"><a href="#头部分" class="headerlink" title="头部分"></a>头部分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileController</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="hljs-keyword">this</span>.getClass());<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 默认大小 50M</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> DEFAULT_MAX_SIZE = <span class="hljs-number">50</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SysFileInfoDao sysFileInfoDao;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> GlobalProperties globalProperties;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件上传页面</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updatePage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;file&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">///....具体逻辑在下方</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单文件上传</span><br><span class="hljs-comment"> * @param file</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br>@<span class="hljs-constructor">PostMapping(<span class="hljs-string">&quot;/upload&quot;</span>)</span><br>@ResponseBody<br><span class="hljs-keyword">private</span> ResponseCode upload(@<span class="hljs-constructor">RequestParam(<span class="hljs-string">&quot;file&quot;</span>)</span> MultipartFile file) throws Exception &#123;<br><span class="hljs-comment">// 获取文件在服务器上的存储位置</span><br>String serverPath = globalProperties.get<span class="hljs-constructor">ServerPath()</span>;<br><br><span class="hljs-comment">// 获取允许上传的文件扩展名</span><br>String extension = globalProperties.get<span class="hljs-constructor">Extension()</span>;<br><br>File filePath = <span class="hljs-keyword">new</span> <span class="hljs-constructor">File(<span class="hljs-params">serverPath</span>)</span>;<br>logger.info(<span class="hljs-string">&quot;文件保存的路径为：&quot;</span> + filePath);<br><span class="hljs-keyword">if</span> (!filePath.exists<span class="hljs-literal">()</span><span class="hljs-operator"> &amp;&amp; </span>!filePath.is<span class="hljs-constructor">Directory()</span>) &#123;<br>logger.info(<span class="hljs-string">&quot;目录不存在，则创建目录：&quot;</span> + filePath);<br>filePath.mkdir<span class="hljs-literal">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断文件是否为空</span><br><span class="hljs-keyword">if</span> (file.is<span class="hljs-constructor">Empty()</span>) &#123;<br>return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseCode</span>.</span></span>error(<span class="hljs-string">&quot;文件为空&quot;</span>);<br>&#125;<br><span class="hljs-comment">//判断文件是否为空文件</span><br><span class="hljs-keyword">if</span> (file.get<span class="hljs-constructor">Size()</span> &lt;= <span class="hljs-number">0</span>) &#123;<br>return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseCode</span>.</span></span>error(<span class="hljs-string">&quot;文件大小为空，上传失败&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 判断文件大小不能大于50M</span><br><span class="hljs-keyword">if</span> (DEFAULT_MAX_SIZE != -<span class="hljs-number">1</span><span class="hljs-operator"> &amp;&amp; </span>file.get<span class="hljs-constructor">Size()</span> &gt; DEFAULT_MAX_SIZE) &#123;<br>return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseCode</span>.</span></span>error(<span class="hljs-string">&quot;上传的文件不能大于50M&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 获取文件名</span><br>String fileName = file.get<span class="hljs-constructor">OriginalFilename()</span>;<br><span class="hljs-comment">// 获取文件扩展名</span><br>String fileExtension = fileName.substring(fileName.last<span class="hljs-constructor">IndexOf(<span class="hljs-string">&quot;.&quot;</span>)</span>).<span class="hljs-keyword">to</span><span class="hljs-constructor">LowerCase()</span>;<br><br><span class="hljs-comment">// 判断文件扩展名是否正确</span><br><span class="hljs-keyword">if</span> (!extension.contains(fileExtension)) &#123;<br>return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseCode</span>.</span></span>error(<span class="hljs-string">&quot;文件扩展名不正确&quot;</span>);<br>&#125;<br><br>SysFileInfo sysFileInfo = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SysFileInfo()</span>;<br><span class="hljs-comment">// 重新生成的文件名</span><br>String saveFileName = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span> + fileExtension;<br><span class="hljs-comment">// 在指定目录下创建该文件</span><br>File targetFile = <span class="hljs-keyword">new</span> <span class="hljs-constructor">File(<span class="hljs-params">filePath</span>, <span class="hljs-params">saveFileName</span>)</span>;<br><br>logger.info(<span class="hljs-string">&quot;将文件保存到指定目录&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>file.transfer<span class="hljs-constructor">To(<span class="hljs-params">targetFile</span>)</span>;<br>&#125; catch (IOException e) &#123;<br>throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">Exception(<span class="hljs-params">e</span>.<span class="hljs-params">getMessage</span>()</span>);<br>&#125;<br><br><span class="hljs-comment">// 保存数据</span><br>sysFileInfo.set<span class="hljs-constructor">FileName(<span class="hljs-params">fileName</span>)</span>;<br>sysFileInfo.set<span class="hljs-constructor">FilePath(<span class="hljs-params">serverPath</span> + <span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-params">saveFileName</span>)</span>;<br>sysFileInfo.set<span class="hljs-constructor">FileSize(<span class="hljs-params">file</span>.<span class="hljs-params">getSize</span>()</span>);<br><br>logger.info(<span class="hljs-string">&quot;新增文件数据&quot;</span>);<br><span class="hljs-comment">// 新增文件数据</span><br>sysFileInfoDao.save(sysFileInfo);<br>return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseCode</span>.</span></span>success(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>下载的逻辑，我在前端通过input输入框输入fileId，后台查询数据库来下载</p><p>正常情况下应该是列表，单选或者多选后下载文件的。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 下载</span><br><span class="hljs-comment"> * @param fileId</span><br><span class="hljs-comment"> * @param request</span><br><span class="hljs-comment"> * @param response</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br>@<span class="hljs-constructor">PostMapping(<span class="hljs-string">&quot;/download&quot;</span>)</span><br>@ResponseBody<br>public ResponseCode download<span class="hljs-constructor">File(@RequestParam(<span class="hljs-string">&quot;fileId&quot;</span>)</span> Integer fileId, HttpServletRequest request, HttpServletResponse response) &#123;<br>logger.info(<span class="hljs-string">&quot;文件ID为：&quot;</span> + fileId);<br><span class="hljs-comment">// 判断传入参数是否非空</span><br><span class="hljs-keyword">if</span> (fileId<span class="hljs-operator"> == </span>null) &#123;<br>return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseCode</span>.</span></span>error(<span class="hljs-string">&quot;请求参数不能为空&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 根据fileId查询文件表</span><br>Optional&lt;SysFileInfo&gt; sysFileInfo = sysFileInfoDao.find<span class="hljs-constructor">ById(<span class="hljs-params">fileId</span>)</span>;<br><span class="hljs-keyword">if</span> (sysFileInfo.is<span class="hljs-constructor">Empty()</span>) &#123;<br>return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseCode</span>.</span></span>error(<span class="hljs-string">&quot;下载的文件不存在&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 获取文件全路径</span><br>File file = <span class="hljs-keyword">new</span> <span class="hljs-constructor">File(<span class="hljs-params">sysFileInfo</span>.<span class="hljs-params">get</span>()</span>.get<span class="hljs-constructor">FilePath()</span>);<br>String fileName = sysFileInfo.get<span class="hljs-literal">()</span>.get<span class="hljs-constructor">FileName()</span>;<br><span class="hljs-comment">// 判断是否存在磁盘中</span><br><span class="hljs-keyword">if</span> (file.exists<span class="hljs-literal">()</span>) &#123;<br><span class="hljs-comment">// 设置强制下载不打开</span><br>response.set<span class="hljs-constructor">ContentType(<span class="hljs-string">&quot;application/force-download&quot;</span>)</span>;<br><span class="hljs-comment">// 设置文件名</span><br>response.add<span class="hljs-constructor">Header(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;fileName=&quot;</span> + <span class="hljs-params">fileName</span>)</span>;<br>byte<span class="hljs-literal">[]</span> buffer = <span class="hljs-keyword">new</span> byte<span class="hljs-literal">[<span class="hljs-number">1024</span>]</span>;<br>FileInputStream fis = null;<br>BufferedInputStream bis = null;<br><span class="hljs-keyword">try</span> &#123;<br>fis = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileInputStream(<span class="hljs-params">file</span>)</span>;<br>bis = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedInputStream(<span class="hljs-params">fis</span>)</span>;<br>OutputStream os = response.get<span class="hljs-constructor">OutputStream()</span>;<br><span class="hljs-built_in">int</span> i = bis.read(buffer);<br><span class="hljs-keyword">while</span> (i != -<span class="hljs-number">1</span>) &#123;<br>os.write(buffer, <span class="hljs-number">0</span>, i);<br>i = bis.read(buffer);<br>&#125;<br>return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseCode</span>.</span></span>success(<span class="hljs-string">&quot;下载成功&quot;</span>);<br>&#125; catch (Exception e) &#123;<br>e.print<span class="hljs-constructor">StackTrace()</span>;<br>&#125; finally &#123;<br><span class="hljs-keyword">if</span> (bis != null) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>bis.close<span class="hljs-literal">()</span>;<br>&#125; catch (IOException e) &#123;<br>e.print<span class="hljs-constructor">StackTrace()</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (fis != null) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>fis.close<span class="hljs-literal">()</span>;<br>&#125; catch (IOException e) &#123;<br>e.print<span class="hljs-constructor">StackTrace()</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseCode</span>.</span></span>error(<span class="hljs-string">&quot;数据库查询存在，本地磁盘不存在文件&quot;</span>);<br>&#125;<br>return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseCode</span>.</span></span>success(<span class="hljs-string">&quot;下载失败&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="批量文件上传"><a href="#批量文件上传" class="headerlink" title="批量文件上传"></a>批量文件上传</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 批量文件上传</span><br><span class="hljs-comment"> * @param files</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> * @throws Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable">@PostMapping</span>(<span class="hljs-string">&quot;/batchUpload&quot;</span>)<br><span class="hljs-variable">@ResponseBody</span><br>public ResponseCode batchUpload(<span class="hljs-variable">@RequestParam</span>(<span class="hljs-string">&quot;files&quot;</span>) MultipartFile[] files) throws Exception &#123;<br><span class="hljs-selector-tag">if</span> (files == null) &#123;<br><span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">ResponseCode</span><span class="hljs-selector-class">.error</span>(<span class="hljs-string">&quot;参数为空&quot;</span>);<br>&#125;<br><span class="hljs-selector-tag">for</span> (MultipartFile <span class="hljs-attribute">multipartFile </span>: files) &#123;<br><span class="hljs-selector-tag">upload</span>(multipartFile);<br>&#125;<br><span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">ResponseCode</span><span class="hljs-selector-class">.success</span>(<span class="hljs-string">&quot;批量上传成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>至此项目完成，开始测试</p><h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><p><img src="https://niaobulashi.github.io/assets/images/2019/springboot/springboot-upload02.gif"></p><h2 id="四、源码"><a href="#四、源码" class="headerlink" title="四、源码"></a>四、源码</h2><p>emmm，私藏的可爱图片也给你们啦</p><p>源码地址：<a href="https://github.com/niaobulashi/spring-boot-learning/tree/master/spring-boot-22-updownload">spring-boot-learning</a><br>欢迎star、fork，给作者一些鼓励</p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot2(十三)：整合定时任务发送邮件</title>
    <link href="/2019/07/16/2019-07-16-schedule-mail/"/>
    <url>/2019/07/16/2019-07-16-schedule-mail/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要玩一下SpringBoot的定时任务和发送邮件的功能。定时发送邮件，这在实际生成环境下主要用户系统性能监控时，当超过设定的阙值，就发送邮件通知预警功能。这里只通过简单的写个定时结合邮件通知进行学习。</p><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><h3 id="添加maven依赖"><a href="#添加maven依赖" class="headerlink" title="添加maven依赖"></a>添加maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--mail邮件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--thymeleaf前端模板--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置文件application-yml"><a href="#配置文件application-yml" class="headerlink" title="配置文件application.yml"></a>配置文件application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mail:</span><br>    <span class="hljs-comment">#邮箱服务器地址</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">smtp.qq.com</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">hulang6666@qq.com</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">**********</span><br>    <span class="hljs-attr">default-encoding:</span> <span class="hljs-string">UTF-8</span><br><br><span class="hljs-attr">mail:</span><br>  <span class="hljs-comment">#以谁来发送邮件</span><br>  <span class="hljs-attr">fromMail:</span><br>    <span class="hljs-attr">addr:</span> <span class="hljs-string">hulang6666@qq.com</span><br></code></pre></td></tr></table></figure><p>这里的<code>spring.mail.password</code>为你的邮箱开启smtp服务需要设置客户端授权码，此处的password为你的验证密码。注意不是你的qq登录密码。</p><p>这里需要注意的一点是<code>spring.mail.host</code>为<strong>邮箱服务地址</strong></p><h3 id="常见的邮件服务器扩展"><a href="#常见的邮件服务器扩展" class="headerlink" title="常见的邮件服务器扩展"></a>常见的邮件服务器扩展</h3><p>（SMTP、POP3）地址、端口如下：</p><p><strong>gmail(google.com)</strong><br>POP3服务器地址:pop.gmail.com（SSL启用 端口：995）<br>SMTP服务器地址:smtp.gmail.com（SSL启用 端口：587）</p><p><strong>Foxmail:</strong><br>POP3服务器地址:pop.foxmail.com（端口：110）<br>SMTP服务器地址:smtp.foxmail.com（端口：25）</p><p><strong>sina.com:</strong><br>POP3服务器地址:pop3.sina.com.cn（端口：110）<br>SMTP服务器地址:smtp.sina.com.cn（端口：25） </p><p><strong>163.com:</strong><br>POP3服务器地址:pop.163.com（端口：110）<br>SMTP服务器地址:smtp.163.com（端口：25）</p><p><strong>QQ邮箱</strong><br>POP3服务器地址:pop.qq.com（端口：110）<br>SMTP服务器地址:smtp.qq.com（端口：25）</p><p><strong>QQ企业邮箱</strong><br>POP3服务器地址:pop.exmail.qq.com（端口：995）<br>SMTP服务器地址:smtp.exmail.qq.com（端口：587/465）</p><p><strong>HotMail</strong><br>POP3服务器地址:pop.live.com（端口：995）<br>SMTP服务器地址:smtp.live.com（端口：587）</p><p><strong>sohu.com:</strong><br>POP3服务器地址:pop3.sohu.com（端口：110）<br>SMTP服务器地址:smtp.sohu.com（端口：25）</p><h2 id="二、邮件服务"><a href="#二、邮件服务" class="headerlink" title="二、邮件服务"></a>二、邮件服务</h2><p>我们使用html模板并且带有附件的例子。</p><h3 id="MailService"><a href="#MailService" class="headerlink" title="MailService"></a>MailService</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> interface MailService &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sendHtmlMail</span><span class="hljs-params">(<span class="hljs-keyword">String</span> to, <span class="hljs-keyword">String</span> subject, <span class="hljs-keyword">String</span> content, <span class="hljs-keyword">String</span> filePath)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MailServiceImpl"><a href="#MailServiceImpl" class="headerlink" title="MailServiceImpl"></a>MailServiceImpl</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Component<br>public <span class="hljs-keyword">class</span> MailServiceImpl implements MailService &#123;<br><br>    <span class="hljs-keyword">private</span> final Logger logger = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LoggerFactory</span>.</span></span>get<span class="hljs-constructor">Logger(<span class="hljs-params">this</span>.<span class="hljs-params">getClass</span>()</span>);<br><br>    @Resource<br>    <span class="hljs-keyword">private</span> JavaMailSender mailSender;<br><br>    @<span class="hljs-constructor">Value(<span class="hljs-string">&quot;$&#123;mail.fromMail.addr&#125;&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String from;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送html邮件</span><br><span class="hljs-comment">     * @param to</span><br><span class="hljs-comment">     * @param subject</span><br><span class="hljs-comment">     * @param content</span><br><span class="hljs-comment">     */</span><br>    @Override<br>    public void send<span class="hljs-constructor">HtmlMail(String <span class="hljs-params">to</span>, String <span class="hljs-params">subject</span>, String <span class="hljs-params">content</span>, String <span class="hljs-params">filePath</span>)</span> &#123;<br>        MimeMessage message = mailSender.create<span class="hljs-constructor">MimeMessage()</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//true表示需要创建一个multipart message</span><br>            MimeMessageHelper helper = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MimeMessageHelper(<span class="hljs-params">message</span>, <span class="hljs-params">true</span>)</span>;<br>            helper.set<span class="hljs-constructor">From(<span class="hljs-params">from</span>)</span>;<br>            helper.set<span class="hljs-constructor">To(<span class="hljs-params">to</span>)</span>;<br>            helper.set<span class="hljs-constructor">Subject(<span class="hljs-params">subject</span>)</span>;<br>            helper.set<span class="hljs-constructor">Text(<span class="hljs-params">content</span>, <span class="hljs-params">true</span>)</span>;<br><br>            <span class="hljs-comment">// 判断是否带有附件</span><br>            <span class="hljs-keyword">if</span> (filePath != null) &#123;<br>                FileSystemResource file = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileSystemResource(<span class="hljs-params">new</span> File(<span class="hljs-params">filePath</span>)</span>);<br>                String fileName = filePath.substring(filePath.last<span class="hljs-constructor">IndexOf(File.<span class="hljs-params">separator</span>)</span>);<br>                helper.add<span class="hljs-constructor">Attachment(<span class="hljs-params">fileName</span>, <span class="hljs-params">file</span>)</span>;<br>            &#125;<br><br>            mailSender.send(message);<br>            logger.info(<span class="hljs-string">&quot;html邮件发送成功&quot;</span>);<br>        &#125; catch (MessagingException e) &#123;<br>            logger.error(<span class="hljs-string">&quot;发送html邮件时发生异常！&quot;</span>, e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="新增邮件模板"><a href="#新增邮件模板" class="headerlink" title="新增邮件模板"></a>新增邮件模板</h3><p>sendMail.html</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-radius:5px;font-size:19px;width:680px;font-family:微软雅黑,&#x27;Helvetica Neue&#x27;,Arial,sans-serif;margin:10px auto 0px;border:1px solid #eee;max-width:100%;&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%;background:#49BDAD;color:#FFFFFF;border-radius:5px 5px 0 0;&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:22px;word-break:break-all;padding:20px 32px;margin:0;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;siteTitle&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>《<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#FFFFFF;font-weight:bold;text-decoration:none;&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;permalink&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;title&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>》一文有新的评论啦！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin:0px auto;width:90%&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;author&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span> 于 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;time&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>在《<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;title&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span>》评论说：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background:#EFEFEF;margin:15px 0px;padding:20px;border-radius:5px;font-size:20px;color:#333;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;text&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>IP：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;ip&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span>，邮箱：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;mail&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span>，审核：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;status&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span>。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>可登录<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;manage&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&#x27;_blank&#x27;</span>&gt;</span>网站后台<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>管理评论。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void send<span class="hljs-constructor">TemplateMail()</span> &#123;<br><span class="hljs-comment">//创建邮件字段</span><br>Context context = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Context()</span>;<br>context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;siteTitle&quot;</span>, <span class="hljs-string">&quot;鸟不拉诗&quot;</span>)</span>;<br>context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;permalink&quot;</span>, <span class="hljs-string">&quot;https://niaobulashi.com/archives/canteen.html/comment-page-1#comment-1152&quot;</span>)</span>;<br>context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;公司食堂伙食看起来还不错的亚子（体重有所回升）&quot;</span>)</span>;<br>context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;author&quot;</span>, <span class="hljs-string">&quot;测试员&quot;</span>)</span>;<br>context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;time&quot;</span>, <span class="hljs-string">&quot;2019-07-16 08:52:46&quot;</span>)</span>;<br>context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;真的很不错！&quot;</span>)</span>;<br>context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;ip&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>)</span>;<br>context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;mail&quot;</span>, <span class="hljs-string">&quot;123321@qq.com&quot;</span>)</span>;<br>context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-string">&quot;通过&quot;</span>)</span>;<br>context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;manage&quot;</span>, <span class="hljs-string">&quot;https://niaobulashi.com&quot;</span>)</span>;<br><span class="hljs-comment">// 将字段加载到页面模板中</span><br>String emailContent = templateEngine.process(<span class="hljs-string">&quot;sendMail&quot;</span>, context);<br><span class="hljs-comment">// 添加附件</span><br>String filePath=<span class="hljs-string">&quot;E:\\workspace\\javaWorkspace\\spring-boot-learning\\spring-boot-21-schedule-mail\\doc\\test.log&quot;</span>;<br>mailService.send<span class="hljs-constructor">HtmlMail(<span class="hljs-string">&quot;hulang6666@qq.com&quot;</span>,<span class="hljs-string">&quot;主题：这是模板邮件&quot;</span>,<span class="hljs-params">emailContent</span>, <span class="hljs-params">filePath</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、定时任务"><a href="#三、定时任务" class="headerlink" title="三、定时任务"></a>三、定时任务</h2><p>定时任务在SpringBoot默认的SpringBootStart包中已经存在</p><h3 id="启动类开启定时任务"><a href="#启动类开启定时任务" class="headerlink" title="启动类开启定时任务"></a>启动类开启定时任务</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableScheduling</span><br>public class ScheduleMailApplication &#123;<br><br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(ScheduleMailApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建定时任务"><a href="#创建定时任务" class="headerlink" title="创建定时任务"></a>创建定时任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SchedulerTask</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Scheduled(cron=&quot;*/8 * * * * ?&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;定时任务开启，以跑：  &quot;</span>+(count++));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Quart-Cron表达式扩展"><a href="#Quart-Cron表达式扩展" class="headerlink" title="Quart Cron表达式扩展"></a>Quart Cron表达式扩展</h3><p>cron的表达式是字符串，实际上是由七子表达式，描述个别细节的时间表。</p><ol><li>​       <strong>Seconds</strong></li><li>​       <strong>Minutes</strong></li><li>​       <strong>Hours</strong></li><li>​       <strong>Day-of-Month</strong></li><li>​       <strong>Month</strong></li><li>​       <strong>Day-of-Week</strong></li><li>​      <strong>Year (可选字段)</strong></li></ol><p>​     1）Cron表达式的格式：秒 分 时 日 月 周 年(可选)。</p><p>​               字段名                 允许的值                        允许的特殊字符                 </p><p>​                 秒                      0-59                                   , - * /                 </p><p>​                 分                      0-59                                   , - * /                 </p><p>​               小时                     0-23                                   , - * /                 </p><p>​                 日                      1-31                                   , - * ? / L W C                 </p><p>​                 月                      1-12 or JAN-DEC                 , - * /                 </p><p>​                周几                    1-7 or SUN-SAT                  , - * ? / L C #                 </p><p>​              年 (可选字段)         empty, 1970-2099             , - * /</p><p>​             </p><p>​              “*” 代表整个时间段</p><p>​               “?”字符：表示不确定的值</p><p>​               “,”字符：指定数个值</p><p>​               “-”字符：指定一个值的范围</p><p>​               “/”字符：指定一个值的增加幅度。n/m表示从n开始，每次增加m</p><p>​               “L”字符：用在日表示一个月中的最后一天，用在周表示该月最后一个星期X</p><p>​               “W”字符：指定离给定日期最近的工作日(周一到周五)</p><p>​               “#”字符：表示该月第几个周X。6#3表示该月第3个周五</p><p>​        2）Cron表达式范例：</p><p>​                 每隔5秒执行一次：*/5 * * * * ?</p><p>​                 每隔1分钟执行一次：0 */1 * * * ?</p><p>​                 每天23点执行一次：0 0 23 * * ?</p><p>​                 每天凌晨1点执行一次：0 0 1 * * ?</p><p>​                 每月1号凌晨1点执行一次：0 0 1 1 * ?</p><p>​                 每月最后一天23点执行一次：0 0 23 L * ?</p><p>​                 每周星期天凌晨1点实行一次：0 0 1 ? * L</p><p>​                 在26分、29分、33分执行一次：0 26,29,33 * * * ?</p><p>​                 每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 * * ?</p><p><strong>Corn表达式在线验证：<a href="http://cron.qqe2.com/">http://cron.qqe2.com/</a></strong></p><p> <img src="https://images2015.cnblogs.com/blog/903762/201609/903762-20160901193022230-1358890324.png" alt="img"></p><h2 id="四、定时发送邮件"><a href="#四、定时发送邮件" class="headerlink" title="四、定时发送邮件"></a>四、定时发送邮件</h2><p>定时1分钟发送邮件</p><h3 id="SchedulerTask"><a href="#SchedulerTask" class="headerlink" title="SchedulerTask"></a>SchedulerTask</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Component<br>public <span class="hljs-keyword">class</span> SchedulerTask &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> count=<span class="hljs-number">0</span>;<br><br>    @Autowired<br>    <span class="hljs-keyword">private</span> MailService mailService;<br><br>    @Autowired<br>    <span class="hljs-keyword">private</span> TemplateEngine templateEngine;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 每隔一分钟执行一次</span><br><span class="hljs-comment">     */</span><br>    @<span class="hljs-constructor">Scheduled(<span class="hljs-params">cron</span>=<span class="hljs-string">&quot;0 */1 * * * ?&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> void process<span class="hljs-literal">()</span>&#123;<br><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;this is scheduler task runing  &quot;</span>+(count++));<br>        <span class="hljs-comment">//创建邮件字段</span><br>        Context context = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Context()</span>;<br>        context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;siteTitle&quot;</span>, <span class="hljs-string">&quot;鸟不拉诗&quot;</span>)</span>;<br>        context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;permalink&quot;</span>, <span class="hljs-string">&quot;https://niaobulashi.com/archives/canteen.html/comment-page-1#comment-1152&quot;</span>)</span>;<br>        context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;公司食堂伙食看起来还不错的亚子（体重有所回升）&quot;</span>)</span>;<br>        context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;author&quot;</span>, <span class="hljs-string">&quot;测试员&quot;</span>)</span>;<br>        context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;time&quot;</span>, <span class="hljs-string">&quot;2019-07-16 08:52:46&quot;</span>)</span>;<br>        context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;真的很不错！&quot;</span>)</span>;<br>        context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;ip&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>)</span>;<br>        context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;mail&quot;</span>, <span class="hljs-string">&quot;123321@qq.com&quot;</span>)</span>;<br>        context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-string">&quot;通过&quot;</span>)</span>;<br>        context.set<span class="hljs-constructor">Variable(<span class="hljs-string">&quot;manage&quot;</span>, <span class="hljs-string">&quot;https://niaobulashi.com&quot;</span>)</span>;<br>        <span class="hljs-comment">// 将字段加载到页面模板中</span><br>        String emailContent = templateEngine.process(<span class="hljs-string">&quot;sendMail&quot;</span>, context);<br>        <span class="hljs-comment">// 添加附件</span><br>        String filePath=<span class="hljs-string">&quot;E:\\workspace\\javaWorkspace\\spring-boot-learning\\spring-boot-21-schedule-mail\\doc\\test.log&quot;</span>;<br>        mailService.send<span class="hljs-constructor">HtmlMail(<span class="hljs-string">&quot;hulang6666@qq.com&quot;</span>,<span class="hljs-string">&quot;主题：这是模板邮件&quot;</span>,<span class="hljs-params">emailContent</span>, <span class="hljs-params">filePath</span>)</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p><img src="https://user-gold-cdn.xitu.io/2019/7/16/16bfaf6843249cc6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="第二次发送成功"></p><p><img src="https://user-gold-cdn.xitu.io/2019/7/16/16bfaf6a4ad95170?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="邮件发送测试截图"></p><p>源码地址：<a href="https://github.com/niaobulashi/spring-boot-learning/tree/master/spring-boot-21-schedule-mail">https://github.com/niaobulashi/spring-boot-learning/tree/master/spring-boot-21-schedule-mail</a></p><hr>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot2(十二)：手摸手教你搭建Shiro安全框架</title>
    <link href="/2019/07/13/2019-07-13-springboot-shiro/"/>
    <url>/2019/07/13/2019-07-13-springboot-shiro/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>SpringBoot+Shiro+Mybatis完成的。</p><p>之前看了一位小伙伴的Shiro教程，跟着做了，遇到蛮多坑的(´இ皿இ｀)</p><p>修改整理了一下，成功跑起来了。可以通过postman进行测试</p><p>不多比比∠( ᐛ 」∠)＿，直接上源码：<a href="https://github.com/niaobulashi/spring-boot-learning/tree/master/spring-boot-20-shiro">https://github.com/niaobulashi/spring-boot-learning/tree/master/spring-boot-20-shiro</a></p><h2 id="一、Shiro是啥"><a href="#一、Shiro是啥" class="headerlink" title="一、Shiro是啥"></a>一、Shiro是啥</h2><p>Apache Shiro是一个功能强大、灵活的、开源的安全框架。可以干净利落地处理身份验证、授权、企业会话管理和加密。</p><h2 id="二、Shiro可以干啥"><a href="#二、Shiro可以干啥" class="headerlink" title="二、Shiro可以干啥"></a>二、Shiro可以干啥</h2><ul><li>验证用户身份</li><li>用户访问权限控制，比如：1、判断用户是否分配了一定的安全角色。2、判断用户是否被授予完成某个操作的权限</li><li>在非 Web 或 EJB 容器的环境下可以任意使用 Session API</li><li>可以响应认证、访问控制，或者 Session 生命周期中发生的事件</li><li>可将一个或以上用户安全数据源数据组合成一个复合的用户 “view”(视图)</li><li>支持单点登录(SSO)功能</li><li>支持提供“Remember Me”服务，获取用户关联信息而无需登录</li></ul><p>Shiro框架图如下：</p><p><img src="http://www.itmind.net/assets/images/2017/springboot/ShiroFeatures.png" alt="img"></p><ul><li><strong>Authentication（认证）：</strong>用户身份识别，通常被称为用户“登录”</li><li><strong>Authorization（授权）：</strong>访问控制。比如某个用户是否具有某个操作的使用权限。</li><li><strong>Session Management（会话管理）：</strong>特定于用户的会话管理,甚至在非web 或 EJB 应用程序。</li><li><strong>Cryptography（加密）：</strong>在对数据源使用加密算法加密的同时，保证易于使用。</li></ul><p>在概念层，Shiro架构包含三个主要的理念：Subject，SecurityManager和 Realm。下面的图展示了这些组件如何相互作用，我们将在下面依次对其进行描述。</p><p><img src="http://www.itmind.net/assets/images/2017/springboot/ShiroBasicArchitecture.png" alt="img"></p><ul><li>Subject：当前用户，Subject 可以是一个人，但也可以是第三方服务、守护进程帐户、时钟守护任务或者其它–当前和软件交互的任何事件。</li><li>SecurityManager：管理所有Subject，SecurityManager 是 Shiro 架构的核心，配合内部安全组件共同组成安全伞。</li><li>Realms：用于进行权限信息的验证，我们自己实现。Realm 本质上是一个特定的安全 DAO：它封装与数据源连接的细节，得到Shiro 所需的相关的数据。在配置 Shiro 的时候，你必须指定至少一个Realm 来实现认证（authentication）和/或授权（authorization）。</li></ul><h2 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h2><h3 id="1、添加Maven依赖"><a href="#1、添加Maven依赖" class="headerlink" title="1、添加Maven依赖"></a>1、添加Maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h3><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 服务器端口</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><br><span class="hljs-comment"># 配置Spring相关信息</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><br><span class="hljs-comment"># 配置Mybatis</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.niaobulashi.model</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mapper/*.xml</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-comment"># 开启驼峰命名转换</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 打印SQL日志</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com.niaobulashi.mapper:</span> <span class="hljs-string">DEBUG</span><br></code></pre></td></tr></table></figure><p>启动方法添加mapper扫描，我一般都是在启动方法上面声明，否则需要在每一个mapper上单独声明扫描</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@MapperScan</span>(<span class="hljs-string">&quot;com.niaobulashi.mapper&quot;</span>)<br>public class ShiroApplication &#123;<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(ShiroApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、简单的表设计"><a href="#3、简单的表设计" class="headerlink" title="3、简单的表设计"></a>3、简单的表设计</h3><p>无非就是5张表：用户表、角色表、权限表、用户角色表、角色权限表。</p><p>看下面这张图，可以说相当明了了。</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/07/2956571916.png" alt="用户角色权限关系表"></p><p>具体我就不贴出来了，太占篇幅。。直接贴链接：<a href="https://github.com/niaobulashi/spring-boot-learning/blob/master/spring-boot-20-shiro/db/test.sql">https://github.com/niaobulashi/spring-boot-learning/blob/master/spring-boot-20-shiro/db/test.sql</a></p><h3 id="4、实体类"><a href="#4、实体类" class="headerlink" title="4、实体类"></a>4、实体类</h3><h4 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs haxe">@Data<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Serializable</span></span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final long serialVersionUID = <span class="hljs-number">-6056125703075132981</span>L;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> account;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> password;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> username;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Role-java"><a href="#Role-java" class="headerlink" title="Role.java"></a>Role.java</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haxe">@Data<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Serializable</span></span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final long serialVersionUID = <span class="hljs-number">-1767327914553823741</span>L;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> role;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> desc;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、mapper层"><a href="#5、mapper层" class="headerlink" title="5、mapper层"></a>5、mapper层</h3><p>这里概括一下：简单的用户登录权限的Shiro控制涉及到的数据库操作主要有仨</p><ul><li>用户<strong>登录名</strong>查询<strong>用户</strong>信息</li><li>根据<strong>用户</strong>查询<strong>角色</strong>信息</li><li>根据<strong>角色</strong>查询<strong>权限</strong>信息</li></ul><h4 id="UserMapper-java-UserMapper-xml"><a href="#UserMapper-java-UserMapper-xml" class="headerlink" title="UserMapper.java/UserMapper.xml"></a>UserMapper.java/UserMapper.xml</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">interface</span> <span class="hljs-selector-tag">UserMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据账户查询用户信息</span><br><span class="hljs-comment">     * @param account</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-selector-tag">User</span> <span class="hljs-selector-tag">findByAccount</span>(<span class="hljs-variable">@Param</span>(<span class="hljs-string">&quot;account&quot;</span>) String account);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!--用户表结果集--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;base_column_list&quot;</span>&gt;</span></span><br><span class="xml">id, account, password, username</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!--根据账户查询用户信息--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByAccount&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.niaobulashi.model.User&quot;</span>&gt;</span></span><br><span class="xml">select</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;base_column_list&quot;</span>/&gt;</span></span><br><span class="xml">from user</span><br><span class="xml">where account = #</span><span class="hljs-template-variable">&#123;account&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="RoleMapper-java-RoleMapper-xml"><a href="#RoleMapper-java-RoleMapper-xml" class="headerlink" title="RoleMapper.java/RoleMapper.xml"></a>RoleMapper.java/RoleMapper.xml</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RoleMapper</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据userId查询角色信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;Role&gt; <span class="hljs-title">findRoleByUserId</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;userId&quot;)</span> Integer userId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!--角色表字段结果集--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;base_cloum_list&quot;</span>&gt;</span></span><br><span class="xml">id, role, desc</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!--根据userId查询角色信息--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findRoleByUserId&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Integer&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.niaobulashi.model.Role&quot;</span>&gt;</span></span><br><span class="xml">select r.id, r.role</span><br><span class="xml">from role r</span><br><span class="xml">left join user_role ur on ur.role_id = r.id</span><br><span class="xml">left join user u on u.id = ur.user_id</span><br><span class="xml">where 1=1</span><br><span class="xml">and u.user_id = #</span><span class="hljs-template-variable">&#123;userId&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="PermissionMapper-java-PermissionMapper-xml"><a href="#PermissionMapper-java-PermissionMapper-xml" class="headerlink" title="PermissionMapper.java/PermissionMapper.xml"></a>PermissionMapper.java/PermissionMapper.xml</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PermissionMapper</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据角色id查询权限</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> roleIds</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;String&gt; <span class="hljs-title">findByRoleId</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;roleIds&quot;)</span> List&lt;Integer&gt; roleIds)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!--权限查询结果集--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;base_column_list&quot;</span>&gt;</span></span><br><span class="xml">id, permission, desc</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!--根据角色id查询权限--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByRoleId&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;List&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;String&quot;</span>&gt;</span></span><br><span class="xml">select permission</span><br><span class="xml">from permission, role_permission rp</span><br><span class="xml">where rp.permission_id = permission.id and rp.role_id in</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;roleIds&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span></span><br><span class="xml">#</span><span class="hljs-template-variable">&#123;id&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="6、Service层"><a href="#6、Service层" class="headerlink" title="6、Service层"></a>6、Service层</h3><p>没有其他逻辑，只有继承。</p><p><strong>注意：</strong></p><blockquote><p>不过需要注意的一点是，我在Service层中，使用的注解@Service：启动时会自动注册到Spring容器中。</p><p>否则启动时，拦截器配置初始化时，会找不到Service。。。这点有点坑。</p></blockquote><h4 id="UserService-java-UserServiceImpl-java"><a href="#UserService-java-UserServiceImpl-java" class="headerlink" title="UserService.java/UserServiceImpl.java"></a>UserService.java/UserServiceImpl.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据账户查询用户信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> account</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">User <span class="hljs-title">findByAccount</span><span class="hljs-params">(String account)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Service</span>(<span class="hljs-string">&quot;userService&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据账户查询用户信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> account</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">User <span class="hljs-title">findByAccount</span><span class="hljs-params">(String account)</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> userMapper.<span class="hljs-title">findByAccount</span><span class="hljs-params">(account)</span></span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="RoleService-java-RoleServiceImpl-java"><a href="#RoleService-java-RoleServiceImpl-java" class="headerlink" title="RoleService.java/RoleServiceImpl.java"></a>RoleService.java/RoleServiceImpl.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RoleService</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据userId查询角色信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;Role&gt; <span class="hljs-title">findRoleByUserId</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service(&quot;roleService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RoleServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RoleService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RoleMapper roleMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据userId查询角色信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title">findRoleByUserId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> roleMapper.findRoleByUserId(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PermissionService-java-PermissionServiceImpl-java"><a href="#PermissionService-java-PermissionServiceImpl-java" class="headerlink" title="PermissionService.java/PermissionServiceImpl.java"></a>PermissionService.java/PermissionServiceImpl.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PermissionService</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据角色id查询权限</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> roleIds</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;String&gt; <span class="hljs-title">findByRoleId</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;roleIds&quot;)</span> List&lt;Integer&gt; roleIds)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service(&quot;permissionService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PermissionServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PermissionService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PermissionMapper permissionMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据角色id查询权限</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> roleIds</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">findByRoleId</span><span class="hljs-params">(List&lt;Integer&gt; roleIds)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> permissionMapper.findByRoleId(roleIds);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7、系统统一返回状态枚举和包装方法"><a href="#7、系统统一返回状态枚举和包装方法" class="headerlink" title="7、系统统一返回状态枚举和包装方法"></a>7、系统统一返回状态枚举和包装方法</h3><p>状态字段枚举</p><h4 id="StatusEnmus-java"><a href="#StatusEnmus-java" class="headerlink" title="StatusEnmus.java"></a>StatusEnmus.java</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public enum StatusEnums &#123;<br><br>    <span class="hljs-constructor">SUCCESS(200, <span class="hljs-string">&quot;操作成功&quot;</span>)</span>,<br>    <span class="hljs-constructor">SYSTEM_ERROR(500, <span class="hljs-string">&quot;系统错误&quot;</span>)</span>,<br>    <span class="hljs-constructor">ACCOUNT_UNKNOWN(500, <span class="hljs-string">&quot;账户不存在&quot;</span>)</span>,<br>    <span class="hljs-constructor">ACCOUNT_IS_DISABLED(13, <span class="hljs-string">&quot;账号被禁用&quot;</span>)</span>,<br>    <span class="hljs-constructor">INCORRECT_CREDENTIALS(500,<span class="hljs-string">&quot;用户名或密码错误&quot;</span>)</span>,<br>    <span class="hljs-constructor">PARAM_ERROR(400, <span class="hljs-string">&quot;参数错误&quot;</span>)</span>,<br>    <span class="hljs-constructor">PARAM_REPEAT(400, <span class="hljs-string">&quot;参数已存在&quot;</span>)</span>,<br>    <span class="hljs-constructor">PERMISSION_ERROR(403, <span class="hljs-string">&quot;没有操作权限&quot;</span>)</span>,<br>    <span class="hljs-constructor">NOT_LOGIN_IN(15, <span class="hljs-string">&quot;账号未登录&quot;</span>)</span>,<br>    <span class="hljs-constructor">OTHER(-100, <span class="hljs-string">&quot;其他错误&quot;</span>)</span>;<br><br>    @Getter<br>    @Setter<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> code;<br>    @Getter<br>    @Setter<br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-constructor">StatusEnums(<span class="hljs-params">int</span> <span class="hljs-params">code</span>, String <span class="hljs-params">message</span>)</span> &#123;<br>        this.code = code;<br>        this.message = message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>响应包装方法</p><h4 id="ResponseCode-java"><a href="#ResponseCode-java" class="headerlink" title="ResponseCode.java"></a>ResponseCode.java</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResponseCode</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-title">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> message;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Object</span> data;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-title">ResponseCode</span>(<span class="hljs-params">StatusEnums responseCode</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = responseCode.getCode();<br>        <span class="hljs-built_in">this</span>.message = responseCode.getMessage();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-title">ResponseCode</span>(<span class="hljs-params">StatusEnums responseCode, T data</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = responseCode.getCode();<br>        <span class="hljs-built_in">this</span>.message = responseCode.getMessage();<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-title">ResponseCode</span>(<span class="hljs-params">Integer code, <span class="hljs-built_in">String</span> message</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>data      信息内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>&lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>&lt;T&gt; ResponseCode <span class="hljs-function"><span class="hljs-title">success</span>(<span class="hljs-params">T data</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseCode&lt;&gt;(StatusEnums.SUCCESS, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseCode <span class="hljs-function"><span class="hljs-title">success</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseCode(StatusEnums.SUCCESS);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回错误信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>statusEnums      响应码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseCode <span class="hljs-function"><span class="hljs-title">error</span>(<span class="hljs-params">StatusEnums statusEnums</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseCode(statusEnums);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、Shiro配置"><a href="#8、Shiro配置" class="headerlink" title="8、Shiro配置"></a>8、Shiro配置</h3><h4 id="ShiroConfig-java"><a href="#ShiroConfig-java" class="headerlink" title="ShiroConfig.java"></a>ShiroConfig.java</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShiroConfig</span> </span>&#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 路径过滤规则</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-function"><span class="hljs-title">shiroFilter</span>(<span class="hljs-params">SecurityManager securityManager</span>)</span> &#123;<br>ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="hljs-keyword">new</span> ShiroFilterFactoryBean();<br>shiroFilterFactoryBean.setSecurityManager(securityManager);<br><span class="hljs-comment">// 如果不设置默认会自动寻找Web工程根目录下的&quot;/login.jsp&quot;页面</span><br>shiroFilterFactoryBean.setLoginUrl(<span class="hljs-string">&quot;/login&quot;</span>);<br>shiroFilterFactoryBean.setSuccessUrl(<span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-comment">// 拦截器</span><br><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; map = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();<br><span class="hljs-comment">// 配置不会被拦截的链接 顺序判断</span><br>map.put(<span class="hljs-string">&quot;/login&quot;</span>, <span class="hljs-string">&quot;anon&quot;</span>);<br><span class="hljs-comment">// 过滤链定义，从上向下顺序执行，一般将/**放在最为下边</span><br><span class="hljs-comment">// 进行身份认证后才能访问</span><br><span class="hljs-comment">// authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问</span><br>map.put(<span class="hljs-string">&quot;/**&quot;</span>, <span class="hljs-string">&quot;authc&quot;</span>);<br>shiroFilterFactoryBean.setFilterChainDefinitionMap(map);<br><span class="hljs-keyword">return</span> shiroFilterFactoryBean;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义身份认证Realm（包含用户名密码校验，权限校验等）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> AuthRealm <span class="hljs-function"><span class="hljs-title">authRealm</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AuthRealm();<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> SecurityManager <span class="hljs-function"><span class="hljs-title">securityManager</span>(<span class="hljs-params"></span>)</span> &#123;<br>DefaultWebSecurityManager securityManager = <span class="hljs-keyword">new</span> DefaultWebSecurityManager();<br>securityManager.setRealm(authRealm());<br><span class="hljs-keyword">return</span> securityManager;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 开启Shiro注解模式，可以在Controller中的方法上添加注解</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">securityManager</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="hljs-function"><span class="hljs-title">authorizationAttributeSourceAdvisor</span>(<span class="hljs-params">SecurityManager securityManager</span>)</span>&#123;<br>AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="hljs-keyword">new</span> AuthorizationAttributeSourceAdvisor();<br>authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);<br><span class="hljs-keyword">return</span> authorizationAttributeSourceAdvisor;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="扩展：权限拦截Filter的URL的一些说明"><a href="#扩展：权限拦截Filter的URL的一些说明" class="headerlink" title="扩展：权限拦截Filter的URL的一些说明"></a>扩展：权限拦截Filter的URL的一些说明</h4><p>这里扩展一下<strong>权限拦截Filter的URL的一些说明</strong></p><p>1、URL匹配规则</p><p>（1）“?”：匹配一个字符，如”/admin?”，将匹配“ /admin1”、“/admin2”，但不匹配“/admin”</p><p>（2）“<em>”：匹配零个或多个字符串，如“/admin</em>”，将匹配“ /admin”、“/admin123”，但不匹配“/admin/1”</p><p>（3）“**”：匹配路径中的零个或多个路径，如“/admin/**”，将匹配“/admin/a”、“/admin/a/b”</p><p>2、shiro过滤器</p><table><thead><tr><th>Filter</th><th>解释</th></tr></thead><tbody><tr><td>anon</td><td>无参，开放权限，可以理解为匿名用户或游客</td></tr><tr><td>authc</td><td>无参，需要认证</td></tr><tr><td>logout</td><td>无参，注销，执行后会直接跳转到<code>shiroFilterFactoryBean.setLoginUrl();</code> 设置的 url</td></tr><tr><td>authcBasic</td><td>无参，表示 httpBasic 认证</td></tr><tr><td>user</td><td>无参，表示必须存在用户，当登入操作时不做检查</td></tr><tr><td>ssl</td><td>无参，表示安全的URL请求，协议为 https</td></tr><tr><td>perms[user]</td><td>参数可写多个，表示需要某个或某些权限才能通过，多个参数时写 perms[“user, admin”]，当有多个参数时必须每个参数都通过才算通过</td></tr><tr><td>roles[admin]</td><td>参数可写多个，表示是某个或某些角色才能通过，多个参数时写 roles[“admin，user”]，当有多个参数时必须每个参数都通过才算通过</td></tr><tr><td>rest[user]</td><td>根据请求的方法，相当于 perms[user:method]，其中 method 为 post，get，delete 等</td></tr><tr><td>port[8081]</td><td>当请求的URL端口不是8081时，跳转到<a href="https://link.jianshu.com/?t=schemal://serverName:8081?queryString">schemal://serverName:8081?queryString</a> 其中 schmal 是协议 http 或 https 等等，serverName 是你访问的 Host，8081 是 Port 端口，queryString 是你访问的 URL 里的 ? 后面的参数</td></tr></tbody></table><p>常用的主要就是 anon，authc，user，roles，perms 等</p><p><strong>注意</strong>：anon, authc, authcBasic, user 是第一组认证过滤器，perms, port, rest, roles, ssl 是第二组授权过滤器，要通过授权过滤器，就先要完成登陆认证操作（即先要完成认证才能前去寻找授权) 才能走第二组授权器（例如访问需要 roles 权限的 url，如果还没有登陆的话，会直接跳转到 <code>shiroFilterFactoryBean.setLoginUrl();</code> 设置的 url ）。</p><h3 id="9、自定义Realm"><a href="#9、自定义Realm" class="headerlink" title="9、自定义Realm"></a>9、自定义Realm</h3><p>主要继承<code>AuthorizingRealm</code>，重写里面的方法<code>doGetAuthorizationInfo</code>，<code>doGetAuthenticationInfo</code></p><p>授权：<code>doGetAuthorizationInfo</code></p><p>认证：<code>doGetAuthenticationInfo</code></p><h4 id="AuthRealm-java"><a href="#AuthRealm-java" class="headerlink" title="AuthRealm.java"></a>AuthRealm.java</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> AuthRealm extends AuthorizingRealm &#123;<br><br>    @Resource<br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    @Resource<br>    <span class="hljs-keyword">private</span> RoleService roleService;<br><br>    @Resource<br>    <span class="hljs-keyword">private</span> PermissionService permissionService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 授权</span><br><span class="hljs-comment">     * @param principalCollection</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    @Override<br>    protected AuthorizationInfo <span class="hljs-keyword">do</span><span class="hljs-constructor">GetAuthorizationInfo(PrincipalCollection <span class="hljs-params">principalCollection</span>)</span> &#123;<br>        User user = (User) principalCollection.get<span class="hljs-constructor">PrimaryPrincipal()</span>;<br>        SimpleAuthorizationInfo authorizationInfo = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleAuthorizationInfo()</span>;<br>        <span class="hljs-comment">// 根据用户Id查询角色信息</span><br>        List&lt;Role&gt; roleList = roleService.find<span class="hljs-constructor">RoleByUserId(<span class="hljs-params">user</span>.<span class="hljs-params">getId</span>()</span>);<br>        Set&lt;String&gt; roleSet = <span class="hljs-keyword">new</span> HashSet&lt;&gt;<span class="hljs-literal">()</span>;<br>        List&lt;Integer&gt; roleIds = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>        <span class="hljs-keyword">for</span> (Role role : roleList) &#123;<br>            roleSet.add(role.get<span class="hljs-constructor">Role()</span>);<br>            roleIds.add(role.get<span class="hljs-constructor">Id()</span>);<br>        &#125;<br>        <span class="hljs-comment">// 放入角色信息</span><br>        authorizationInfo.set<span class="hljs-constructor">Roles(<span class="hljs-params">roleSet</span>)</span>;<br>        <span class="hljs-comment">// 放入权限信息</span><br>        List&lt;String&gt; permissionList = permissionService.find<span class="hljs-constructor">ByRoleId(<span class="hljs-params">roleIds</span>)</span>;<br>        authorizationInfo.set<span class="hljs-constructor">StringPermissions(<span class="hljs-params">new</span> HashSet&lt;&gt;(<span class="hljs-params">permissionList</span>)</span>);<br><br>        return authorizationInfo;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 认证</span><br><span class="hljs-comment">     * @param authToken</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     * @throws AuthenticationException</span><br><span class="hljs-comment">     */</span><br>    @Override<br>    protected AuthenticationInfo <span class="hljs-keyword">do</span><span class="hljs-constructor">GetAuthenticationInfo(AuthenticationToken <span class="hljs-params">authToken</span>)</span> throws AuthenticationException &#123;<br>        UsernamePasswordToken token = (UsernamePasswordToken) authToken;<br>        <span class="hljs-comment">// 根据用户名查询用户信息</span><br>        User user = userService.find<span class="hljs-constructor">ByAccount(<span class="hljs-params">token</span>.<span class="hljs-params">getUsername</span>()</span>);<br>        <span class="hljs-keyword">if</span> (user<span class="hljs-operator"> == </span>null) &#123;<br>            return null;<br>        &#125;<br>        return <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleAuthenticationInfo(<span class="hljs-params">user</span>, <span class="hljs-params">user</span>.<span class="hljs-params">getPassword</span>()</span>, get<span class="hljs-constructor">Name()</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10、Contrller层"><a href="#10、Contrller层" class="headerlink" title="10、Contrller层"></a>10、Contrller层</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginController</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 登录操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(value = <span class="hljs-meta-string">&quot;/login&quot;</span>, method = RequestMethod.POST)</span><br>    <span class="hljs-keyword">public</span> ResponseCode login(<span class="hljs-meta">@RequestBody</span> User user) &#123;<br>        Subject userSubject = SecurityUtils.getSubject();<br>        UsernamePasswordToken token = new UsernamePasswordToken(user.getAccount(), user.getPassword());<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 登录验证</span><br>            userSubject.login(token);<br>            <span class="hljs-keyword">return</span> ResponseCode.success();<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException e) &#123;<br>            <span class="hljs-keyword">return</span> ResponseCode.error(StatusEnums.ACCOUNT_UNKNOWN);<br>        &#125; <span class="hljs-keyword">catch</span> (DisabledAccountException e) &#123;<br>            <span class="hljs-keyword">return</span> ResponseCode.error(StatusEnums.ACCOUNT_IS_DISABLED);<br>        &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e) &#123;<br>            <span class="hljs-keyword">return</span> ResponseCode.error(StatusEnums.INCORRECT_CREDENTIALS);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> ResponseCode.error(StatusEnums.SYSTEM_ERROR);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-meta-string">&quot;/login&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> ResponseCode login() &#123;<br>        <span class="hljs-keyword">return</span> ResponseCode.error(StatusEnums.NOT_LOGIN_IN);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-meta-string">&quot;/auth&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> String auth() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;已成功登录&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-meta-string">&quot;/role&quot;</span>)</span><br>    <span class="hljs-meta">@RequiresRoles(<span class="hljs-meta-string">&quot;vip&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> String role() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;测试Vip角色&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-meta-string">&quot;/permission&quot;</span>)</span><br>    <span class="hljs-meta">@RequiresPermissions(value = &#123;<span class="hljs-meta-string">&quot;add&quot;</span>, <span class="hljs-meta-string">&quot;update&quot;</span>&#125;, logical = Logical.AND)</span><br>    <span class="hljs-keyword">public</span> String permission() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;测试Add和Update权限&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 登出</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-meta-string">&quot;/logout&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> ResponseCode logout() &#123;<br>        getSubject().logout();<br>        <span class="hljs-keyword">return</span> ResponseCode.success();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><p>1、登录：<a href="http://localhost:8081/login">http://localhost:8081/login</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;account&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>,<br><span class="hljs-attr">&quot;password&quot;</span>:<span class="hljs-string">&quot;232&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2、其他的是get请求，直接发URL就行啦。</p><p>已通过接口测试，大家可放心食用。</p><p>参考：<a href="https://juejin.im/post/5d27db16e51d454fbe24a717">https://juejin.im/post/5d27db16e51d454fbe24a717</a></p><p>推荐阅读：</p><p>张开涛老的《跟我学Shiro》<a href="https://jinnianshilongnian.iteye.com/blog/2018936">https://jinnianshilongnian.iteye.com/blog/2018936</a></p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Shiro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot2(十一)：Mybatis使用总结（自增长、多条件、批量操作、多表查询等等）</title>
    <link href="/2019/07/10/2019-07-10-mybatis-note/"/>
    <url>/2019/07/10/2019-07-10-mybatis-note/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>上次用Mybatis还是2017年做项目的时候，已经很久过去了。中途再没有用过Mybatis。导致现在学习SpringBoot过程中遇到一些Mybatis的问题，以此做出总结（XML极简模式）。当然只是实用方面的总结，具体就不深究♂了。<strong>这里只总结怎么用！！！</strong></p><h2 id="一、关于Mybatis"><a href="#一、关于Mybatis" class="headerlink" title="一、关于Mybatis"></a>一、关于Mybatis</h2><h3 id="1、什么是Mybatis"><a href="#1、什么是Mybatis" class="headerlink" title="1、什么是Mybatis"></a>1、什么是Mybatis</h3><p>（1）Mybatis是一个半ORM（对象关系映射）框架，它内部封装了JDBC，开发时只需要关注SQL语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。程序员直接编写原生态sql，可以严格控制sql执行性能，灵活度高。</p><p>（2）MyBatis 可以使用 XML 或注解来配置和映射原生信息，将 POJO映射成数据库中的记录，避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</p><p>（3）通过xml 文件或注解的方式将要执行的各种 statement 配置起来，并通过java对象和 statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。（从执行sql到返回result的过程）。</p><h3 id="2、Mybaits的优点"><a href="#2、Mybaits的优点" class="headerlink" title="2、Mybaits的优点"></a>2、Mybaits的优点</h3><p>（1）基于SQL语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL写在XML里，解除sql与程序代码的耦合，便于统一管理；提供XML标签，支持编写动态SQL语句，并可重用。</p><p>（2）与JDBC相比，减少了50%以上的代码量，消除了JDBC大量冗余的代码，不需要手动开关连接；</p><p>（3）很好的与各种数据库兼容（因为MyBatis使用JDBC来连接数据库，所以只要JDBC支持的数据库MyBatis都支持）。</p><p>（4）能够与Spring很好的集成；</p><p>（5）提供映射标签，支持对象与数据库的ORM字段关系映射；提供对象关系映射标签，支持对象关系组件维护。</p><h3 id="3、MyBatis框架的缺点"><a href="#3、MyBatis框架的缺点" class="headerlink" title="3、MyBatis框架的缺点"></a>3、MyBatis框架的缺点</h3><p>（1）SQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求。</p><p>（2）SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。</p><h3 id="4、MyBatis框架适用场合"><a href="#4、MyBatis框架适用场合" class="headerlink" title="4、MyBatis框架适用场合"></a>4、MyBatis框架适用场合</h3><p>（1）MyBatis专注于SQL本身，是一个足够灵活的DAO层解决方案。</p><p>（2）对性能的要求很高，或者需求变化较多的项目，如互联网项目，MyBatis将是不错的选择。</p><h3 id="5、MyBatis与Hibernate有哪些不同"><a href="#5、MyBatis与Hibernate有哪些不同" class="headerlink" title="5、MyBatis与Hibernate有哪些不同"></a>5、MyBatis与Hibernate有哪些不同</h3><p>（1）Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句。</p><p>（2）Mybatis直接编写原生态sql，可以严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，因为这类软件需求变化频繁，一但需求变化要求迅速输出成果。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件，则需要自定义多套sql映射文件，工作量大。 </p><p>（3）Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件，如果用hibernate开发可以节省很多代码，提高效率。 </p><hr><h2 id="二、使用总结"><a href="#二、使用总结" class="headerlink" title="二、使用总结"></a>二、使用总结</h2><blockquote><p>以下的用法实例建议将源码clone到本地运行，全部使用的是<strong>XMl极简模式</strong></p><p>因为我没有贴出完整的代码，只贴出关键处理的部分</p><p>所有测试都已经通过Postman发送请求测试。</p><p>不过我建议各位看官可以用下IDEA的插件：<strong>Restfultookit</strong>，非常好用的，根据controller定义的url地址快捷生成请求报文，可以直接测试。对于测试报文来说这个插件简直无敌！强烈推荐（已经安装的当我没说）</p></blockquote><hr><h3 id="1、Java，JDBC与MySQL数据类型对照数据类型关系表"><a href="#1、Java，JDBC与MySQL数据类型对照数据类型关系表" class="headerlink" title="1、Java，JDBC与MySQL数据类型对照数据类型关系表"></a>1、Java，JDBC与MySQL数据类型对照数据类型关系表</h3><p>任何MySQL数据类型都可以转换为Java数据类型。</p><p>如果选择的Java数值数据类型的精度或容量低于要转换为的MySQL数据类型，则可能会出现舍入，溢出或精度损失。</p><p>下表列出了始终保证有效的转换。 第一列列出了一种或多种MySQL数据类型，第二列列出了可以转换MySQL类型的一种或多种Java类型。</p><table><thead><tr><th>These MySQL Data Types</th><th>Can always be converted to these Java types</th></tr></thead><tbody><tr><td><code>CHAR, VARCHAR, BLOB, TEXT, ENUM, and SET</code></td><td><code>java.lang.String, java.io.InputStream, java.io.Reader, java.sql.Blob, java.sql.Clob</code></td></tr><tr><td><code>FLOAT, REAL, DOUBLE PRECISION, NUMERIC, DECIMAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT</code></td><td><code>java.lang.String, java.lang.Short, java.lang.Integer, java.lang.Long, java.lang.Double, java.math.BigDecimal</code></td></tr><tr><td><code>DATE, TIME, DATETIME, TIMESTAMP</code></td><td><code>java.lang.String, java.sql.Date, java.sql.Timestamp</code></td></tr></tbody></table><p>ResultSet.getObject（）方法使用MySQL和Java类型之间的类型转换，遵循适当的JDBC规范。 ResultSetMetaData.GetColumnTypeName（）和ResultSetMetaData.GetColumnClassName（）返回的值如下表所示。 有关JDBC类型的更多信息，请参阅java.sql.Types类的参考。</p><table><thead><tr><th>MySQL Type Name</th><th>Return value of <code>GetColumnTypeName</code></th><th>Return value of <code>GetColumnClassName</code></th></tr></thead><tbody><tr><td><code>BIT(1)</code></td><td><code>BIT</code></td><td><code>java.lang.Boolean</code></td></tr><tr><td><code>BIT( &gt; 1)</code></td><td><code>BIT</code></td><td><code>byte[]</code></td></tr><tr><td><code>TINYINT</code></td><td><code>TINYINT</code></td><td><code>java.lang.Boolean</code> if the configuration property <code>tinyInt1isBit</code> is set to <code>true</code> (the default) and the storage size is 1, or <code>java.lang.Integer</code> if not.</td></tr><tr><td><code>BOOL</code>, <code>BOOLEAN</code></td><td><code>TINYINT</code></td><td>See <code>TINYINT</code>, above as these are aliases for <code>TINYINT(1)</code>, currently.</td></tr><tr><td><code>SMALLINT[(M)] [UNSIGNED]</code></td><td><code>SMALLINT [UNSIGNED]</code></td><td><code>java.lang.Integer</code> (regardless of whether it is <code>UNSIGNED</code> or not)</td></tr><tr><td><code>MEDIUMINT[(M)] [UNSIGNED]</code></td><td><code>MEDIUMINT [UNSIGNED]</code></td><td><code>java.lang.Integer</code> (regardless of whether it is <code>UNSIGNED</code> or not)</td></tr><tr><td><code>INT,INTEGER[(M)] [UNSIGNED]</code></td><td><code>INTEGER [UNSIGNED]</code></td><td><code>java.lang.Integer</code>, if <code>UNSIGNED</code> <code>java.lang.Long</code></td></tr><tr><td><code>BIGINT[(M)] [UNSIGNED]</code></td><td><code>BIGINT [UNSIGNED]</code></td><td><code>java.lang.Long</code>, if UNSIGNED <code>java.math.BigInteger</code></td></tr><tr><td><code>FLOAT[(M,D)]</code></td><td><code>FLOAT</code></td><td><code>java.lang.Float</code></td></tr><tr><td><code>DOUBLE[(M,B)]</code></td><td><code>DOUBLE</code></td><td><code>java.lang.Double</code></td></tr><tr><td><code>DECIMAL[(M[,D])]</code></td><td><code>DECIMAL</code></td><td><code>java.math.BigDecimal</code></td></tr><tr><td><code>DATE</code></td><td><code>DATE</code></td><td><code>java.sql.Date</code></td></tr><tr><td><code>DATETIME</code></td><td><code>DATETIME</code></td><td><code>java.sql.Timestamp</code></td></tr><tr><td><code>TIMESTAMP[(M)]</code></td><td><code>TIMESTAMP</code></td><td><code>java.sql.Timestamp</code></td></tr><tr><td><code>TIME</code></td><td><code>TIME</code></td><td><code>java.sql.Time</code></td></tr><tr><td>`YEAR[(2</td><td>4)]`</td><td><code>YEAR</code></td></tr><tr><td><code>CHAR(M)</code></td><td><code>CHAR</code></td><td><code>java.lang.String</code> (unless the character set for the column is <code>BINARY</code>, then <code>byte[]</code> is returned.</td></tr><tr><td><code>VARCHAR(M) [BINARY]</code></td><td><code>VARCHAR</code></td><td><code>java.lang.String</code> (unless the character set for the column is <code>BINARY</code>, then <code>byte[]</code> is returned.</td></tr><tr><td><code>BINARY(M)</code></td><td><code>BINARY</code></td><td><code>byte[]</code></td></tr><tr><td><code>VARBINARY(M)</code></td><td><code>VARBINARY</code></td><td><code>byte[]</code></td></tr><tr><td><code>TINYBLOB</code></td><td><code>TINYBLOB</code></td><td><code>byte[]</code></td></tr><tr><td><code>TINYTEXT</code></td><td><code>VARCHAR</code></td><td><code>java.lang.String</code></td></tr><tr><td><code>BLOB</code></td><td><code>BLOB</code></td><td><code>byte[]</code></td></tr><tr><td><code>TEXT</code></td><td><code>VARCHAR</code></td><td><code>java.lang.String</code></td></tr><tr><td><code>MEDIUMBLOB</code></td><td><code>MEDIUMBLOB</code></td><td><code>byte[]</code></td></tr><tr><td><code>MEDIUMTEXT</code></td><td><code>VARCHAR</code></td><td><code>java.lang.String</code></td></tr><tr><td><code>LONGBLOB</code></td><td><code>LONGBLOB</code></td><td><code>byte[]</code></td></tr><tr><td><code>LONGTEXT</code></td><td><code>VARCHAR</code></td><td><code>java.lang.String</code></td></tr><tr><td><code>ENUM(&#39;value1&#39;,&#39;value2&#39;,...)</code></td><td><code>CHAR</code></td><td><code>java.lang.String</code></td></tr><tr><td><code>SET(&#39;value1&#39;,&#39;value2&#39;,...)</code></td><td><code>CHAR</code></td><td><code>java.lang.String</code></td></tr></tbody></table><p>参考：<a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-type-conversions.html">6.5 Java, JDBC, and MySQL Types</a></p><h3 id="2、当实体类中的属性名和表中的字段名不一样，怎么办"><a href="#2、当实体类中的属性名和表中的字段名不一样，怎么办" class="headerlink" title="2、当实体类中的属性名和表中的字段名不一样，怎么办"></a>2、当实体类中的属性名和表中的字段名不一样，怎么办</h3><blockquote><p>其一：定义字段别名，使之与实体类属性名一致。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 查询用户信息列表1 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserList1&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.niaobulashi.entity.SysUser&quot;</span>&gt;</span><br>   SELECT<br>u.user_id, u.username userNameStr, u.password, u.salt, u.email,<br>u.mobile, u.status, u.dept_id, u.create_time<br>FROM<br>sys_user u<br>where 1=1<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>其二：通过resultMap映射字段名和实体类属性名保持一致</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sysUserInfoMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.niaobulashi.entity.SysUser&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 用户Id属性来映射主键字段 userId--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;userId&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 用result属性来映射非主键字段，property为实体类属性名，column为数据表中的属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userNameStr&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--用户Vo--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectSysUserVo&quot;</span>&gt;</span><br>SELECT<br>u.user_id, u.username, u.password, u.salt, <br>u.email, u.mobile, u.status, u.dept_id, u.create_time<br>FROM<br>sys_user u<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 查询用户信息列表2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserList2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;sysUserInfoMap&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectSysUserVo&quot;</span>/&gt;</span><br>    where 1=1<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>推荐使用第二种。</p><h3 id="2、获取Mybatis自增长主键"><a href="#2、获取Mybatis自增长主键" class="headerlink" title="2、获取Mybatis自增长主键"></a>2、获取Mybatis自增长主键</h3><p>思路：<code>useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;</code></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!-- 获取自动生成的(主)键值 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertSysTest&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.niaobulashi.model.SysTest&quot;</span></span></span><br><span class="xml">useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;</span><br><span class="xml">INSERT INTO sys_test(name, age, nick_name) VALUES (#</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;age&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;nickName&#125;</span><span class="xml">)</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>获取自增长主键</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取自增长主键ID</span><br><span class="hljs-comment"> * @param sysTest</span><br><span class="hljs-comment"> * @throws Exception</span><br><span class="hljs-comment"> */</span><br>@<span class="hljs-constructor">RequestMapping(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;/add&quot;</span>, <span class="hljs-params">method</span> = RequestMethod.POST)</span><br><span class="hljs-keyword">private</span> void add<span class="hljs-constructor">SysTest(@RequestBody SysTest <span class="hljs-params">sysTest</span>)</span> throws Exception &#123;<br><span class="hljs-keyword">try</span> &#123;<br>SysTest sysTestParam = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SysTest()</span>;<br>        <span class="hljs-comment">// 将传入参数Copy到新申明的对象中，这样才能从sysTestParam中获取到自增长主键</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanUtils</span>.</span></span>copy<span class="hljs-constructor">Properties(<span class="hljs-params">sysTest</span>, <span class="hljs-params">sysTestParam</span>)</span>;<br>this.sysTestService.insert<span class="hljs-constructor">SysTest(<span class="hljs-params">sysTestParam</span>)</span>;<br>log.info(<span class="hljs-string">&quot;获取自增长主键为：&quot;</span> + sysTestParam.get<span class="hljs-constructor">Id()</span>);<br>&#125; catch (Exception e) &#123;<br>e.print<span class="hljs-constructor">StackTrace()</span>;<br>throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">Exception()</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、模糊查询"><a href="#3、模糊查询" class="headerlink" title="3、模糊查询"></a>3、模糊查询</h3><p>使用<code>%&quot;#&#123;value&#125;&quot;%&quot;</code>方法会引起SQL注入</p><p>推荐使用：**<code>CONCAT(&#39;%&#39;,#&#123;value&#125;,&#39;%&#39;)</code>**</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!--用户Vo--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectSysUserVo&quot;</span>&gt;</span></span><br><span class="xml">SELECT</span><br><span class="xml">u.user_id, u.username, u.password, u.salt, </span><br><span class="xml">u.email, u.mobile, u.status, u.dept_id, u.create_time</span><br><span class="xml">FROM</span><br><span class="xml">sys_user u</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- 查询用户信息列表2 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserListByName&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;sysUserInfoMap&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectSysUserVo&quot;</span>/&gt;</span></span><br><span class="xml">where 1=1</span><br><span class="xml">and u.username like concat(&#x27;%&#x27;,#</span><span class="hljs-template-variable">&#123;userName&#125;</span><span class="xml">,&#x27;%&#x27;)</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="4、多条件查询"><a href="#4、多条件查询" class="headerlink" title="4、多条件查询"></a>4、多条件查询</h3><p>1、使用@Param</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">List&lt;SysUser&gt; queryUserByNameAndEmail(<span class="hljs-symbol">@Param</span>(<span class="hljs-string">&quot;userName&quot;</span>) <span class="hljs-built_in">String</span> userName, <span class="hljs-symbol">@Param</span>(<span class="hljs-string">&quot;email&quot;</span>) <span class="hljs-built_in">String</span> email)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!--使用用户名和邮箱查询用户信息--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserByNameAndEmail&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;sysUserInfoMap&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectSysUserVo&quot;</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName != null and userName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="xml">            AND u.username like concat(&#x27;%&#x27;,#</span><span class="hljs-template-variable">&#123;userName&#125;</span><span class="xml">,&#x27;%&#x27;)</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="xml">            AND u.email like concat(&#x27;%&#x27;,#</span><span class="hljs-template-variable">&#123;email&#125;</span><span class="xml">,&#x27;%&#x27;)</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>2、使用JavaBean</p><p>这里给了一些常见的查询条件：日期、金额。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">List&lt;SysUser&gt; query<span class="hljs-constructor">UserByUser(SysUser <span class="hljs-params">sysUser</span>)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserByUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.niaobulashi.model.SysUser&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;sysUserInfoMap&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectSysUserVo&quot;</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span></span><br><span class="xml">1=1</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userNameStr != null and userNameStr != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="xml">AND u.username like concat(&#x27;%&#x27;, #</span><span class="hljs-template-variable">&#123;userNameStr&#125;</span><span class="xml">, &#x27;%&#x27;)</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="xml">AND u.email like concat(&#x27;%&#x27;, #</span><span class="hljs-template-variable">&#123;email&#125;</span><span class="xml">, &#x27;%&#x27;)</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;mobile != null and mobile != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="xml">AND u.mobile like concat(&#x27;%&#x27;, #</span><span class="hljs-template-variable">&#123;mobile&#125;</span><span class="xml">, &#x27;%&#x27;)</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;createDateStart != null and createDateStart != &#x27;&#x27;&quot;</span>&gt;</span>/*开始时间检索*/</span><br><span class="xml">AND date_format(u.create_time, &#x27;%y%m%d&#x27;) &lt;![CDATA[ &gt;= ]]&gt; date_format(#</span><span class="hljs-template-variable">&#123;createDateStart&#125;</span><span class="xml">, &#x27;%y%m%d&#x27;)</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;createDateEnd != null and createDateEnd != &#x27;&#x27;&quot;</span>&gt;</span>/*结束时间检索*/</span><br><span class="xml">AND date_format(u.create_time, &#x27;%y%m%d&#x27;) &lt;![CDATA[ &lt;= ]]&gt; date_format(#</span><span class="hljs-template-variable">&#123;createDateEnd&#125;</span><span class="xml">, &#x27;%y%m%d&#x27;)</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;amtFrom != null and amtFrom != &#x27;&#x27;&quot;</span>&gt;</span>/*起始金额*/</span><br><span class="xml">AND u.amt &lt;![CDATA[ &gt;= ]]&gt; #</span><span class="hljs-template-variable">&#123;amtFrom&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;amtTo != null and amtTo != &#x27;&#x27;&quot;</span>&gt;</span>/*截至金额*/</span><br><span class="xml">AND u.amt &lt;![CDATA[ &lt;= ]]&gt; #</span><span class="hljs-template-variable">&#123;amtTo&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="5、批量删除foreach"><a href="#5、批量删除foreach" class="headerlink" title="5、批量删除foreach"></a>5、批量删除foreach</h3><p>xml部分</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">delete</span> id=&quot;deleteSysTestByIds&quot; parameterType=&quot;String&quot;&gt;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> sys_test <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span><br>&lt;<span class="hljs-keyword">foreach</span> collection=&quot;array&quot; item=&quot;id&quot; <span class="hljs-keyword">open</span>=&quot;(&quot; separator=&quot;,&quot; <span class="hljs-keyword">close</span>=&quot;)&quot;&gt;<br>#&#123;id&#125;<br>&lt;/<span class="hljs-keyword">foreach</span>&gt;<br>&lt;/<span class="hljs-keyword">delete</span>&gt;<br></code></pre></td></tr></table></figure><p>其中foreach包含属性讲解：</p><ul><li>open：整个循环内容开头的字符串。</li><li>close：整个循环内容结尾的字符串。</li><li>separator：每次循环的分隔符。</li><li>item：从迭代对象中取出的每一个值。</li><li>index：如果参数为集合或者数组，该值为当前索引值，如果参数为Map类型时，该值为Map的key。</li><li>collection：要迭代循环的属性名。</li></ul><p>dao部分</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteSysTestByIds</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] ids)</span></span>;<br></code></pre></td></tr></table></figure><p>service层</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Transactional</span>(rollbackFor = Exception.class)<br><span class="hljs-variable">@Override</span><br>public int deleteDictDataByIds(String ids) throws Exception&#123;<br><span class="hljs-selector-tag">try</span> &#123;<br><span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">sysTestDao</span><span class="hljs-selector-class">.deleteSysTestByIds</span>(ids.split(<span class="hljs-string">&quot;,&quot;</span>));<br>&#125; <span class="hljs-selector-tag">catch</span> (Exception e) &#123;<br><span class="hljs-selector-tag">e</span><span class="hljs-selector-class">.printStackTrace</span>();<br><span class="hljs-selector-tag">throw</span> <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">Exception</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>controller</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">RequestMapping(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;/deleteIds&quot;</span>, <span class="hljs-params">method</span> = RequestMethod.POST)</span><br>public <span class="hljs-built_in">int</span> delete<span class="hljs-constructor">Ids(String <span class="hljs-params">ids</span>)</span> throws Exception &#123;<br><span class="hljs-keyword">try</span> &#123;<br>return sysTestService.delete<span class="hljs-constructor">DictDataByIds(<span class="hljs-params">ids</span>)</span>;<br>&#125; catch (Exception e) &#123;<br>e.print<span class="hljs-constructor">StackTrace()</span>;<br>throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">Exception()</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>请求URL：<a href="http://localhost:8081/test/deleteIds">http://localhost:8081/test/deleteIds</a></p><p>请求报文：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ids</span> : <span class="hljs-number">1</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="6、多表查询association和collection"><a href="#6、多表查询association和collection" class="headerlink" title="6、多表查询association和collection"></a>6、多表查询association和collection</h3><p>多表查询，多表肯定首先我们先要弄清楚两个关键字：</p><p><strong>association: 一对一关联(has one)<strong>；</strong>collection:一对多关联(has many)</strong></p><p>的各个属性的含义：</p><table><thead><tr><th>association和collection</th></tr></thead><tbody><tr><td>property：映射数据库列的字段或属性。<br/>colum：数据库的列名或者列标签别名。<br/>javaTyp：完整java类名或别名。<br/>jdbcType：支持的JDBC类型列表列出的JDBC类型。这个属性只在insert,update或delete的时候针对允许空的列有用。<br/>resultMap：一个可以映射联合嵌套结果集到一个适合的对象视图上的ResultMap。这是一个替代的方式去调用另一个select语句。</td></tr></tbody></table><p>这样说起来可能不好理解，我举个栗子</p><p>涉及到这三张表，我粗略的画了一下：</p><table><thead><tr><th>-</th><th>用户表</th><th>部门表</th><th>角色表</th></tr></thead><tbody><tr><td>表名</td><td>sys_user</td><td>sys_dept</td><td>sys_role</td></tr><tr><td>与用户表关系</td><td>-</td><td>一对一（一个用户只属于一个部门）</td><td>一对多（一个用户可以有多个角色）</td></tr></tbody></table><p>于是用户表关联部门表，我们用<strong>association</strong></p><p>用户表关联角色表，我们用<strong>collection</strong></p><p>当然了，能用得这么蛋疼关键字的前提条件是，你要查询关联的字段，如果你只是关联不查它，那就不需要用这玩意。。</p><p>辣么，我结合这两个多表查询的关键字<strong>association</strong>、<strong>collection</strong>举个栗子。</p><h4 id="1、用户表实体类"><a href="#1、用户表实体类" class="headerlink" title="1、用户表实体类"></a>1、用户表实体类</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs haxe">@Data<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysUser</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Serializable</span></span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final long serialVersionUID = <span class="hljs-number">1</span>L;<br><span class="hljs-comment">/** 用户ID */</span><br><span class="hljs-keyword">private</span> Long userId;<br><span class="hljs-comment">/** 用户名 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> userNameStr;<br><span class="hljs-comment">/** 密码 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> password;<br><span class="hljs-comment">/** 盐 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> salt;<br><span class="hljs-comment">/** 邮箱 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> email;<br><span class="hljs-comment">/** 手机号 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> mobile;<br><span class="hljs-comment">/** 状态  0：禁用   1：正常 */</span><br><span class="hljs-keyword">private</span> Integer status;<br><span class="hljs-comment">/** 部门Id */</span><br><span class="hljs-keyword">private</span> Long deptId;<br><span class="hljs-comment">/** 创建时间 */</span><br><span class="hljs-keyword">private</span> Date createTime;<br><span class="hljs-comment">/****************关联部分**************</span><br><span class="hljs-comment">/** 部门 */</span><br><span class="hljs-keyword">private</span> SysDept dept;<br><span class="hljs-comment">/** 角色集合 */</span><br><span class="hljs-keyword">private</span> List&lt;SysRole&gt; roles;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、部门表实体类"><a href="#2、部门表实体类" class="headerlink" title="2、部门表实体类"></a>2、部门表实体类</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe">@Data<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysDept</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Serializable</span></span> </span>&#123;<br>    <span class="hljs-comment">/** 部门ID */</span><br>    <span class="hljs-keyword">private</span> Long deptId;<br>    <span class="hljs-comment">/** 部门名称 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> deptName;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、角色表实体类"><a href="#3、角色表实体类" class="headerlink" title="3、角色表实体类"></a>3、角色表实体类</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe">@Data<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysRole</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Serializable</span></span> </span>&#123;<br>    <span class="hljs-comment">/** 角色ID */</span><br>    <span class="hljs-keyword">private</span> Long roleId;<br>    <span class="hljs-comment">/** 角色名称 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> roleName;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、Mapper、Service部分（略）"><a href="#4、Mapper、Service部分（略）" class="headerlink" title="4、Mapper、Service部分（略）"></a>4、Mapper、Service部分（略）</h4><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">List<span class="hljs-variable">&lt;SysUser&gt;</span> queryUserRoleDept(SysUser <span class="hljs-keyword">user</span>);<br></code></pre></td></tr></table></figure><h4 id="5、XML部分"><a href="#5、XML部分" class="headerlink" title="5、XML部分"></a>5、XML部分</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!--查看用户部门和角色信息--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserRoleDept&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.niaobulashi.model.SysUser&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserResult&quot;</span>&gt;</span></span><br><span class="xml">select u.user_id, u.username, u.dept_id, d.dept_name, r.role_id, r.role_name</span><br><span class="xml">from sys_user u</span><br><span class="xml">LEFT JOIN sys_dept d on d.dept_id = u.dept_id</span><br><span class="xml">LEFT JOIN sys_user_role ur on ur.user_id = u.user_id</span><br><span class="xml">LEFT JOIN sys_role r on r.role_id = ur.role_id</span><br><span class="xml">WHERE 1=1</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userId != null and userId != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="xml">AND u.user_id = #</span><span class="hljs-template-variable">&#123;userId&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>UserResult部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--用户表--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.niaobulashi.model.SysUser&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserResult&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userNameStr&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;login_name&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;salt&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;mobile&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;mobile&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;status&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;com.niaobulashi.model.SysDept&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;DeptResult&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roles&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;java.util.List&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;RoleResult&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--部门表--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DeptResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.niaobulashi.model.SysDept&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--角色表--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;RoleResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.niaobulashi.model.SysRole&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;role_id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;role_name&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6、Controller部分"><a href="#6、Controller部分" class="headerlink" title="6、Controller部分"></a>6、Controller部分</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">RequestMapping(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;/queryUserRoleDept&quot;</span>, <span class="hljs-params">method</span> = RequestMethod.POST)</span><br><span class="hljs-keyword">private</span> List&lt;SysUser&gt; query<span class="hljs-constructor">UserRoleDept(@RequestBody SysUser <span class="hljs-params">sysUser</span>)</span> &#123;<br>List&lt;SysUser&gt; userList = sysUserService.query<span class="hljs-constructor">UserRoleDept(<span class="hljs-params">sysUser</span>)</span>;<br>return userList;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7、测试部分"><a href="#7、测试部分" class="headerlink" title="7、测试部分"></a>7、测试部分</h4><p>请求结果：</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/07/3893102344.png" alt="多表关联查询测试报文"></p><h3 id="7、分页插件"><a href="#7、分页插件" class="headerlink" title="7、分页插件"></a>7、分页插件</h3><p>使用分页插件<code>PageHelper Spring Boot Starter</code>，引入maven依赖：<a href="https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter">PageHelper Spring Boot Starter1.2.12</a></p><p>application.yml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># PageHelper分页插件</span><br><span class="hljs-attr">pagehelper:</span><br>  <span class="hljs-attr">helperDialect:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">reasonable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">supportMethodsArguments:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">params:</span> <span class="hljs-string">count=countSql</span><br></code></pre></td></tr></table></figure><p>controller</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">RequestMapping(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;/queryUserByPage&quot;</span>, <span class="hljs-params">method</span> = RequestMethod.GET)</span><br><span class="hljs-keyword">private</span> PageInfo query<span class="hljs-constructor">UserByPage(Integer <span class="hljs-params">currentPage</span>, Integer <span class="hljs-params">pageSize</span>)</span> &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PageHelper</span>.</span></span>start<span class="hljs-constructor">Page(<span class="hljs-params">currentPage</span>, <span class="hljs-params">pageSize</span>)</span>;<br>List&lt;SysUser&gt; userList = sysUserService.query<span class="hljs-constructor">UserRoleDept(<span class="hljs-params">new</span> SysUser()</span>);<br>PageInfo info=<span class="hljs-keyword">new</span> <span class="hljs-constructor">PageInfo(<span class="hljs-params">userList</span>)</span>;<br>return info;<br>&#125;<br></code></pre></td></tr></table></figure><p>目前暂时写到这里，本篇会持续补充</p><p>To be continued</p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot2(十)：RabbitMQ 详解</title>
    <link href="/2019/07/08/2019-07-08-springboot-rabbitMQ/"/>
    <url>/2019/07/08/2019-07-08-springboot-rabbitMQ/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>RabbitMQ 即一个消息队列，主要是用来实现应用程序的异步和解耦，同时也能起到消息缓冲，消息分发的作用。</p><p>消息中间件在互联网公司的使用中越来越多，刚才还看到新闻阿里将 RocketMQ 捐献给了 Apache，当然了今天的主角还是讲 RabbitMQ。消息中间件最主要的作用是解耦，中间件最标准的用法是生产者生产消息传送到队列，消费者从队列中拿取消息并处理，生产者不用关心是谁来消费，消费者不用关心谁在生产消息，从而达到解耦的目的。在分布式的系统中，消息队列也会被用在很多其它的方面，比如：分布式事务的支持，RPC 的调用等等。</p><p>以前一直使用的是 ActiveMQ，在实际的生产使用中也出现了一些小问题，在网络查阅了很多的资料后，决定尝试使用 RabbitMQ 来替换 ActiveMQ，RabbitMQ 的高可用性、高性能、灵活性等一些特点吸引了我们，查阅了一些资料整理出此文。</p><h2 id="RabbitMQ-介绍"><a href="#RabbitMQ-介绍" class="headerlink" title="RabbitMQ 介绍"></a>RabbitMQ 介绍</h2><p>RabbitMQ 是实现 AMQP（高级消息队列协议）的消息中间件的一种，最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。 RabbitMQ 主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。</p><p>AMQP，即 Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP 的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p><p>RabbitMQ 是一个开源的 AMQP 实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP 等，支持 AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。</p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p>通常我们谈到队列服务, 会有三个概念： 发消息者、队列、收消息者，RabbitMQ 在这个基本概念之上, 多做了一层抽象, 在发消息者和 队列之间, 加入了交换器 (Exchange). 这样发消息者和队列就没有直接联系, 转而变成发消息者把消息给交换器, 交换器根据调度策略再把消息再给队列。</p><p><img src="http://www.itmind.net/assets/images/2016/RabbitMQ01.png" alt="img"></p><ul><li>左侧 P 代表 生产者，也就是往 RabbitMQ 发消息的程序。</li><li>中间即是 RabbitMQ，<em>其中包括了 交换机 和 队列。</em></li><li>右侧 C 代表 消费者，也就是往 RabbitMQ 拿消息的程序。</li></ul><p>那么，<em>其中比较重要的概念有 4 个，分别为：虚拟主机，交换机，队列，和绑定。</em></p><ul><li>虚拟主机：一个虚拟主机持有一组交换机、队列和绑定。为什么需要多个虚拟主机呢？很简单， RabbitMQ 当中，<em>用户只能在虚拟主机的粒度进行权限控制。</em> 因此，如果需要禁止A组访问B组的交换机/队列/绑定，必须为A和B分别创建一个虚拟主机。每一个 RabbitMQ 服务器都有一个默认的虚拟主机“/”。</li><li>交换机：<em>Exchange 用于转发消息，但是它不会做存储</em> ，如果没有 Queue bind 到 Exchange 的话，它会直接丢弃掉 Producer 发送过来的消息。 这里有一个比较重要的概念：<strong>路由键</strong> 。消息到交换机的时候，交互机会转发到对应的队列中，那么究竟转发到哪个队列，就要根据该路由键。</li><li>绑定：也就是交换机需要和队列相绑定，这其中如上图所示，是多对多的关系。</li></ul><h3 id="交换机-Exchange"><a href="#交换机-Exchange" class="headerlink" title="交换机(Exchange)"></a>交换机(Exchange)</h3><p>交换机的功能主要是接收消息并且转发到绑定的队列，交换机不存储消息，在启用ack模式后，交换机找不到队列会返回错误。交换机有四种类型：Direct, topic, Headers and Fanout</p><ul><li>Direct：direct 类型的行为是”先匹配, 再投送”. 即在绑定时设定一个 <strong>routing_key</strong>, 消息的<strong>routing_key</strong> 匹配时, 才会被交换器投送到绑定的队列中去.</li><li>Topic：按规则转发消息（最灵活）</li><li>Headers：设置 header attribute 参数类型的交换机</li><li>Fanout：转发消息到所有绑定队列</li></ul><p><strong>Direct Exchange</strong></p><p>Direct Exchange 是 RabbitMQ 默认的交换机模式，也是最简单的模式，根据key全文匹配去寻找队列。<br><img src="http://www.itmind.net/assets/images/2016/rabbitMq_direct.png" alt="img"></p><p>第一个 X - Q1 就有一个 binding key，名字为 orange； X - Q2 就有 2 个 binding key，名字为 black 和 green。<em>当消息中的 路由键 和 这个 binding key 对应上的时候，那么就知道了该消息去到哪一个队列中。</em></p><p>Ps：为什么 X 到 Q2 要有 black，green，2个 binding key呢，一个不就行了吗？ - 这个主要是因为可能又有 Q3，而Q3只接受 black 的信息，而Q2不仅接受black 的信息，还接受 green 的信息。</p><p><strong>Topic Exchange</strong></p><p><em>Topic Exchange 转发消息主要是根据通配符。</em> 在这种交换机下，队列和交换机的绑定会定义一种路由模式，那么，通配符就要在这种路由模式和路由键之间匹配后交换机才能转发消息。</p><p>在这种交换机模式下：</p><ul><li>路由键必须是一串字符，用句号（<code>.</code>） 隔开，比如说 agreements.us，或者 agreements.eu.stockholm 等。</li><li>路由模式必须包含一个 星号（<code>*</code>），主要用于匹配路由键指定位置的一个单词，比如说，一个路由模式是这样子：agreements..b.*，那么就只能匹配路由键是这样子的：第一个单词是 agreements，第四个单词是 b。 井号（#）就表示相当于一个或者多个单词，例如一个匹配模式是 agreements.eu.berlin.#，那么，以agreements.eu.berlin 开头的路由键都是可以的。</li></ul><p>具体代码发送的时候还是一样，第一个参数表示交换机，第二个参数表示 routing key，第三个参数即消息。如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">rabbitTemplate</span><span class="hljs-selector-class">.convertAndSend</span>(<span class="hljs-string">&quot;testTopicExchange&quot;</span>,<span class="hljs-string">&quot;key1.a.c.key2&quot;</span>, <span class="hljs-string">&quot; this is  RabbitMQ!&quot;</span>);<br></code></pre></td></tr></table></figure><p>topic 和 direct 类似, 只是匹配上支持了”模式”, 在”点分”的 routing_key 形式中, 可以使用两个通配符:</p><ul><li><code>*</code>表示一个词.</li><li><code>#</code>表示零个或多个词.</li></ul><p><strong>Headers Exchange</strong></p><p>headers 也是根据规则匹配, 相较于 direct 和 topic 固定地使用 routing_key , headers 则是一个自定义匹配规则的类型. 在队列与交换器绑定时, 会设定一组键值对规则, 消息中也包括一组键值对( headers 属性), 当这些键值对有一对, 或全部匹配时, 消息被投送到对应队列.</p><p><strong>Fanout Exchange</strong></p><p>Fanout Exchange 消息广播的模式，不管路由键或者是路由模式，<em>会把消息发给绑定给它的全部队列</em>，如果配置了 routing_key 会被忽略。</p><h2 id="Spring-Boot-集成-RabbitMQ"><a href="#Spring-Boot-集成-RabbitMQ" class="headerlink" title="Spring Boot 集成 RabbitMQ"></a>Spring Boot 集成 RabbitMQ</h2><p>Spring Boot 集成 RabbitMQ 非常简单，如果只是简单的使用配置非常少，Spring Boot 提供了<code>spring-boot-starter-amqp</code> 项目对消息各种支持。</p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>1、配置 Pom 包，主要是添加 <code>spring-boot-starter-amqp</code> 的支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、配置文件</p><p>配置 RabbitMQ 的安装地址、端口以及账户信息</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.application.name</span>=Spring-boot-rabbitmq<br><br><span class="hljs-attr">spring.rabbitmq.host</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">0.86</span><br><span class="hljs-attr">spring.rabbitmq.port</span>=<span class="hljs-number">5672</span><br><span class="hljs-attr">spring.rabbitmq.username</span>=admin<br><span class="hljs-attr">spring.rabbitmq.password</span>=<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>3、队列配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">Queue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3、发送者</p><p>rabbitTemplate 是 Spring Boot 提供的默认实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloSender</span> </span>&#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> AmqpTemplate rabbitTemplate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">send</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">String</span> context = <span class="hljs-string">&quot;hello &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>System.out.println(<span class="hljs-string">&quot;Sender : &quot;</span> + context);<br><span class="hljs-built_in">this</span>.rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;hello&quot;</span>, context);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>4、接收者</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Component</span><br><span class="hljs-variable">@RabbitListener</span>(queues = <span class="hljs-string">&quot;hello&quot;</span>)<br>public class HelloReceiver &#123;<br><br>    <span class="hljs-variable">@RabbitHandler</span><br>    public void process(String hello) &#123;<br>        <span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>(<span class="hljs-string">&quot;Receiver  : &quot;</span> + hello);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>5、测试</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RunWith</span>(SpringRunner.class)<br><span class="hljs-variable">@SpringBootTest</span><br>public class RabbitMqHelloTest &#123;<br><br><span class="hljs-variable">@Autowired</span><br>private HelloSender helloSender;<br><br><span class="hljs-variable">@Test</span><br>public void hello() throws Exception &#123;<br><span class="hljs-selector-tag">helloSender</span><span class="hljs-selector-class">.send</span>();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意，发送者和接收者的 queue name 必须一致，不然不能接收</p></blockquote><h3 id="多对多使用"><a href="#多对多使用" class="headerlink" title="多对多使用"></a>多对多使用</h3><p>一个发送者，N 个接收者或者 N 个发送者和 N 个接收者会出现什么情况呢？</p><p><strong>一对多发送</strong></p><p>对上面的代码进行了小改造，接收端注册了两个 Receiver,Receiver1 和 Receiver2，发送端加入参数计数，接收端打印接收到的参数，下面是测试代码，发送一百条消息，来观察两个接收端的执行效果</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">oneToMany</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;<br>neoSender.send(i);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Receiver</span> <span class="hljs-number">1</span>: Spring boot neo queue ****** <span class="hljs-number">11</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">2</span>: Spring boot neo queue ****** <span class="hljs-number">12</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">2</span>: Spring boot neo queue ****** <span class="hljs-number">14</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">1</span>: Spring boot neo queue ****** <span class="hljs-number">13</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">2</span>: Spring boot neo queue ****** <span class="hljs-number">15</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">1</span>: Spring boot neo queue ****** <span class="hljs-number">16</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">1</span>: Spring boot neo queue ****** <span class="hljs-number">18</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">2</span>: Spring boot neo queue ****** <span class="hljs-number">17</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">2</span>: Spring boot neo queue ****** <span class="hljs-number">19</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">1</span>: Spring boot neo queue ****** <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>根据返回结果得到以下结论</p><blockquote><p>一个发送者，N个接受者,经过测试会均匀的将消息发送到N个接收者中</p></blockquote><p><strong>多对多发送</strong></p><p>复制了一份发送者，加入标记，在一百个循环中相互交替发送</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">manyToMany</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;<br>neoSender.send(i);<br>neoSender2.send(i);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Receiver</span> <span class="hljs-number">1</span>: Spring boot neo queue ****** <span class="hljs-number">20</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">2</span>: Spring boot neo queue ****** <span class="hljs-number">20</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">1</span>: Spring boot neo queue ****** <span class="hljs-number">21</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">2</span>: Spring boot neo queue ****** <span class="hljs-number">21</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">1</span>: Spring boot neo queue ****** <span class="hljs-number">22</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">2</span>: Spring boot neo queue ****** <span class="hljs-number">22</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">1</span>: Spring boot neo queue ****** <span class="hljs-number">23</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">2</span>: Spring boot neo queue ****** <span class="hljs-number">23</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">1</span>: Spring boot neo queue ****** <span class="hljs-number">24</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">2</span>: Spring boot neo queue ****** <span class="hljs-number">24</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">1</span>: Spring boot neo queue ****** <span class="hljs-number">25</span><br><span class="hljs-attribute">Receiver</span> <span class="hljs-number">2</span>: Spring boot neo queue ****** <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><blockquote><p>结论：和一对多一样，接收端仍然会均匀接收到消息</p></blockquote><h3 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h3><p><strong>对象的支持</strong></p><p>Spring Boot 以及完美的支持对象的发送和接收，不需要格外的配置。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//发送者</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">send</span>(<span class="hljs-params">User user</span>)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Sender object: &quot;</span> + user.toString());<br><span class="hljs-built_in">this</span>.rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;object&quot;</span>, user);<br>&#125;<br><br>...<br><br><span class="hljs-comment">//接收者</span><br><span class="hljs-meta">@RabbitHandler</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">process</span>(<span class="hljs-params">User user</span>)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Receiver object : &quot;</span> + user);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Sender <span class="hljs-keyword">object</span>: <span class="hljs-keyword">User</span>&#123;<span class="hljs-type">name</span>=<span class="hljs-string">&#x27;neo&#x27;</span>, pass=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>Receiver <span class="hljs-keyword">object</span> : <span class="hljs-keyword">User</span>&#123;<span class="hljs-type">name</span>=<span class="hljs-string">&#x27;neo&#x27;</span>, pass=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>Topic Exchange</strong></p><p>topic 是 RabbitMQ 中最灵活的一种方式，可以根据 routing_key 自由的绑定不同的队列</p><p>首先对 topic 规则配置，这里使用两个队列来测试</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TopicRabbitConfig</span> </span>&#123;<br><br>    final <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> message = <span class="hljs-string">&quot;topic.message&quot;</span>;<br>    final <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> messages = <span class="hljs-string">&quot;topic.messages&quot;</span>;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-function"><span class="hljs-title">queueMessage</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(TopicRabbitConfig.message);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-function"><span class="hljs-title">queueMessages</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(TopicRabbitConfig.messages);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    TopicExchange <span class="hljs-function"><span class="hljs-title">exchange</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TopicExchange(<span class="hljs-string">&quot;exchange&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    Binding <span class="hljs-function"><span class="hljs-title">bindingExchangeMessage</span>(<span class="hljs-params">Queue queueMessage, TopicExchange exchange</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueMessage).to(exchange).with(<span class="hljs-string">&quot;topic.message&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    Binding <span class="hljs-function"><span class="hljs-title">bindingExchangeMessages</span>(<span class="hljs-params">Queue queueMessages, TopicExchange exchange</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queueMessages).to(exchange).with(<span class="hljs-string">&quot;topic.#&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 queueMessages 同时匹配两个队列，queueMessage 只匹配 “topic.message” 队列</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send1</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">String</span> context = <span class="hljs-string">&quot;hi, i am message 1&quot;</span>;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Sender : &quot;</span> + context);<br><span class="hljs-keyword">this</span>.rabbitTemplate.<span class="hljs-built_in">convertAndSend</span>(<span class="hljs-string">&quot;exchange&quot;</span>, <span class="hljs-string">&quot;topic.message&quot;</span>, context);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send2</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">String</span> context = <span class="hljs-string">&quot;hi, i am messages 2&quot;</span>;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Sender : &quot;</span> + context);<br><span class="hljs-keyword">this</span>.rabbitTemplate.<span class="hljs-built_in">convertAndSend</span>(<span class="hljs-string">&quot;exchange&quot;</span>, <span class="hljs-string">&quot;topic.messages&quot;</span>, context);<br>&#125;<br></code></pre></td></tr></table></figure><p>发送send1会匹配到topic.#和topic.message 两个Receiver都可以收到消息，发送send2只有topic.#可以匹配所有只有Receiver2监听到消息</p><p><strong>Fanout Exchange</strong></p><p>Fanout 就是我们熟悉的广播模式或者订阅模式，给 Fanout 交换机发送消息，绑定了这个交换机的所有队列都收到这个消息。</p><p>Fanout 相关配置</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FanoutRabbitConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-function"><span class="hljs-title">AMessage</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">&quot;fanout.A&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-function"><span class="hljs-title">BMessage</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">&quot;fanout.B&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-function"><span class="hljs-title">CMessage</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">&quot;fanout.C&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    FanoutExchange <span class="hljs-function"><span class="hljs-title">fanoutExchange</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FanoutExchange(<span class="hljs-string">&quot;fanoutExchange&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    Binding <span class="hljs-function"><span class="hljs-title">bindingExchangeA</span>(<span class="hljs-params">Queue AMessage,FanoutExchange fanoutExchange</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(AMessage).to(fanoutExchange);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    Binding <span class="hljs-function"><span class="hljs-title">bindingExchangeB</span>(<span class="hljs-params">Queue BMessage, FanoutExchange fanoutExchange</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(BMessage).to(fanoutExchange);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    Binding <span class="hljs-function"><span class="hljs-title">bindingExchangeC</span>(<span class="hljs-params">Queue CMessage, FanoutExchange fanoutExchange</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(CMessage).to(fanoutExchange);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里使用了 A、B、C 三个队列绑定到 Fanout 交换机上面，发送端的 routing_key 写任何字符都会被忽略：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">String</span> context = <span class="hljs-string">&quot;hi, fanout msg &quot;</span>;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Sender : &quot;</span> + context);<br><span class="hljs-keyword">this</span>.rabbitTemplate.<span class="hljs-built_in">convertAndSend</span>(<span class="hljs-string">&quot;fanoutExchange&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, context);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">Sender </span>: hi, fanout msg <br>...<br><span class="hljs-attribute">fanout Receiver B</span>: hi, fanout msg <br><span class="hljs-attribute">fanout Receiver A  </span>: hi, fanout msg <br><span class="hljs-attribute">fanout Receiver C</span>: hi, fanout msg <br></code></pre></td></tr></table></figure><p>结果说明，绑定到 fanout 交换机上面的队列都收到了消息</p><blockquote><p>文章内容已经升级到 Spring Boot 2.x</p></blockquote><p><strong>示例代码-github</strong></p><p><strong>示例代码-码云</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zouyesheng.com/rabbitmq.html">RabbitMQ 使用参考</a></p><p><a href="https://github.com/401Studio/WeekLearn/issues/2">RabbitMQ：Spring 集成 RabbitMQ 与其概念，消息持久化，ACK机制</a></p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot2(八)：性感banner，在线发牌</title>
    <link href="/2019/07/07/2019-07-07-banner/"/>
    <url>/2019/07/07/2019-07-07-banner/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>emmm，没有啥前言</p><p>玩过SpringBoot的都知道，SpringBoot启动的时候，默认会在控制台打印SpringBoot字样和当前版本。</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/image01@main/picture/2529107887.png" alt="正常banner"></p><p>可是脑洞奇大的程序员怎么可能就这么拘泥于正常banner呢？</p><p>怎么骚怎么来是吧~</p><p>具体说明用法，我就不一一举例了，网上有很多设置banner的方案。</p><p>我一般是直接在<code>resource</code>文件夹下面新增文件：<code>banner.txt</code></p><p>就可以达到你想要的效果。</p><p>具体图案生成器在这里：</p><ul><li><a href="http://patorjk.com/software/taag">http://patorjk.com/software/taag</a></li><li><a href="http://www.network-science.de/ascii/">http://www.network-science.de/ascii/</a></li><li><a href="http://www.degraeve.com/img2txt.php">http://www.degraeve.com/img2txt.php</a></li></ul><p>这都不够那个。。好了，不多BB</p><p>我把我自用的给大家分享</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs txt">***********************************************************<br>*<br>* 个人博客：https://niaobulashi.com<br>* 微信公众号：鸟不拉诗<br>*<br>***********************************************************<br>           _.._        ,------------------------.<br>        ,&#x27;      `.    ( 启动成功！开启学习之旅！   )<br>       /  __) __` \    `-,----------------------&#x27;<br>      (  (`-`(-&#x27;)  ) _.-&#x27;<br>      /)  \  = /  (<br>     /&#x27;    |--&#x27; .  \<br>    (  ,---|  `-.)__`<br>     )(  `-.,--&#x27;   _`-.<br>    &#x27;/,&#x27;          (  Uu&quot;,<br>     (。       ,    `/,-&#x27; )<br>     `.__,  : `。&#x27;/  /`--&#x27;<br>       |     `--&#x27;  |<br>       `   `-._   /<br>        \        (<br>        /\ .      \. <br>       / |` \     ,-\<br>      /  \| .)   /   \<br>     ( ,&#x27;|\    ,&#x27;     :<br>     | \,`.`--&quot;/      &#125;<br>     `,&#x27;    \  |,&#x27;    /<br>    / &quot;-._   `-/      |<br>    &quot;-.   &quot;-.,&#x27;|     ;<br>   /        _/[&quot;---&#x27;&quot;&quot;]<br>  :        /  |&quot;-     &#x27;<br>  &#x27;           |      /<br>  |           `      |<br></code></pre></td></tr></table></figure><p>用法：</p><p>1、将上方内容放在文件<code>banner.txt</code></p><p>2、将文件<code>banner.txt</code>文件存放在resource目录下</p><p>然后启动， 效果就是这样</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/image01@main/picture/3595450165.png" alt="非正常banner"></p><p>然后就可以愉快的敲代码啦~~~</p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot2(九)：整合Jpa的基本使用</title>
    <link href="/2019/07/07/2019-07-07-springboot-jpa/"/>
    <url>/2019/07/07/2019-07-07-springboot-jpa/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天早上看到一篇微信文章，说的是国内普遍用的Mybatis，而国外确普遍用的是Jpa。我之前也看了jpa，发现入门相当容易。jpa对于简单的CRUD支持非常好，开发效率也会比Mybatis高出不少，因为<code>JpaRepository</code>会根据你定制的实体类，继承了<code>JpaRepository</code>会有一套完整的封装好了的基本条件方法。减少了很多开发量。你只需要写SQL就行了。可能我才刚入门Jpa，对一些认识还是很浅显。我觉得Jpa对于多表查询，开发起来有点吃力。。</p><p>这是我开始玩Jpa的最初的感受，但是Jpa却受到了极大的支持和赞扬，在国外Jpa远比Mybatis流行得多得多。国内却还是在流程用Mybatis，估计也是收到很多培训机构或者大V的带领下，很多国内优秀的开源项目也是用的Mybatis，因为已经用得非常熟练了。</p><p>话不多说，先看看SpringBoot如何整合使用Jpa吧！</p><p>这里具体讲一讲Jpa的搭建，几种常见的场景的使用：增删改查、多表查询，非主键查询这几种情况的一个学习总结。</p><h2 id="一、代码部署"><a href="#一、代码部署" class="headerlink" title="一、代码部署"></a>一、代码部署</h2><h3 id="1、添加Maven依赖"><a href="#1、添加Maven依赖" class="headerlink" title="1、添加Maven依赖"></a>1、添加Maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其实Jpa关键用到的是最下面两块</p><h3 id="2、配置application"><a href="#2、配置application" class="headerlink" title="2、配置application"></a>2、配置application</h3><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-comment">#指定配置文件为test</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">test</span><br></code></pre></td></tr></table></figure><p><code>application-test.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/jpatest?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">jpa:</span><br>    <span class="hljs-comment"># 数据库类型</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-comment">#打印SQL</span><br>    <span class="hljs-attr">show-sql:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">hibernate:</span><br>      <span class="hljs-attr">ddl-auto:</span> <span class="hljs-string">update</span>  <span class="hljs-comment">#第一次启动创建表，之后修改为update</span><br></code></pre></td></tr></table></figure><p><code>application-test.yml</code>需要了解的是jpa分支，如果需要通过jpa在数据库中建表，就将<code>spring.jpa.hibernate.ddl-auto</code>改为<code>create</code>，建完表之后，建议改为update，否则你再次重启，表会回炉重造，数据相应的会丢失。可得注意啦。</p><h3 id="3、创建实体类"><a href="#3、创建实体类" class="headerlink" title="3、创建实体类"></a>3、创建实体类</h3><p>用户表sys_user的实体类</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Data</span><br><span class="hljs-variable">@Entity</span><br><span class="hljs-variable">@Table</span>(name = <span class="hljs-string">&quot;sys_user&quot;</span>)<br>public class SysUser implements Serializable &#123;<br><br>    <span class="hljs-variable">@Id</span><br>    private String userId;<br><br>    <span class="hljs-variable">@Column</span>(nullable = false)<br>    private String userName;<br><br>    <span class="hljs-variable">@Column</span>(nullable = false)<br>    private String passWord;<br><br>    <span class="hljs-variable">@Column</span>(nullable = false, unique = true)<br>    private String email;<br><br>    <span class="hljs-variable">@Column</span>(nullable = false, unique = true)<br>    private String salt;<br><br>    <span class="hljs-variable">@Column</span>(nullable = false)<br>    private Date regTime;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>用户角色对照表sys_user_role的实体类</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Entity</span><br><span class="hljs-variable">@Data</span><br><span class="hljs-variable">@Table</span>(name = <span class="hljs-string">&quot;sys_user_role&quot;</span>)<br>public class SysUserRole implements Serializable &#123;<br><br>    <span class="hljs-variable">@Id</span><br>    <span class="hljs-variable">@GeneratedValue</span><br>    private int id;<br><br>    <span class="hljs-comment">// 用户ID</span><br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">userId</span>;<br><br>    <span class="hljs-comment">// 角色ID</span><br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">int</span> <span class="hljs-selector-tag">roleId</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、Dao层"><a href="#4、Dao层" class="headerlink" title="4、Dao层"></a>4、Dao层</h3><p>用户表SysUserDao</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">SysUserDao</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">JpaRepository</span>&lt;<span class="hljs-symbol">SysUser</span>, <span class="hljs-symbol">Integer</span>&gt; &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>用户角色对照表SysUserRoleDao</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">SysUserRoleDao</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">JpaRepository</span>&lt;<span class="hljs-symbol">SysUserRole</span>, <span class="hljs-symbol">Integer</span>&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、Controller层"><a href="#5、Controller层" class="headerlink" title="5、Controller层"></a>5、Controller层</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/user&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SysUserDao sysUserDao;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SysUserRoleDao sysUserRoleDao;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户表sys_user，用户角色对照表sys_user_role。数据初始化</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//发送get请求进行数据添加：127.0.0.1:8081/user/init</span><br>    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;/init&quot;</span>, method = RequestMethod.GET)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">initData</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>            <span class="hljs-comment">// 根据时间戳生成userId</span><br>            <span class="hljs-built_in">String</span> userId = <span class="hljs-built_in">String</span>.valueOf(System.currentTimeMillis());<br>            <span class="hljs-comment">// new出用户表和用户角色表的对象</span><br>            SysUser sysUser = <span class="hljs-keyword">new</span> SysUser();<br>            SysUserRole sysUserRole = <span class="hljs-keyword">new</span> SysUserRole();<br>            <span class="hljs-comment">// 新增用户表</span><br>            sysUser.setUserId(userId);<br>            sysUser.setUserName(<span class="hljs-string">&quot;username_num&quot;</span> + i);<br>            sysUser.setPassWord(<span class="hljs-string">&quot;password_num&quot;</span> + i);<br>            sysUser.setEmail(<span class="hljs-string">&quot;email_num&quot;</span> + i + <span class="hljs-string">&quot;@qq.com&quot;</span>);<br>            sysUser.setSalt(i + <span class="hljs-string">&quot;&quot;</span>);<br>            sysUser.setRegTime(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>());<br>            sysUserDao.save(sysUser);<br><br>            <span class="hljs-comment">// 暂时规定小于3的，角色为1，新建用户角色表</span><br>            <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">3</span>) &#123;<br>                sysUserRole.setId(i);<br>                sysUserRole.setUserId(userId);<br>                sysUserRole.setRoleId(<span class="hljs-number">1</span>);<br>                sysUserRoleDao.save(sysUserRole);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 大于3的，角色为2</span><br>                sysUserRole.setId(i);<br>                sysUserRole.setUserId(userId);<br>                sysUserRole.setRoleId(<span class="hljs-number">2</span>);<br>                sysUserRoleDao.save(sysUserRole);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;init data success&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// 发送get请求：127.0.0.1:8081/user/delete/1562486017644</span><br>    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;/delete/&#123;userId&#125;&quot;</span>, method = RequestMethod.GET)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">deleteUser</span>(<span class="hljs-params"><span class="hljs-meta">@PathVariable</span>(<span class="hljs-string">&quot;userId&quot;</span>) <span class="hljs-built_in">String</span> userId</span>)</span> &#123;<br>        sysUserDao.deleteByUserId(userId);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;delete success&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// 发送get请求：127.0.0.1:8081/user/list</span><br>    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;/list&quot;</span>, method = RequestMethod.GET)<br>    <span class="hljs-keyword">public</span> List&lt;SysUser&gt; <span class="hljs-function"><span class="hljs-title">getUsers</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> sysUserDao.findAll();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// 发送get请求：127.0.0.1:8081/user/info/1562486017644</span><br>    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;/info/&#123;userId&#125;&quot;</span>, method = RequestMethod.GET)<br>    <span class="hljs-keyword">public</span> Optional&lt;SysUser&gt; <span class="hljs-function"><span class="hljs-title">getUserById</span>(<span class="hljs-params"><span class="hljs-meta">@PathVariable</span>(<span class="hljs-string">&quot;userId&quot;</span>) <span class="hljs-built_in">String</span> userId</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> sysUserDao.findByUserId(userId);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// 发送post请求：127.0.0.1:8081/user/update</span><br>    <span class="hljs-comment">// 发送报文体如下</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     &#123;</span><br><span class="hljs-comment">        &quot;userId&quot;:&quot;1562486017551&quot;,</span><br><span class="hljs-comment">        &quot;passWord&quot;: &quot;231231231212312&quot;,</span><br><span class="hljs-comment">        &quot;userName&quot;:&quot;Tom&quot;,</span><br><span class="hljs-comment">        &quot;email&quot;: &quot;1111111@qq.com&quot;</span><br><span class="hljs-comment">     &#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;/update&quot;</span>, method = RequestMethod.POST)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">updateAccount</span>(<span class="hljs-params"><span class="hljs-meta">@RequestBody</span> HashMap&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; map</span>)</span> &#123;<br>        <span class="hljs-comment">// 根据Id更新用户信息</span><br>        sysUserDao.updateOne(<br>                map.get(<span class="hljs-string">&quot;email&quot;</span>),<br>                map.get(<span class="hljs-string">&quot;userName&quot;</span>),<br>                map.get(<span class="hljs-string">&quot;passWord&quot;</span>),<br>                map.get(<span class="hljs-string">&quot;userId&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;update success&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关联查询用户的角色信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// 发送post请求：127.0.0.1:8081/user/getUserRole</span><br>    <span class="hljs-comment">// 发送报文体如下</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">      &#123;</span><br><span class="hljs-comment">         &quot;userId&quot;:&quot;1562486017629&quot;</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;/getUserRole&quot;</span>, method = RequestMethod.POST)<br>    <span class="hljs-keyword">public</span> List&lt;SysUserInfo&gt; <span class="hljs-function"><span class="hljs-title">getUserRole</span>(<span class="hljs-params"><span class="hljs-meta">@RequestBody</span> HashMap&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; map</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> sysUserDao.findUserRole(map.get(<span class="hljs-string">&quot;userId&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据非主键username模糊查询</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// 发送post请求：127.0.0.1:8081/user/getUserByUserName</span><br>    <span class="hljs-comment">// 发送报文体如下</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        &quot;userName&quot;:&quot;username&quot;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;/getUserByUserName&quot;</span>, method = RequestMethod.POST)<br>    <span class="hljs-keyword">public</span> List&lt;SysUser&gt; <span class="hljs-function"><span class="hljs-title">getUserByUserName</span>(<span class="hljs-params"><span class="hljs-meta">@RequestBody</span> HashMap&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; map</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> sysUserDao.findUserName(map.get(<span class="hljs-string">&quot;userName&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码有点多，只是我写的例子多了点</p><h3 id="6、补充Dao"><a href="#6、补充Dao" class="headerlink" title="6、补充Dao"></a>6、补充Dao</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> SysUserDao <span class="hljs-keyword">extends</span> JpaRepository&lt;SysUser, Integer&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据userId删除数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-meta">@Query</span>(value = <span class="hljs-string">&quot;delete u from sys_user u where u.user_id = ?1&quot;</span>, nativeQuery = <span class="hljs-literal">true</span>)<br>    <span class="hljs-meta">@Modifying</span><br>    <span class="hljs-built_in">void</span> deleteByUserId(<span class="hljs-built_in">String</span> userId);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据UserId查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-variable">userId</span></span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Query</span>(value = <span class="hljs-string">&quot;select u.* from sys_user u where u.user_id = ?1&quot;</span>, nativeQuery = <span class="hljs-literal">true</span>)<br>    Optional&lt;SysUser&gt; findByUserId(<span class="hljs-built_in">String</span> userId);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据Id更新用户相关信息</span><br><span class="hljs-comment">     * nativeQuery = true 添加该属性等于true则是原生SQL语句查询，不添加则是HQL语句</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-meta">@Query</span>(value = <span class="hljs-string">&quot;update  sys_user set email=?1, user_name=?2, pass_word=?3 where user_id=?4&quot;</span>, nativeQuery = <span class="hljs-literal">true</span>)<br>    <span class="hljs-meta">@Modifying</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> updateOne(<span class="hljs-built_in">String</span> email, <span class="hljs-built_in">String</span> userName, <span class="hljs-built_in">String</span> passWord, <span class="hljs-built_in">String</span> userId);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询用户角色</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-variable">userId</span></span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Query</span>(value = <span class="hljs-string">&quot;SELECT &quot;</span> +<br>            <span class="hljs-string">&quot;t.user_id AS userId, &quot;</span> +<br>            <span class="hljs-string">&quot;t.user_name AS userName, &quot;</span> +<br>            <span class="hljs-string">&quot;t.email AS email, &quot;</span> +<br>            <span class="hljs-string">&quot;t.pass_word AS passWord, &quot;</span> +<br>            <span class="hljs-string">&quot;r.role_id AS roleId &quot;</span> +<br>            <span class="hljs-string">&quot;FROM sys_user t LEFT JOIN sys_user_role r &quot;</span> +<br>            <span class="hljs-string">&quot;ON r.user_id = t.user_id &quot;</span> +<br>            <span class="hljs-string">&quot;WHERE t.user_id = ?1&quot;</span>, nativeQuery = <span class="hljs-literal">true</span>)<br>    List&lt;SysUserInfo&gt; findUserRole(<span class="hljs-built_in">String</span> userId);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据username查询用户信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Query</span>(value = <span class="hljs-string">&quot;select u.* from sys_user u where u.user_name like CONCAT(&#x27;%&#x27;,?1,&#x27;%&#x27;)&quot;</span>, nativeQuery = <span class="hljs-literal">true</span>)<br>    List&lt;SysUser&gt; findUserName(<span class="hljs-built_in">String</span> nickName);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要注意的在<code>findUserRole</code>方法，是联表查询，其结果集在<code>SysUserInfo</code>中</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> interface SysUserInfo &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">String</span> <span class="hljs-title">getUserId</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">String</span> <span class="hljs-title">getUserName</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">String</span> <span class="hljs-title">getEmail</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">String</span> <span class="hljs-title">getPassWord</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getRoleId</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、测试"><a href="#二、测试" class="headerlink" title="二、测试"></a>二、测试</h2><p>启动项目之前，将<code>spring.jpa.hibernate.ddl-auto</code>改为<code>create</code>。启动完成之后改为update或者none。</p><p>会生成两张表sys_user用户表，sys_user_role用户角色对应表</p><p>然后通过controller里的一个接口init，发送get请求</p><p>生成一些数据。</p><p>之后可以进行具体的数据库接口操作啦。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>在学习过程中，敲代码也遇到不少坑，感觉Jpa还行，确实比Mybatis快了不少，不需要建立mapper.xml文件。</p><p>可是在项目中不可能都是一些简单的查询SQL呀，肯定会遇到许多复杂的SQL，如果用Jpa的话，感觉并不是那么好用。当然我还没有深入去学习它。肯定有许多我不太明白的技术。肯定可以解决不复杂SQL。</p><p>我在网上也搜索了，有些人会建议将Jpa和Mybatis结合使用。我也感觉这点子不错。后续会继续研究</p><h2 id="四、源码"><a href="#四、源码" class="headerlink" title="四、源码"></a>四、源码</h2><p>github源码地址：<a href="https://github.com/niaobulashi/spring-boot-learning/tree/master/spring-boot-18-jpa02">Spring Boot2(九)：整合Jpa的基本使用</a></p><p>To be continued…</p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot2(七)：过滤器拦截器的使用</title>
    <link href="/2019/07/06/2019-07-06-filter-interceptor/"/>
    <url>/2019/07/06/2019-07-06-filter-interceptor/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>过滤器和拦截器两者都具有AOP的切面思想，关于aop切面，可以看上一篇文章。过滤器filter和拦截器interceptor都属于面向切面编程的具体实现。</p><h2 id="一、过滤器"><a href="#一、过滤器" class="headerlink" title="一、过滤器"></a>一、过滤器</h2><h3 id="过滤器工作原理"><a href="#过滤器工作原理" class="headerlink" title="过滤器工作原理"></a>过滤器工作原理</h3><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/image01@main/picture/1012433218.png" alt="1"></p><p>从上图可以看出，当浏览器发送请求到服务器时，先执行过滤器，然后才访问Web资源。服务器响应Response，从Web资源抵达浏览器之前，也会途径过滤器。</p><p>过滤器是一个实现javax.servlet.Filter接口的Java类。javax.servlet.Filter接口定义了三个方法</p><table><thead><tr><th><strong>方法</strong></th><th>描述</th></tr></thead><tbody><tr><td>public void init(FilterConfig filterConfig)</td><td>web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，读取web.xml配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作（filter对象只会创建一次，init方法也只会执行一次）。开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。</td></tr><tr><td>public void doFilter (ServletRequest, ServletResponse, FilterChain)</td><td>该方法完成实际的过滤操作，当客户端请求方法与过滤器设置匹配的URL时，Servlet容器将先调用过滤器的doFilter方法。FilterChain用户访问后续过滤器。</td></tr><tr><td>public void destroy()</td><td>Servlet容器在销毁过滤器实例前调用该方法，在该方法中释放Servlet过滤器占用的资源。</td></tr></tbody></table><p>SpringBoot摒弃了繁琐的xml配置的同时，提示了几种注册组件：ServletRegistrationBean，<br>FilterRegistrationBean，ServletListenerRegistrationBean，DelegatingFilterProxyRegistrationBean，用于注册自对应的组件，如过滤器，监听器等。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="1、添加maven依赖"><a href="#1、添加maven依赖" class="headerlink" title="1、添加maven依赖"></a>1、添加maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--web--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--devtools热部署--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、添加拦截器"><a href="#2、添加拦截器" class="headerlink" title="2、添加拦截器"></a>2、添加拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfig</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RemoteIpFilter <span class="hljs-title">remoteIpFilter</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RemoteIpFilter();<br>    &#125;<br>    <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册第三方过滤器</span><br><span class="hljs-comment">     * 功能与spring mvc中通过配置web.xml相同</span><br><span class="hljs-comment">     * 可以添加过滤器锁拦截的 URL，拦截更加精准灵活</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title">testFilterRegistration</span><span class="hljs-params">()</span> </span>&#123;<br>        FilterRegistrationBean registration = <span class="hljs-keyword">new</span> FilterRegistrationBean();<br>        registration.setFilter(<span class="hljs-keyword">new</span> MyFilter());<br>        <span class="hljs-comment">// 过滤应用程序中所有资源,当前应用程序根下的所有文件包括多级子目录下的所有文件，注意这里*前有“/”</span><br>        registration.addUrlPatterns(<span class="hljs-string">&quot;/*&quot;</span>);<br>        registration.addInitParameter(<span class="hljs-string">&quot;paramName&quot;</span>, <span class="hljs-string">&quot;paramValue&quot;</span>);<br>        registration.setName(<span class="hljs-string">&quot;MyFilter&quot;</span>);<br>        <span class="hljs-comment">// 过滤器顺序</span><br>        registration.setOrder(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> registration;<br>    &#125;<br><br>    <span class="hljs-comment">// 定义过滤器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;init&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>            HttpServletRequest request = (HttpServletRequest) servletRequest;<br>            System.out.println(<span class="hljs-string">&quot;this is MyFilter,url :&quot;</span> + request.getRequestURI());<br>            filterChain.doFilter(servletRequest, servletResponse);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;destroy&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、controller层"><a href="#3、controller层" class="headerlink" title="3、controller层"></a>3、controller层</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/filter&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">testFilter</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;filter is ok&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h4><p>通过发送post请求：127.0.0.1:8081/filter</p><p>查看日志可以看到过滤器已经开始工作了。<img src="https://cdn.jsdelivr.net/gh/niaobulashi/image01@main/picture/3298742304.png" alt="测试截图Filter"></p><h2 id="二、拦截器"><a href="#二、拦截器" class="headerlink" title="二、拦截器"></a>二、拦截器</h2><h3 id="拦截器概念"><a href="#拦截器概念" class="headerlink" title="拦截器概念"></a>拦截器概念</h3><p>不同于过滤器，具体区别我们下面再将，先讲一讲拦截器实现的机制。</p><p>在AOP（Aspect-Oriented Programming）中用于在某个方法或字段被访问之前，进行拦截，然后在之前或之后加上某些操作。拦截是AOP的一种实现策略。</p><h3 id="拦截器作用"><a href="#拦截器作用" class="headerlink" title="拦截器作用"></a>拦截器作用</h3><p>有什么作用呢？AOP面向切面有什么作用，那么拦截器就有什么作用。</p><ul><li>日志记录：记录请求信息的日志，以便进行信息监控、信息统计、计算PV…</li><li>权限检查：认证或者授权等检查</li><li>性能监控：通过拦截器在进入处理器之前记录开始时间，处理完成后记录结束时间，得到请求处理时间。</li><li>通用行为：读取cookie得到用户信息并将用户对象放入请求头中，从而方便后续流程使用。</li></ul><h3 id="拦截器实现"><a href="#拦截器实现" class="headerlink" title="拦截器实现"></a>拦截器实现</h3><p>拦截器集成接口<code>HandlerInterceptor</code>，实现拦截，接口方法有下面三种：</p><ol><li><p><code>preHandler(HttpServletRequest request, HttpServletResponse response, Object handler)</code><br> 方法将在<strong>请求处理之前</strong>进行调用。SpringMVC中的<code>Interceptor</code>同Filter一样都是<strong>链式调用</strong>。每个Interceptor的调用会依据它的声明顺序依次执行，而且最先执行的都是Interceptor中的preHandle方法，所以可以在这个方法中进行一些前置初始化操作或者是对当前请求的一个预处理，也可以在这个方法中进行一些判断来决定请求是否要继续进行下去。该方法的返回值是布尔值Boolean 类型的，当它返回为false时，表示请求结束，后续的Interceptor和Controller都不会再执行；当返回值为true时就会继续调用下一个Interceptor 的preHandle 方法，如果已经是最后一个Interceptor 的时候就会是调用当前请求的Controller 方法。</p></li><li><p><code>postHandler(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</code><br> 在当前<strong>请求进行处理之后</strong>，也就是Controller 方法调用之后执行，但是它会在DispatcherServlet 进行视图返回渲染之前被调用，所以我们可以在这个方法中对Controller 处理之后的ModelAndView 对象进行操作。</p></li><li><p><code>afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handle, Exception ex)</code><br> 该方法也是需要当前对应的Interceptor的preHandle方法的返回值为true时才会执行。顾名思义，该方法将在整个请求结束之后，也就是在DispatcherServlet <strong>渲染了对应的视图之后执行</strong>。这个方法的主要作用是用于进行资源清理工作的。</p></li></ol><p>总结一点就是：</p><p>preHandle是请求执行前执行</p><p>postHandle是请求结束执行</p><p>afterCompletion是视图渲染完成后执行</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="1、添加Maven依赖"><a href="#1、添加Maven依赖" class="headerlink" title="1、添加Maven依赖"></a>1、添加Maven依赖</h4><p>和过滤器一样</p><h4 id="2、添加拦截器类"><a href="#2、添加拦截器类" class="headerlink" title="2、添加拦截器类"></a>2、添加拦截器类</h4><p>其中<code>LogInterceptor</code>实现<code>HandlerInterceptor</code>接口的三个方法，同时需要<code>preHandle</code>返回true，该方法通常用于清理资源等工作。</p><p>主方法继承<code>WebMvcConfigurer</code></p><p>注意不用用<code>WebMvcConfigurerAdapter</code>，该方法已经被官方标注过时了，在java8是默认实现的。</p><p>所以我们需要使用的是<code>WebMvcConfigurer</code>进行静态资源的配置。</p><p>配置的主要有两项：一个是制定拦截器，第二个是指定拦截的URL</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@Slf4j<br>@<span class="hljs-keyword">Configuration</span><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> InterceptorConfig implements WebMvcConfigurer &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 拦截器注册类</span><br><span class="hljs-comment">     * @param registry</span><br><span class="hljs-comment">     */</span><br>    @Override<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> addInterceptors(InterceptorRegistry registry) &#123;<br>        registry.addInterceptor(<span class="hljs-built_in">new</span> LogInterceptor()).addPathPatterns(&quot;/**&quot;);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义拦截器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> LogInterceptor implements HandlerInterceptor &#123;<br>        long start = <span class="hljs-keyword">System</span>.currentTimeMillis();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 请求执行前执行</span><br><span class="hljs-comment">         */</span><br>        @Override<br>        <span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, <span class="hljs-keyword">Object</span> o) throws <span class="hljs-keyword">Exception</span> &#123;<br>            <span class="hljs-keyword">log</span>.<span class="hljs-keyword">info</span>(&quot;preHandle&quot;);<br>            start = <span class="hljs-keyword">System</span>.currentTimeMillis();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 请求结束执行</span><br><span class="hljs-comment">         */</span><br>        @Override<br>        <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, <span class="hljs-keyword">Object</span> o, ModelAndView modelAndView) throws <span class="hljs-keyword">Exception</span> &#123;<br>            <span class="hljs-keyword">log</span>.<span class="hljs-keyword">info</span>(&quot;Interceptor cost=&quot;+(<span class="hljs-keyword">System</span>.currentTimeMillis()-<span class="hljs-keyword">start</span>));<br>        &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 视图渲染完成后执行</span><br><span class="hljs-comment">         */</span><br>        @Override<br>        <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, <span class="hljs-keyword">Object</span> o, <span class="hljs-keyword">Exception</span> e) throws <span class="hljs-keyword">Exception</span> &#123;<br>            <span class="hljs-keyword">log</span>.<span class="hljs-keyword">info</span>(&quot;afterCompletion&quot;);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、controller层-1"><a href="#3、controller层-1" class="headerlink" title="3、controller层"></a>3、controller层</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/interceptor&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">home</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;interceptor is ok&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、测试-1"><a href="#4、测试-1" class="headerlink" title="4、测试"></a>4、测试</h4><p>可以看到，我们通过拦截器实现了同样的功能。不过这里还要说明一点的是，其实这个实现是有问题的，因为preHandle和postHandle是两个方法，所以我们这里不得不设置一个共享变量start来存储开始值，但是这样就会存在线程安全问题。当然，我们可以通过其他方法来解决，比如通过ThreadLocal就可以很好的解决这个问题，有兴趣的同学可以自己实现。不过通过这一点我们其实可以看到，虽然拦截器在很多场景下优于过滤器，但是在这种场景下，过滤器比拦截器实现起来更简单。</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/image01@main/picture/1217141912.png" alt="测试截图Interceptor"></p><h2 id="三、过滤器和拦截器的区别"><a href="#三、过滤器和拦截器的区别" class="headerlink" title="三、过滤器和拦截器的区别"></a>三、过滤器和拦截器的区别</h2><p>Spring的拦截器与Servlet的Filter有相似之处，比如二者都是AOP编程思想的体现，都能实现权限检查、日志记录等。</p><p>不同的是:</p><ul><li>使用范围不同：Filter是Servlet规范规定的，只能用于Web程序中。而拦截器既可以用于Web程序，也可以用于Application、Swing程序中。</li><li>规范不同: Filter是在Servlet规范中定义的，是Servlet容器支持的。而拦截器是在Spring容器内的，是Spring框架支持的。</li><li>使用的资源不同：同其他的代码块一样，拦截器也是一个Spring的组件，归Spring管理，配置在Spring文件中，因此能使用Spring里的任何资源、对象，例如Service对象、数据源、事务管理等，通过loC注入到拦截器即可:而Filter则不能。</li><li>深度不同：Filter在只在Servlet前后起作用。而拦截器能够深入到方法前后、异常抛出前后等，因此拦截器的使用具有更大的弹性。所以在Spring构架的程序中，要优先使用拦截器。</li></ul><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>注意：过滤器的触发时机是容器后，servlet之前，所以过滤器的doFilter(ServletRequest request, ServletResponse response, FilterChain chain)的入参是ServletRequest，而不是HttpServletRequest，因为过滤器是在HttpServlet之前。下面这个图，可以让你对Filter和Interceptor的执行时机有更加直观的认识。<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/image01@main/picture/880490333.png" alt="过滤器和拦截器关系图"><br>只有经过DispatcherServlet 的请求，才会走拦截器链，自定义的Servlet请求是不会被拦截的，比如我们自定义的Servlet地址。</p><p>过滤器依赖于Servlet容器，而Interceptor则为SpringMVC的一部分。过滤器能够拦截所有请求，而Interceptor只能拦截Controller的请求，所以从覆盖范围来看，Filter应用更广一些。但是在Spring逐渐一统Java框架、前后端分离越演越烈，实际上大部分的应用场景，拦截器都可以满足了。</p><h2 id="五、源码"><a href="#五、源码" class="headerlink" title="五、源码"></a>五、源码</h2><p><a href="https://github.com/niaobulashi/spring-boot-learning/tree/master/spring-boot-16-filter">SpringBoot-过滤器spring-boot-16-filter</a></p><p><a href="https://github.com/niaobulashi/spring-boot-learning/tree/master/spring-boot-17-interceptor">SpringBoot-拦截器spring-boot-17-interceptor</a></p><h2 id="六、参考"><a href="#六、参考" class="headerlink" title="六、参考"></a>六、参考</h2><p><a href="https://juejin.im/post/5c6901206fb9a049af6dcdcf">SpringBoot实现过滤器、拦截器与切片</a><br><a href="https://www.cnblogs.com/paddix/p/8365558.html">Spring Boot实战：拦截器与过滤器</a><br><a href="https://www.cnblogs.com/jeffwongishandsome/p/spring-boot-use-filter-and-interceptor-to-implement-an-easy-auth-system.html">Spring Boot使用过滤器和拦截器分别实现REST接口简易安全认证</a></p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot2(六)：使用Spring Boot整合AOP面向切面编程</title>
    <link href="/2019/07/04/2019-07-04-aop/"/>
    <url>/2019/07/04/2019-07-04-aop/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>众所周知，spring最核心的两个功能是aop和ioc，即面向切面和控制反转。本文会讲一讲SpringBoot如何使用AOP实现面向切面的过程原理。</p><h2 id="一、何为aop"><a href="#一、何为aop" class="headerlink" title="一、何为aop"></a>一、何为aop</h2><p>​    aop全称<code>Aspect Oriented Programming</code>，面向切面，AOP主要实现的目的是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。其与设计模式完成的任务差不多，是提供另一种角度来思考程序的结构，来弥补面向对象编程的不足。</p><p>　　通俗点讲就是提供一个为一个业务实现提供切面注入的机制，通过这种方式，在业务运行中将定义好的切面通过切入点绑定到业务中，以实现将一些特殊的逻辑绑定到此业务中。</p><p>　　举个栗子，项目中有记录操作日志的需求、或者流程变更是记录变更履历，无非就是插表操作，很简单的一个save操作，都是一些记录日志或者其他辅助性的代码。一遍又一遍的重写和调用。不仅浪费了时间，又将项目变得更加的冗余，实在得不偿失。</p><p>　　所以就需要面向切面aop就出场了。</p><h2 id="二、aop相关名词"><a href="#二、aop相关名词" class="headerlink" title="二、aop相关名词"></a>二、aop相关名词</h2><p>​    要理解SpringBoot整合aop的实现，就必须先对面向切面实现的一些aop的名称有所了解，不然也是云里雾里。</p><ul><li><p><strong>切面（Aspect）</strong>：一个关注点的模块化。以注解@Aspect的形式放在类上方，声明一个切面。</p></li><li><p><strong>连接点（Joinpoint）</strong>：在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候都可以是连接点。</p></li><li><p><strong>通知（Advice）</strong>：通知增强，需要完成的工作叫做通知，就是你写的业务逻辑中需要比如事务、日志等先定义好，然后需要的地方再去用。</p><p>主要包括5个注解：Before，After，AfterReturning，AfterThrowing，Around。</p><p>@Before：在切点方法之前执行。</p><p>@After：在切点方法之后执行</p><p>@AfterReturning：切点方法返回后执行</p><p>@AfterThrowing：切点方法抛异常执行</p><p>@Around：属于环绕增强，能控制切点执行前，执行后，用这个注解后，程序抛异常，会影响@AfterThrowing这个注解</p></li><li><p><strong>切点（Pointcut）</strong>：其实就是<strong>筛选出的连接点</strong>，匹配连接点的断言，一个类中的所有方法都是连接点，但又不全需要，<strong>会筛选出某些作为连接点做为切点</strong>。如果说通知定义了切面的动作或者执行时机的话，切点则定义了执行的地点。切入点表达式如何和连接点匹配是AOP的核心：Spring缺省使用AspectJ切入点语法。</p></li><li><p><strong>引入（Introduction）</strong>：在不改变一个现有类代码的情况下，为该类添加属性和方法,可以在无需修改现有类的前提下，让它们具有新的行为和状态。其实就是把切面（也就是新方法属性：通知定义的）用到目标类中去。</p></li><li><p><strong>目标对象（Target Object）</strong>：被一个或者多个切面所通知的对象。也被称做被通知（adviced）对象。既然Spring AOP是通过运行时代理实现的，这个对象永远是一个被代理（proxied）对象。</p></li><li><p><strong>AOP代理（AOP Proxy）</strong>：AOP框架创建的对象，用来实现切面契约（例如通知方法执行等等）。在Spring中，AOP代理可以是JDK动态代理或者CGLIB代理。</p></li><li><p><strong>织入（Weaving）</strong>：把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时（例如使用AspectJ编译器），类加载时和运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。</p></li></ul><p>​       其中重要的名词有：<strong>切面（Aspect）</strong>，<strong>切入点（Pointcut）</strong></p><h2 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h2><p>以处理业务逻辑日志为例，新增日志处理的面向切面处理。</p><h3 id="1-添加maven依赖"><a href="#1-添加maven依赖" class="headerlink" title="1.添加maven依赖"></a>1.添加maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入AOP依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-添加系统日志注解"><a href="#2-添加系统日志注解" class="headerlink" title="2.添加系统日志注解"></a>2.添加系统日志注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SysLog &#123;<br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-添加系统日志实体类"><a href="#3-添加系统日志实体类" class="headerlink" title="3.添加系统日志实体类"></a>3.添加系统日志实体类</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe">@Data<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysLogEntity</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> className;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> methodName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> params;<br>    <span class="hljs-keyword">private</span> Long exeuTime;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> remark;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> createDate;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-新增Service逻辑处理层"><a href="#4-新增Service逻辑处理层" class="headerlink" title="4.新增Service逻辑处理层"></a>4.新增Service逻辑处理层</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Slf4j</span><br><span class="hljs-variable">@Service</span><br>public class SysLogService &#123;<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">boolean</span> <span class="hljs-selector-tag">save</span>(SysLogEntity sysLogEntity)&#123;<br>        <span class="hljs-comment">// 这里就不做具体实现了</span><br>        <span class="hljs-selector-tag">log</span><span class="hljs-selector-class">.info</span>(sysLogEntity.getParams());<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此处用了@Slf4j日志注解</p><p>相当于private  final Logger logger = LoggerFactory.getLogger(XXX.class);</p><p>简化了代码，怎么简化怎么来~</p><p>这里主要是研究aop的怎么实现的，就不具体写Service层的代码了。</p><h3 id="5-Controller层"><a href="#5-Controller层" class="headerlink" title="5.Controller层"></a>5.Controller层</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-meta-string">&quot;/aop&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AopController</span> </span>&#123;<br>    <span class="hljs-meta">@SysLog(<span class="hljs-meta-string">&quot;测试&quot;</span>)</span><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-meta-string">&quot;/test&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> String test(<span class="hljs-meta">@RequestParam(<span class="hljs-meta-string">&quot;name&quot;</span>)</span> String name, <span class="hljs-meta">@RequestParam(<span class="hljs-meta-string">&quot;age&quot;</span>)</span> int age)&#123;<br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot;, &quot;</span> + age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-切面处理"><a href="#6-切面处理" class="headerlink" title="6.切面处理"></a>6.切面处理</h3><p>来咯来咯，关键处理来咯，客官下面的代码</p><p>首先在类上方声明</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Aspect</span> <span class="hljs-comment">//使用@Aspect</span><br><span class="hljs-variable">@Component</span><br></code></pre></td></tr></table></figure><p>调用Service服务</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> SysLogService sysLogService;<br></code></pre></td></tr></table></figure><p>添加切点表达式@Pointcut</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这里我们使用注解的形式</span><br><span class="hljs-comment"> * 当然，我们也可以通过切点表达式直接指定需要拦截的package,需要拦截的class 以及 method</span><br><span class="hljs-comment"> * 切点表达式:   execution(...)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Pointcut(&quot;@annotation(com.niaobulashi.anno.SysLog)&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">logPointCut</span><span class="hljs-params">()</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>添加环绕通知@Around</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs processing">@Around(<span class="hljs-string">&quot;logPointCut()&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">Object</span> around(ProceedingJoinPoint <span class="hljs-built_in">point</span>) <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-keyword">long</span> beginTime = System.currentTimeMillis();<br>        <span class="hljs-keyword">Object</span> result = <span class="hljs-built_in">point</span>.proceed();<br>        <span class="hljs-keyword">long</span> time = System.currentTimeMillis() - beginTime;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//实现保存日志逻辑</span><br>            saveLog(<span class="hljs-built_in">point</span>, time);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br></code></pre></td></tr></table></figure><p>实现保存日志逻辑saveLog</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> void save<span class="hljs-constructor">Log(ProceedingJoinPoint <span class="hljs-params">joinPoint</span>, <span class="hljs-params">long</span> <span class="hljs-params">time</span>)</span> &#123;<br><br><span class="hljs-comment">// 获取方法的关键信息，类，包</span><br>MethodSignature signature = (MethodSignature) joinPoint.get<span class="hljs-constructor">Signature()</span>;<br>Method <span class="hljs-keyword">method</span> = signature.get<span class="hljs-constructor">Method()</span>;<br>SysLogEntity sysLogEntity = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SysLogEntity()</span>;<br>sysLogEntity.set<span class="hljs-constructor">ExeuTime(<span class="hljs-params">time</span>)</span>;<br>SimpleDateFormat dateFormat = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>)</span>;<br>sysLogEntity.set<span class="hljs-constructor">CreateDate(<span class="hljs-params">dateFormat</span>.<span class="hljs-params">format</span>(<span class="hljs-params">new</span> Date()</span>));<br>SysLog sysLog = <span class="hljs-keyword">method</span>.get<span class="hljs-constructor">Annotation(SysLog.<span class="hljs-params">class</span>)</span>;<br><span class="hljs-keyword">if</span>(sysLog != null) &#123;<br><span class="hljs-comment">//注解上的描述</span><br>sysLogEntity.set<span class="hljs-constructor">Remark(<span class="hljs-params">sysLog</span>.<span class="hljs-params">value</span>()</span>);<br>&#125;<br><span class="hljs-comment">//请求的 类名、方法名</span><br>String className = joinPoint.get<span class="hljs-constructor">Target()</span>.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Name()</span>;<br>String methodName = signature.get<span class="hljs-constructor">Name()</span>;<br>sysLogEntity.set<span class="hljs-constructor">ClassName(<span class="hljs-params">className</span>)</span>;<br>sysLogEntity.set<span class="hljs-constructor">MethodName(<span class="hljs-params">methodName</span>)</span>;<br><span class="hljs-comment">//请求的参数</span><br>Object<span class="hljs-literal">[]</span> args = joinPoint.get<span class="hljs-constructor">Args()</span>;<br><span class="hljs-keyword">try</span> &#123;<br>List&lt;String&gt; <span class="hljs-built_in">list</span> = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;<span class="hljs-literal">()</span>;<br><span class="hljs-keyword">for</span> (Object o : args) &#123;<br><span class="hljs-built_in">list</span>.add(o.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);<br>&#125;<br>sysLogEntity.set<span class="hljs-constructor">Params(<span class="hljs-params">list</span>.<span class="hljs-params">toString</span>()</span>);<br>&#125; catch (Exception e)&#123;<br><br>&#125;<br>sysLogService.save(sysLogEntity);<br>&#125;<br></code></pre></td></tr></table></figure><p>MethodSignature主要实现的是返回值类，方法名和形式参数</p><h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><p>通过发送get请求：127.0.0.1:8081/aop/test?name=Tom&amp;age=18</p><p>同时以debug模式运行项目，打点查看参数</p><p><img src="https://niaobulashi.com/usr/uploads/2019/07/1956644558.png"></p><p>可以看到MethodSignature中的参数</p><p>以及sysLogEntity赋值的各个参数。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>1、横切关注点<br>对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点</p><p>2、切面（aspect）-&gt;（通知+切点）<br>类是对物体特征的抽象，切面就是对横切关注点的抽象。<br>通知+切点<br>意思就是所有要被应用到增强（advice）代码的地方。(包括方法的方位信息)</p><p>3、连接点（joinpoint）-&gt;（被拦截的方法）<br>被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截的方法，实际上连接点还可以是字段或者构造器</p><p>4、切入点（pointcut）-&gt;（描述拦截那些方法的部分）<br>对连接点进行拦截的定义</p><p>5、通知（advice）-&gt;（拦截后执行自己业务逻辑的那些部分）<br>所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类<br>这玩意也叫 增强 </p><p>在逻辑层次上包括了我们抽取的公共逻辑和方位信息。因为Spring只能方法级别的应用AOP,也就是我们常见的before,after,after-returning,after-throwing,around五种，意思就是在方法调用前后，异常时候执行我这段公共逻辑呗。</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://www.cnblogs.com/lic309/p/4079194.html">【spring-boot】spring aop 面向切面编程初接触</a></p><p><a href="http://blog.didispace.com/springbootaoplog/">Spring Boot中使用AOP统一处理Web请求日志</a></p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot2(五)：使用Spring Boot结合Thymeleaf模板引擎使用总结</title>
    <link href="/2019/07/03/2019-07-03-thymeleaf/"/>
    <url>/2019/07/03/2019-07-03-thymeleaf/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般来说，常用的模板引擎有JSP、Velocity、Freemarker、Thymeleaf 。</p><p>SpringBoot推荐的 Thymeleaf – 语法更简单，功能更强大；</p><p>Thymeleaf是一种Java XML/XHTML/HTML5模板引擎，可以在Web和非Web环境中使用。<br>它更适合在基于MVC的Web应用程序的视图层提供XHTML/HTML5，但即使在脱机环境中，它也可以处理任何XML文件。它提供了完整的Spring Framework集成。</p><h2 id="一、-标准表达式语法"><a href="#一、-标准表达式语法" class="headerlink" title="一、 标准表达式语法"></a>一、 标准表达式语法</h2><p>它们分为四类：</p><ul><li>1.变量表达式</li><li>2.选择或星号表达式</li><li>3.文字国际化表达式</li><li>4.URL 表达式</li></ul><h3 id="变量表达式"><a href="#变量表达式" class="headerlink" title="变量表达式"></a>变量表达式</h3><p>变量表达式即 OGNL 表达式或 Spring EL 表达式(在 Spring 术语中也叫 model attributes)。如下所示：<br><code>$&#123;session.user.name&#125;</code></p><p>它们将以HTML标签的一个属性来表示：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;span th:<span class="hljs-attribute">text</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;book.author.name&#125;</span>&quot;</span>&gt;  <br>&lt;li th:<span class="hljs-attribute">each</span>=<span class="hljs-string">&quot;book : <span class="hljs-variable">$&#123;books&#125;</span>&quot;</span>&gt;  <br></code></pre></td></tr></table></figure><h3 id="选择-星号-表达式"><a href="#选择-星号-表达式" class="headerlink" title="选择(星号)表达式"></a>选择(星号)表达式</h3><p>选择表达式很像变量表达式，不过它们用一个预先选择的对象来代替上下文变量容器(map)来执行，如下：<br><code>*&#123;customer.name&#125;</code></p><p>被指定的 object 由 th:object 属性定义：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:object</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;book&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>  </span><br><span class="xml">  ...  </span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*</span></span></span><span class="hljs-template-variable">&#123;title&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  </span><br><span class="xml">  ...  </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  </span><br></code></pre></td></tr></table></figure><h3 id="文字国际化表达式"><a href="#文字国际化表达式" class="headerlink" title="文字国际化表达式"></a>文字国际化表达式</h3><p>文字国际化表达式允许我们从一个外部文件获取区域文字信息(.properties)，用 Key 索引 Value，还可以提供一组参数(可选).</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#&#123;main.title&#125;  </span><br><span class="hljs-meta">#&#123;message.entrycreated($&#123;entryId&#125;)&#125;  </span><br></code></pre></td></tr></table></figure><p>可以在模板文件中找到这样的表达式代码：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>  </span><br><span class="xml">  ...  </span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#</span></span></span><span class="hljs-template-variable">&#123;header.address.city&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  </span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#</span></span></span><span class="hljs-template-variable">&#123;header.address.country&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  </span><br><span class="xml">  ...  </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span>  </span><br></code></pre></td></tr></table></figure><h3 id="URL-表达式"><a href="#URL-表达式" class="headerlink" title="URL 表达式"></a>URL 表达式</h3><p>URL 表达式指的是把一个有用的上下文或回话信息添加到 URL，这个过程经常被叫做 URL 重写。<br><code>@&#123;/order/list&#125;</code></p><p>URL还可以设置参数：<br><code>@&#123;/order/details(id=$&#123;orderId&#125;)&#125;</code></p><p>相对路径：<br><code>@&#123;../documents/report&#125;</code></p><p>让我们看这些表达式：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">createOrder</span>&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>  </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;main.html&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">main</span>&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="变量表达式和星号表达有什么区别吗？"><a href="#变量表达式和星号表达有什么区别吗？" class="headerlink" title="变量表达式和星号表达有什么区别吗？"></a>变量表达式和星号表达有什么区别吗？</h3><p>如果不考虑上下文的情况下，两者没有区别；星号语法评估在选定对象上表达，而不是整个上下文<br>什么是选定对象？就是父标签的值，如下：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:object</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;session.user&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*</span></span></span><span class="hljs-template-variable">&#123;firstName&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>Sebastian<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Surname: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*</span></span></span><span class="hljs-template-variable">&#123;lastName&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>Pepper<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Nationality: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*</span></span></span><span class="hljs-template-variable">&#123;nationality&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>Saturn<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这是完全等价于：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:object</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;session.user&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;session.user.firstName&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>Sebastian<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Surname: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;session.user.lastName&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>Pepper<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Nationality: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;session.user.nationality&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>Saturn<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>当然，美元符号和星号语法可以混合使用：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:object</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;session.user&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*</span></span></span><span class="hljs-template-variable">&#123;firstName&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>Sebastian<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Surname: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;session.user.lastName&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>Pepper<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Nationality: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*</span></span></span><span class="hljs-template-variable">&#123;nationality&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>Saturn<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="表达式支持的语法"><a href="#表达式支持的语法" class="headerlink" title="表达式支持的语法"></a>表达式支持的语法</h3><h4 id="字面（Literals）"><a href="#字面（Literals）" class="headerlink" title="字面（Literals）"></a>字面（Literals）</h4><ul><li>文本文字（Text literals）: <code>&#39;one text&#39;, &#39;Another one!&#39;,…</code></li><li>数字文本（Number literals）: <code>0, 34, 3.0, 12.3,…</code></li><li>布尔文本（Boolean literals）:<code>true, false</code></li><li>空（Null literal）:<code>null</code></li><li>文字标记（Literal tokens）:<code>one, sometext, main,…</code></li></ul><h4 id="文本操作（Text-operations）"><a href="#文本操作（Text-operations）" class="headerlink" title="文本操作（Text operations）"></a>文本操作（Text operations）</h4><ul><li>字符串连接(String concatenation):<code>+</code></li><li>文本替换（Literal substitutions）:<code>|The name is $&#123;name&#125;|</code></li></ul><h4 id="算术运算（Arithmetic-operations）"><a href="#算术运算（Arithmetic-operations）" class="headerlink" title="算术运算（Arithmetic operations）"></a>算术运算（Arithmetic operations）</h4><ul><li>二元运算符（Binary operators）:<code>+, -, *, /, %</code></li><li>减号（单目运算符）Minus sign (unary operator):<code>-</code></li></ul><h4 id="布尔操作（Boolean-operations）"><a href="#布尔操作（Boolean-operations）" class="headerlink" title="布尔操作（Boolean operations）"></a>布尔操作（Boolean operations）</h4><ul><li>二元运算符（Binary operators）:<code>and, or</code></li><li>布尔否定（一元运算符）Boolean negation (unary operator):<code>!, not</code></li></ul><h4 id="比较和等价-Comparisons-and-equality"><a href="#比较和等价-Comparisons-and-equality" class="headerlink" title="比较和等价(Comparisons and equality)"></a>比较和等价(Comparisons and equality)</h4><ul><li>比较（Comparators）:<code>&gt;, &lt;, &gt;=, &lt;= (gt, lt, ge, le)</code></li><li>等值运算符（Equality operators）:<code>==, != (eq, ne)</code></li></ul><h4 id="条件运算符（Conditional-operators）"><a href="#条件运算符（Conditional-operators）" class="headerlink" title="条件运算符（Conditional operators）"></a>条件运算符（Conditional operators）</h4><ul><li>If-then:<code>(if) ? (then)</code></li><li>If-then-else:<code>(if) ? (then) : (else)</code></li><li>Default: (value) ?:<code>(defaultvalue)</code></li></ul><p>所有这些特征可以被组合并嵌套：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-symbol">&#x27;User</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">type</span> <span class="hljs-type">&#x27; </span>+ ($&#123;user.isAdmin()&#125; ? <span class="hljs-symbol">&#x27;Administrator</span>&#x27; : ($&#123;<span class="hljs-type">user.type</span>&#125; ?: <span class="hljs-symbol">&#x27;Unknown</span>&#x27;))<br></code></pre></td></tr></table></figure><h2 id="二、常用的th标签"><a href="#二、常用的th标签" class="headerlink" title="二、常用的th标签"></a>二、常用的th标签</h2><p>官方文档详细的一批：<br><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html</a></p><table><thead><tr><th align="left">关键字</th><th align="left">功能介绍</th><th align="left">案例</th></tr></thead><tbody><tr><td align="left">th:id</td><td align="left">替换id</td><td align="left"><code>&lt;input th:id=&quot;&#39;xxx&#39; + $&#123;collect.id&#125;&quot;/&gt;</code></td></tr><tr><td align="left">th:text</td><td align="left">文本替换</td><td align="left"><code>&lt;p th:text=&quot;$&#123;collect.description&#125;&quot;&gt;description&lt;/p&gt;</code></td></tr><tr><td align="left">th:utext</td><td align="left">支持html的文本替换</td><td align="left"><code>&lt;p th:utext=&quot;$&#123;htmlcontent&#125;&quot;&gt;conten&lt;/p&gt;</code></td></tr><tr><td align="left">th:object</td><td align="left">替换对象</td><td align="left"><code>&lt;div th:object=&quot;$&#123;session.user&#125;&quot;&gt; </code></td></tr><tr><td align="left">th:value</td><td align="left">属性赋值</td><td align="left"><code>&lt;input th:value=&quot;$&#123;user.name&#125;&quot; /&gt; </code></td></tr><tr><td align="left">th:with</td><td align="left">变量赋值运算</td><td align="left"><code>&lt;div th:with=&quot;isEven=$&#123;prodStat.count&#125;%2==0&quot;&gt;&lt;/div&gt; </code></td></tr><tr><td align="left">th:style</td><td align="left">设置样式</td><td align="left"><code>th:style=&quot;&#39;display:&#39; + @&#123;($&#123;sitrue&#125; ? &#39;none&#39; : &#39;inline-block&#39;)&#125; + &#39;&#39;&quot; </code></td></tr><tr><td align="left">th:onclick</td><td align="left">点击事件</td><td align="left"><code>th:onclick=&quot;&#39;getCollect()&#39;&quot; </code></td></tr><tr><td align="left">th:each</td><td align="left">属性赋值</td><td align="left"><code>tr th:each=&quot;user,userStat:$&#123;users&#125;&quot;&gt; </code></td></tr><tr><td align="left">th:if</td><td align="left">判断条件</td><td align="left"><code>&lt;a th:if=&quot;$&#123;userId == collect.userId&#125;&quot; &gt;</code></td></tr><tr><td align="left">th:unless</td><td align="left">和th:if判断相反</td><td align="left"><code>&lt;a th:href=&quot;@&#123;/login&#125;&quot; th:unless=$&#123;session.user != null&#125;&gt;Login&lt;/a&gt;</code></td></tr><tr><td align="left">th:href</td><td align="left">链接地址</td><td align="left"><code>&lt;a th:href=&quot;@&#123;/login&#125;&quot; th:unless=$&#123;session.user != null&#125;&gt;Login&lt;/a&gt; /&gt; </code></td></tr><tr><td align="left">th:switch</td><td align="left">多路选择 配合th:case 使用</td><td align="left"><code>&lt;div th:switch=&quot;$&#123;user.role&#125;&quot;&gt; </code></td></tr><tr><td align="left">th:case</td><td align="left">th:switch的一个分支</td><td align="left"><code>&lt;p th:case=&quot;&#39;admin&#39;&quot;&gt;User is an administrator&lt;/p&gt;</code></td></tr><tr><td align="left">th:fragment</td><td align="left">布局标签，定义一个代码片段，方便其它地方引用</td><td align="left"><code>&lt;div th:fragment=&quot;alert&quot;&gt;</code></td></tr><tr><td align="left">th:include</td><td align="left">布局标签，替换内容到引入的文件</td><td align="left"><code>&lt;head th:include=&quot;layout :: htmlhead&quot; th:with=&quot;title=&#39;xx&#39;&quot;&gt;&lt;/head&gt; /&gt; </code></td></tr><tr><td align="left">th:replace</td><td align="left">布局标签，替换整个标签到引入的文件</td><td align="left"><code>&lt;div th:replace=&quot;fragments/header :: title&quot;&gt;&lt;/div&gt; </code></td></tr><tr><td align="left">th:selected</td><td align="left">selected选择框 选中</td><td align="left"><code>th:selected=&quot;($&#123;xxx.id&#125; == $&#123;configObj.dd&#125;)&quot;</code></td></tr><tr><td align="left">th:src</td><td align="left">图片类地址引入</td><td align="left"><code>&lt;img class=&quot;img-responsive&quot; alt=&quot;App Logo&quot; th:src=&quot;@&#123;/img/logo.png&#125;&quot; /&gt; </code></td></tr><tr><td align="left">th:inline</td><td align="left">定义js脚本可以使用变量</td><td align="left"><code>&lt;script type=&quot;text/javascript&quot; th:inline=&quot;javascript&quot;&gt;</code></td></tr><tr><td align="left">th:action</td><td align="left">表单提交的地址</td><td align="left"><code>&lt;form action=&quot;subscribe.html&quot; th:action=&quot;@&#123;/subscribe&#125;&quot;&gt;</code></td></tr><tr><td align="left">th:remove</td><td align="left">删除某个属性</td><td align="left"><code>&lt;tr th:remove=&quot;all&quot;&gt; 1.all:删除包含标签和所有的孩子。2.body:不包含标记删除,但删除其所有的孩子。3.tag:包含标记的删除,但不删除它的孩子。4.all-but-first:删除所有包含标签的孩子,除了第一个。5.none:什么也不做。这个值是有用的动态评估。</code></td></tr><tr><td align="left">th:attr</td><td align="left">设置标签属性，多个属性可以用逗号分隔</td><td align="left">比如<code>th:attr=&quot;src=@&#123;/image/aa.jpg&#125;,title=#&#123;logo&#125;&quot;</code>，此标签不太优雅，一般用的比较少。</td></tr></tbody></table><p>还有非常多的标签，这里只列出最常用的几个,由于一个标签内可以包含多个th:x属性，其生效的优先级顺序为:<code>include,each,if/unless/switch/case,with,attr/attrprepend/attrappend,value/href,src ,etc,text/utext,fragment,remove。 </code></p><h2 id="三、表达式"><a href="#三、表达式" class="headerlink" title="三、表达式"></a>三、表达式</h2><p><strong>简单表达式</strong></p><ul><li>变量表达式：${…}</li><li>选择变量表达式：*{…}</li><li>消息表达式：#{…}</li><li>链接表达式：@{…}</li><li>片段表达：~{…}</li></ul><p><strong>数据的类型</strong></p><ul><li>文字：’one text’, ‘Another one!’,…</li><li>数字文字：0, 34, 3.0, 12.3,…</li><li>布尔文字：true, false</li><li>NULL文字：null</li><li>文字标记：one, sometext, main,…</li></ul><p><strong>文本操作</strong></p><ul><li>字符串拼接：+</li><li>字面替换：|The name is ${name}|</li></ul><p><strong>算术运算</strong></p><ul><li>二进制运算符：+, -, *, /, %</li><li>减号(一元运算符)：-</li></ul><p><strong>布尔运算</strong></p><ul><li>二进制运算符：and, or</li><li>布尔否定(一元运算符)：!, false</li></ul><p><strong>条件运算符</strong></p><ul><li>比较值：&gt;, &lt;, &gt;=, &lt;=</li><li>相等判断： ==, !=</li></ul><p><strong>条件判断</strong></p><ul><li>(if) ? (then)</li><li>(if) ? (then) : (else)</li><li>三元：(value) ? value : defaultvalue</li></ul><h2 id="四、表达式对象"><a href="#四、表达式对象" class="headerlink" title="四、表达式对象"></a>四、表达式对象</h2><p>表达式里面的对象可以帮助我们处理要展示的内容，比如表达式的工具类dates可以格式化时间，这些内置类的熟练使用，可以让我们使用Thymeleaf的效率提高很多。</p><ul><li>#ctx: 操作当前上下文.</li><li>#vars: 操作上下文变量.</li><li>#request: (仅适用于Web项目) HttpServletRequest对象.</li><li>#response: (仅适用于Web项目) HttpServletResponse 对象.</li><li>#session: (仅适用于Web项目) HttpSession 对象.</li><li>#servletContext: (仅适用于Web项目) ServletContext 对象.</li></ul><p>表达式实用工具类：</p><ul><li>#execInfo: 操作模板的工具类，包含了一些模板信息，比如：${ #execInfo.templateName }</li><li>#uris: url处理的工具</li><li>#conversions: methods for executing the configured <em>conversion service</em> (if any).</li><li>#dates: 方法来源于 java.util.Date 对象，用于处理时间，比如：格式化.</li><li>#calendars: 类似于 #dates, 但是来自于 java.util.Calendar 对象.</li><li>#numbers: 用于格式化数字.</li><li>#strings: methods for String objects: contains, startsWith, prepending/appending, etc.</li><li>#objects: 普通的object对象方法.</li><li>#bools: 判断bool类型的工具.</li><li>#arrays: 数组操作工具.</li><li>#lists: 列表操作数据.</li><li>#sets: Set操作工具.</li><li>#maps: Map操作工具.</li><li>#aggregates: 操作数组或集合的工具.</li></ul><h2 id="五、几种常用的使用方法"><a href="#五、几种常用的使用方法" class="headerlink" title="五、几种常用的使用方法"></a>五、几种常用的使用方法</h2><h3 id="1、赋值、字符串拼接"><a href="#1、赋值、字符串拼接" class="headerlink" title="1、赋值、字符串拼接"></a>1、赋值、字符串拼接</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;p  th:<span class="hljs-attribute">text</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;collect.description&#125;</span>&quot;</span>&gt;description&lt;/p&gt;<br>&lt;span th:<span class="hljs-attribute">text</span>=<span class="hljs-string">&quot;&#x27;Welcome to our application, &#x27; + <span class="hljs-variable">$&#123;user.name&#125;</span> + &#x27;!&#x27;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>字符串拼接还有另外一种简洁的写法</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;span th:<span class="hljs-attribute">text</span>=<span class="hljs-string">&quot;|Welcome to our application, <span class="hljs-variable">$&#123;user.name&#125;</span>!|&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="2、条件判断-If-Unless"><a href="#2、条件判断-If-Unless" class="headerlink" title="2、条件判断 If/Unless"></a>2、条件判断 If/Unless</h3><p>Thymeleaf中使用th:if和th:unless属性进行条件判断，下面的例子中，<code>&lt;a&gt;</code>标签只有在<code>th:if</code>中条件成立时才显示：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;myself==&#x27;yes&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> &gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:unless</span>=<span class="hljs-string">$</span></span></span><span class="hljs-template-variable">&#123;session.user != null&#125;</span><span class="xml"><span class="hljs-tag"> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">login</span>&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> &gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><code>th:unless</code> 于 <code>th:if</code> 恰好相反，只有表达式中的条件不成立，才会显示其内容。</p><p>也可以使用 <code>(if) ? (then) : (else)</code>这种语法来判断显示的内容</p><h3 id="3、for-循环"><a href="#3、for-循环" class="headerlink" title="3、for 循环"></a>3、for 循环</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>  <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;collect,iterStat : $</span></span></span><span class="hljs-template-variable">&#123;collects&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span> </span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;collect.id&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">td</span> &gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;collect.webLogo&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;collect.url&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>Mark<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;collect.title&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>Otto<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;collect.description&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>@mdo<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;terStat.index&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>index<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>iterStat称作状态变量，属性有：</p><ul><li>index:当前迭代对象的 index（从0开始计算）</li><li>count: 当前迭代对象的 index(从1开始计算)</li><li>size:被迭代对象的大小</li><li>current:当前迭代变量</li><li>even/odd:布尔值，当前循环是否是偶数/奇数（从0开始计算）</li><li>first:布尔值，当前循环是否是第一个</li><li>last:布尔值，当前循环是否是最后一个</li></ul><h3 id="4、URL"><a href="#4、URL" class="headerlink" title="4、URL"></a>4、URL</h3><p>URL 在 Web 应用模板中占据着十分重要的地位，需要特别注意的是 Thymeleaf 对于 URL 的处理是通过语法 <code>@&#123;...&#125;</code>来处理的。 如果需要 Thymeleaf 对 URL 进行渲染，那么务必使用 <code>th:href</code>，<code>th:src</code> 等属性，下面是一个例子</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!-- Will produce &#x27;http://localhost:8080/standard/unread&#x27; (plus rewriting) --&gt;</span></span><br><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">a</span>  <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">standard</span>/&#123;type&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">(type=$</span></span></span><span class="hljs-template-variable">&#123;type&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">)&#125;&quot;</span>&gt;</span>view<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- Will produce &#x27;/gtvg/order/3/details&#x27; (plus rewriting) --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;details.html&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">order</span>/&#123;orderId&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/details(orderId=$</span></span></span><span class="hljs-template-variable">&#123;o.id&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">)&#125;&quot;</span>&gt;</span>view<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>设置背景</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:style</span>=<span class="hljs-string">&quot;&#x27;background:url(&#x27; + @</span></span></span><span class="hljs-template-tag">&#123;/&lt;<span class="hljs-name">path-to-image</span>&gt;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string"> + &#x27;);&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>根据属性值改变背景</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;media-object resource-card-image&quot;</span>  <span class="hljs-attr">th:style</span>=<span class="hljs-string">&quot;&#x27;background:url(&#x27; + @</span></span></span><span class="hljs-template-variable">&#123;($&#123;collect.webLogo&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">==&#x27;&#x27; ? &#x27;img/favicon.png&#x27; : $</span></span></span><span class="hljs-template-variable">&#123;collect.webLogo&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">)&#125; + &#x27;)&#x27;&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>几点说明：</p><ul><li>上例中 URL 最后的<code>(orderId=$&#123;o.id&#125;) </code>表示将括号内的内容作为 URL 参数处理，该语法避免使用字符串拼接，大大提高了可读性</li><li><code>@&#123;...&#125;</code>表达式中可以通过<code>&#123;orderId&#125;</code>访问 Context 中的 orderId 变量</li><li><code>@&#123;/order&#125;</code>是 Context 相关的相对路径，在渲染时会自动添加上当前 Web 应用的 Context 名字，假设 context 名字为 app，那么结果应该是 <code>/app/order</code></li></ul><h3 id="5、内联-js"><a href="#5、内联-js" class="headerlink" title="5、内联 js"></a>5、内联 js</h3><p>内联文本：[[…]] 内联文本的表示方式，使用时，必须先用<code>th:inline=&quot;text/javascript/none&quot;</code>激活，<code>th:inline</code>可以在父级标签内使用，甚至作为 body 的标签。内联文本尽管比<code>th:text</code>的代码少，不利于原型显示。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:inline</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span><br><span class="javascript"><span class="hljs-comment">/*&lt;![CDATA[*/</span></span><br>...<br><span class="javascript"><span class="hljs-keyword">var</span> username = <span class="hljs-comment">/*[[$&#123;sesion.user.name&#125;]]*/</span> <span class="hljs-string">&#x27;Sebastian&#x27;</span>;</span><br><span class="javascript"><span class="hljs-keyword">var</span> size = <span class="hljs-comment">/*[[$&#123;size&#125;]]*/</span> <span class="hljs-number">0</span>;</span><br>...<br><span class="javascript"><span class="hljs-comment">/*]]&gt;*/</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js 附加代码：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*[+</span><br><span class="hljs-comment">var msg = &#x27;This is a working application&#x27;;</span><br><span class="hljs-comment">+]*/</span><br></code></pre></td></tr></table></figure><p>js 移除代码：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*[- */</span><br><span class="hljs-keyword">var</span> msg = <span class="hljs-string">&#x27;This is a non-working template&#x27;</span>;<br><span class="hljs-comment">/* -]*/</span><br></code></pre></td></tr></table></figure><h3 id="6、内嵌变量"><a href="#6、内嵌变量" class="headerlink" title="6、内嵌变量"></a>6、内嵌变量</h3><p>为了模板更加易用，Thymeleaf 还提供了一系列 Utility 对象（内置于 Context 中），可以通过 # 直接访问：</p><ul><li>dates ： <em>java.util.Date的功能方法类。</em></li><li>calendars : <em>类似#dates，面向java.util.Calendar</em></li><li>numbers : <em>格式化数字的功能方法类</em></li><li>strings : <em>字符串对象的功能类，contains,startWiths,prepending/appending等等。</em></li><li>objects: <em>对objects的功能类操作。</em></li><li>bools: <em>对布尔值求值的功能方法。</em></li><li>arrays：<em>对数组的功能类方法。</em></li><li>lists: <em>对lists功能类方法</em></li><li>sets</li><li>maps<br>…</li></ul><p>下面用一段代码来举例一些常用的方法：</p><h4 id="dates"><a href="#dates" class="headerlink" title="dates"></a>dates</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Format date with the specified pattern</span><br><span class="hljs-comment"> * Also works with arrays, lists or sets</span><br><span class="hljs-comment"> */</span><br>$&#123;<span class="hljs-selector-id">#dates</span><span class="hljs-selector-class">.format</span>(date, <span class="hljs-string">&#x27;dd/MMM/yyyy HH:mm&#x27;</span>)&#125;<br>$&#123;<span class="hljs-selector-id">#dates</span><span class="hljs-selector-class">.arrayFormat</span>(datesArray, <span class="hljs-string">&#x27;dd/MMM/yyyy HH:mm&#x27;</span>)&#125;<br>$&#123;<span class="hljs-selector-id">#dates</span><span class="hljs-selector-class">.listFormat</span>(datesList, <span class="hljs-string">&#x27;dd/MMM/yyyy HH:mm&#x27;</span>)&#125;<br>$&#123;<span class="hljs-selector-id">#dates</span><span class="hljs-selector-class">.setFormat</span>(datesSet, <span class="hljs-string">&#x27;dd/MMM/yyyy HH:mm&#x27;</span>)&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Create a date (java.util.Date) object for the current date and time</span><br><span class="hljs-comment"> */</span><br>$&#123;<span class="hljs-selector-id">#dates</span><span class="hljs-selector-class">.createNow</span>()&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Create a date (java.util.Date) object for the current date (time set to 00:00)</span><br><span class="hljs-comment"> */</span><br>$&#123;<span class="hljs-selector-id">#dates</span><span class="hljs-selector-class">.createToday</span>()&#125;<br></code></pre></td></tr></table></figure><h4 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Check whether a String is empty (or null). Performs a trim() operation before check</span><br><span class="hljs-comment"> * Also works with arrays, lists or sets</span><br><span class="hljs-comment"> */</span><br>$&#123;<span class="hljs-selector-id">#strings</span><span class="hljs-selector-class">.isEmpty</span>(name)&#125;<br>$&#123;<span class="hljs-selector-id">#strings</span><span class="hljs-selector-class">.arrayIsEmpty</span>(nameArr)&#125;<br>$&#123;<span class="hljs-selector-id">#strings</span><span class="hljs-selector-class">.listIsEmpty</span>(nameList)&#125;<br>$&#123;<span class="hljs-selector-id">#strings</span><span class="hljs-selector-class">.setIsEmpty</span>(nameSet)&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Check whether a String starts or ends with a fragment</span><br><span class="hljs-comment"> * Also works with arrays, lists or sets</span><br><span class="hljs-comment"> */</span><br>$&#123;<span class="hljs-selector-id">#strings</span><span class="hljs-selector-class">.startsWith</span>(name,<span class="hljs-string">&#x27;Don&#x27;</span>)&#125;                  <span class="hljs-comment">// also array*, list* and set*</span><br>$&#123;<span class="hljs-selector-id">#strings</span><span class="hljs-selector-class">.endsWith</span>(name,endingFragment)&#125;           <span class="hljs-comment">// also array*, list* and set*</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Compute length</span><br><span class="hljs-comment"> * Also works with arrays, lists or sets</span><br><span class="hljs-comment"> */</span><br>$&#123;<span class="hljs-selector-id">#strings</span><span class="hljs-selector-class">.length</span>(str)&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Null-safe comparison and concatenation</span><br><span class="hljs-comment"> */</span><br>$&#123;<span class="hljs-selector-id">#strings</span><span class="hljs-selector-class">.equals</span>(str)&#125;<br>$&#123;<span class="hljs-selector-id">#strings</span><span class="hljs-selector-class">.equalsIgnoreCase</span>(str)&#125;<br>$&#123;<span class="hljs-selector-id">#strings</span><span class="hljs-selector-class">.concat</span>(str)&#125;<br>$&#123;<span class="hljs-selector-id">#strings</span><span class="hljs-selector-class">.concatReplaceNulls</span>(str)&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Random</span><br><span class="hljs-comment"> */</span><br>$&#123;<span class="hljs-selector-id">#strings</span><span class="hljs-selector-class">.randomAlphanumeric</span>(count)&#125;<br></code></pre></td></tr></table></figure><h2 id="六、使用基本步骤"><a href="#六、使用基本步骤" class="headerlink" title="六、使用基本步骤"></a>六、使用基本步骤</h2><p>我认为可以大致分为四步：</p><ol><li>pom.xml 添加 Thymeleaf 模板引擎。</li><li>application.yml 配置 Thymeleaf 信息。</li><li>创建controller类，编写代码。</li><li>创建模板，编写html代码。</li></ol><h4 id="1-pom-xml-添加依赖"><a href="#1-pom-xml-添加依赖" class="headerlink" title="1. pom.xml 添加依赖"></a>1. pom.xml 添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-properties-配置-Thymeleaf-信息"><a href="#2-properties-配置-Thymeleaf-信息" class="headerlink" title="2. .properties 配置 Thymeleaf 信息"></a>2. .properties 配置 Thymeleaf 信息</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-comment"># 是否启用</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 模板编码</span><br>    <span class="hljs-attr">encoding:</span> <span class="hljs-string">UTF-8</span><br>    <span class="hljs-comment"># 模板模式</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">HTML5</span><br>    <span class="hljs-comment"># 模板存放路径</span><br>    <span class="hljs-attr">prefix:</span> <span class="hljs-string">classpath:/templates/</span><br>    <span class="hljs-comment"># 模板后缀</span><br>    <span class="hljs-attr">suffix:</span> <span class="hljs-string">.html</span><br>    <span class="hljs-comment"># 启用缓存，建议生产开启</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 校验模板是否存在</span><br>    <span class="hljs-attr">check-template-location:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># Content-type值</span><br>    <span class="hljs-attr">servlet:</span><br>      <span class="hljs-attr">content-type:</span> <span class="hljs-string">text/html</span><br>  <span class="hljs-comment"># 加配置静态资源</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">static-locations:</span> <span class="hljs-string">classpath:/</span><br><br></code></pre></td></tr></table></figure><h4 id="3-创建controller类，编写代码"><a href="#3-创建controller类，编写代码" class="headerlink" title="3. 创建controller类，编写代码"></a>3. 创建controller类，编写代码</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs processing">@RequestMapping(<span class="hljs-string">&quot;/me&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> kownMe(Map&lt;<span class="hljs-keyword">String</span>,<span class="hljs-keyword">Object</span>&gt; <span class="hljs-built_in">map</span>) &#123;<br>    List&lt;<span class="hljs-keyword">String</span>&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-keyword">String</span>&gt;();<br>    list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;鸟不拉诗：一个正在努力Coding的未来架构师&quot;</span>);<br>    list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;记录菜鸟的成长&quot;</span>);<br>    list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;个人博客：https://niaobulashi.com&quot;</span>);<br>    list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;github博客：https://niaobulashi.github.io&quot;</span>);<br>    <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Yoyoyoyoyo&quot;</span>);<br>    <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;images&quot;</span>, <span class="hljs-string">&quot;Yoyoyoyoyo&quot;</span>);<br>    <span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;lists&quot;</span>, list);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;me&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：返回的”me″是我HTML文件 me.html的名称哦</p><h4 id="4-创建-page1-html-。编写html代码"><a href="#4-创建-page1-html-。编写html代码" class="headerlink" title="4. 创建 page1.html 。编写html代码"></a>4. 创建 page1.html 。编写html代码</h4><p>只要把写好的HTML页面放在 classpath:/templates/ 下，thymeleaf就能自动渲染。</p><p>注意导入：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;html <span class="hljs-attribute">lang</span>=<span class="hljs-string">&quot;en&quot;</span> xmlns:<span class="hljs-attribute">th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>否则没提示哦~</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>鸟不拉诗<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;static/layui/css/layui.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>templates示例<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- th:text=&quot;&quot; 将h2的文本值视为指定参数 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>这是h2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-elem-field layui-field-title&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 20px;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>循环<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-table&quot;</span> <span class="hljs-attr">lay-skin</span>=<span class="hljs-string">&quot;line&quot;</span>  &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;350&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">colgroup</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>NAME<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- th循环遍历传来的参数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;str : $&#123;lists&#125;&quot;</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;str&#125;&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;$&#123;images&#125;&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="七、参考"><a href="#七、参考" class="headerlink" title="七、参考"></a>七、参考</h2><p><a href="http://www.ityouknow.com/springboot/2016/05/01/spring-boot-thymeleaf.html">Thymeleaf 使用详解</a></p><p><a href="https://lzyz.fun/thymeleaf/">SpringBoot中的Thymeleaf 模板引擎</a></p><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">Thymeleaf官方文档</a></p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot2(四)：使用Spring Boot多数据源实现过程</title>
    <link href="/2019/07/01/2019-07-01-mybatis-mutls/"/>
    <url>/2019/07/01/2019-07-01-mybatis-mutls/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>实际业务场景中，不可能只有一个库，所以就有了分库分表，多数据源的出现。实现了读写分离，主库负责增改删，从库负责查询。这篇文章将实现Spring Boot如何实现多数据源，动态数据源切换，读写分离等操作。</p><h2 id="一、代码部署"><a href="#一、代码部署" class="headerlink" title="一、代码部署"></a>一、代码部署</h2><p>快速新建项目spring-boot项目</p><h3 id="1、添加maven依赖"><a href="#1、添加maven依赖" class="headerlink" title="1、添加maven依赖"></a>1、添加maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、application配置多数据源读取配置"><a href="#2、application配置多数据源读取配置" class="headerlink" title="2、application配置多数据源读取配置"></a>2、application配置多数据源读取配置</h3><p>和之前教程一样，首先配置application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#指定配置文件为test</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">test</span><br><br><span class="hljs-comment">#配置Mybatis</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-comment"># 开启驼峰命名转换，如：Table(create_time) -&gt; Entity(createTime)。不需要我们关心怎么进行字段匹配，mybatis会自动识别`大写字母与下划线`</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment">#打印SQL日志</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-string">com.niaobulashi.mapper.*:</span> <span class="hljs-string">DEBUG</span><br></code></pre></td></tr></table></figure><p>其中打印SQL日志这块，因为是多数据源，在mapper包下面区分不同的数据库来源xml文件，所以用*表示。</p><p>配置application-test.yml如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-comment">#主库</span><br>    <span class="hljs-attr">master:</span><br>      <span class="hljs-attr">jdbc-url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-comment">#从库</span><br>    <span class="hljs-attr">slave:</span><br>      <span class="hljs-attr">jdbc-url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/test2?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><p>从spring.datasource节点开始，区分主库master，从库slave。主库连接的数据库为test，从库连接的数据库为test2。</p><p><strong>注意</strong>：这里需要注意的是，从Spring Boot2开始，在配置多数据源时有些配置发生了变化，网上许多教程使用的是<code>spring.datasource.url</code>。会出现<code>jdbcUrl is required with driverClassName.</code>的问题。</p><p><strong>解决方法</strong>：配置多数据源时，将<code>spring.datasource.url</code>配置改为<code>spring.datasource.jdbc-url</code></p><h3 id="3、添加主库配置信息"><a href="#3、添加主库配置信息" class="headerlink" title="3、添加主库配置信息"></a>3、添加主库配置信息</h3><p>依据知名博主：纯洁的微笑，写的博文我们来分析一波</p><p>首先看主库配置的代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(basePackages = <span class="hljs-meta-string">&quot;com.niaobulashi.mapper.master&quot;</span>, sqlSessionTemplateRef = <span class="hljs-meta-string">&quot;masterSqlSessionTemplate&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataSourceMasterConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是application-test.yml中的spring.datasource.master配置生效</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(name = <span class="hljs-meta-string">&quot;masterDataSource&quot;</span>)</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = <span class="hljs-meta-string">&quot;spring.datasource.master&quot;</span>)</span><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-keyword">public</span> DataSource masterDataSource() &#123;<br>        <span class="hljs-keyword">return</span> DataSourceBuilder.create().build();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将配置信息注入到SqlSessionFactoryBean中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataSource    数据库连接信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(name = <span class="hljs-meta-string">&quot;masterSqlSessionFactory&quot;</span>)</span><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactory masterSqlSessionFactory(<span class="hljs-meta">@Qualifier(<span class="hljs-meta-string">&quot;masterDataSource&quot;</span>)</span> DataSource dataSource) throws Exception &#123;<br>        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();<br>        bean.setDataSource(dataSource);<br>        bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(<span class="hljs-string">&quot;classpath:mapper/master/*.xml&quot;</span>));<br>        <span class="hljs-keyword">return</span> bean.getObject();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 事务管理器，在实例化时注入主库master</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataSource</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(name = <span class="hljs-meta-string">&quot;masterTransactionManager&quot;</span>)</span><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-keyword">public</span> DataSourceTransactionManager masterTransactionManager(<span class="hljs-meta">@Qualifier(<span class="hljs-meta-string">&quot;masterDataSource&quot;</span>)</span> DataSource dataSource) &#123;<br>        <span class="hljs-keyword">return</span> new DataSourceTransactionManager(dataSource);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * SqlSessionTemplate具有线程安全性</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sqlSessionFactory</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(name = <span class="hljs-meta-string">&quot;masterSqlSessionTemplate&quot;</span>)</span><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-keyword">public</span> SqlSessionTemplate masterSqlSessionTemplate(<span class="hljs-meta">@Qualifier(<span class="hljs-meta-string">&quot;masterSqlSessionFactory&quot;</span>)</span> SqlSessionFactory sqlSessionFactory) throws Exception &#123;<br>        <span class="hljs-keyword">return</span> new SqlSessionTemplate(sqlSessionFactory);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>问题</strong>：看这块<code>masterSqlSessionFactory</code>，<code>SqlSessionFactoryBean</code>只获取了<code>spring.datasource.master</code>数据库连接信息，并没有获取多数据库的配置信息<code>mybatis.configuration</code>导致我们需要配置驼峰命名规则，配置信息并没有注入到<code>SqlSessionFactoryBean</code>。这样就导致在查询是，遇到下划线无法解析相应字段user_id，dept_id，create_time</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/image01@main/picture/mybatis-mutli-04-01.png"></p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/image01@main/picture/mybatis-mutli-04-02.png"></p><p><strong>解决方法</strong>：在配置中添加Configuration</p><p>同时，将配置信息注入到SqlSessionFactoryBean</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将配置信息注入到SqlSessionFactoryBean中</span><br><span class="hljs-comment"> * @param dataSource    数据库连接信息</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> * @throws Exception</span><br><span class="hljs-comment"> */</span><br>@<span class="hljs-constructor">Bean(<span class="hljs-params">name</span> = <span class="hljs-string">&quot;slaveSqlSessionFactory&quot;</span>)</span><br>public SqlSessionFactory slave<span class="hljs-constructor">SqlSessionFactory(@Qualifier(<span class="hljs-string">&quot;slaveDataSource&quot;</span>)</span> DataSource dataSource) throws Exception &#123;<br>    SqlSessionFactoryBean bean = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SqlSessionFactoryBean()</span>;<br>    <span class="hljs-comment">// 使配置信息加载到类中，再注入到SqlSessionFactoryBean</span><br>    org.apache.ibatis.session.Configuration configuration = <span class="hljs-keyword">new</span> org.apache.ibatis.session.<span class="hljs-constructor">Configuration()</span>;<br>    configuration.set<span class="hljs-constructor">MapUnderscoreToCamelCase(<span class="hljs-params">true</span>)</span>;<br>    bean.set<span class="hljs-constructor">Configuration(<span class="hljs-params">configuration</span>)</span>;<br>    bean.set<span class="hljs-constructor">DataSource(<span class="hljs-params">dataSource</span>)</span>;<br>    bean.set<span class="hljs-constructor">MapperLocations(<span class="hljs-params">new</span> PathMatchingResourcePatternResolver()</span>.get<span class="hljs-constructor">Resources(<span class="hljs-string">&quot;classpath:mapper/slave/*.xml&quot;</span>)</span>);<br>    return bean.get<span class="hljs-constructor">Object()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、添加从库配置信息"><a href="#4、添加从库配置信息" class="headerlink" title="4、添加从库配置信息"></a>4、添加从库配置信息</h3><p>和添加主库配置信息一样，只不过不同的是，不需要添加<code>@Primary</code>首选注解</p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(basePackages = &quot;com.niaobulashi.mapper.slave&quot;, sqlSessionTemplateRef = &quot;slaveSqlSessionTemplate&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataSourceSlaveConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是application-test.yml中的spring.datasource.master配置生效</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(name = &quot;slaveDataSource&quot;)</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource.slave&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">slaveDataSource</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> DataSourceBuilder.create().build();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将配置信息注入到SqlSessionFactoryBean中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataSource    数据库连接信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(name = &quot;slaveSqlSessionFactory&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title">slaveSqlSessionFactory</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;slaveDataSource&quot;)</span> DataSource dataSource)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        SqlSessionFactoryBean bean = <span class="hljs-keyword">new</span> SqlSessionFactoryBean();<br>        <span class="hljs-comment">// 使配置信息加载到类中，再注入到SqlSessionFactoryBean</span><br>        org.apache.ibatis.session.Configuration configuration = <span class="hljs-keyword">new</span> org.apache.ibatis.session.Configuration();<br>        configuration.setMapUnderscoreToCamelCase(<span class="hljs-keyword">true</span>);<br>        bean.setConfiguration(configuration);<br>        bean.setDataSource(dataSource);<br>        bean.setMapperLocations(<span class="hljs-keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="hljs-string">&quot;classpath:mapper/slave/*.xml&quot;</span>));<br>        <span class="hljs-keyword">return</span> bean.getObject();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 事务管理器，在实例化时注入主库master</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataSource</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(name = &quot;slaveTransactionManager&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title">slaveTransactionManager</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;slaveDataSource&quot;)</span> DataSource dataSource)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DataSourceTransactionManager(dataSource);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * SqlSessionTemplate具有线程安全性</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sqlSessionFactory</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(name = &quot;slaveSqlSessionTemplate&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionTemplate <span class="hljs-title">slaveSqlSessionTemplate</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;slaveSqlSessionFactory&quot;)</span> SqlSessionFactory sqlSessionFactory)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SqlSessionTemplate(sqlSessionFactory);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、扩展配置方法会报错"><a href="#5、扩展配置方法会报错" class="headerlink" title="5、扩展配置方法会报错"></a>5、扩展配置方法会报错</h3><p>在网上还看到这样一种配置，单独通过@ConfigurationProperties注解配置Mybatis的配置信息如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 试application.yml中的mybatis.configuration配置生效，如果不主动配置，由于<span class="hljs-doctag">@Order</span>配置顺序不同，讲导致配置不能及时生效</span><br><span class="hljs-comment"> * 使配置信息加载到类中，再注入到SqlSessionFactoryBean</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;mybatis.configuration&quot;)</span><br><span class="hljs-keyword">public</span> org.apache.ibatis.session.<span class="hljs-function">Configuration <span class="hljs-title">configuration</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> org.apache.ibatis.session.Configuration();<br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>prefix</code>，在主库和从库中的id是一样的，必须保持不同，否则idea就会提示报错<code>Duplicate prefix</code></p><p>导致只有主库可以执行Mybatis的配置，从库无效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(name = &quot;masterSqlSessionFactory&quot;)</span><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title">masterSqlSessionFactory</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;masterDataSource&quot;)</span> DataSource dataSource, org.apache.ibatis.session.Configuration configuration)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        SqlSessionFactoryBean bean = <span class="hljs-keyword">new</span> SqlSessionFactoryBean();<br>        <span class="hljs-comment">// 使配置信息加载到类中，再注入到SqlSessionFactoryBean</span><br>        bean.setConfiguration(configuration);<br>        bean.setDataSource(dataSource);<br>        bean.setMapperLocations(<span class="hljs-keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="hljs-string">&quot;classpath:mapper/master/*.xml&quot;</span>));<br>        <span class="hljs-keyword">return</span> bean.getObject();<br>    &#125;<br></code></pre></td></tr></table></figure><p>这块验证只有主库有效，从库的驼峰方法解析无效。后续再来研究下。。。</p><h3 id="6、数据层代码"><a href="#6、数据层代码" class="headerlink" title="6、数据层代码"></a>6、数据层代码</h3><p>代码结构如下</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/image01@main/picture/mybatis-mutli-04-03.png"></p><p>其中SysUserMasterDao代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">SysUserMasterDao</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据userId查询用户信息</span><br><span class="hljs-comment"> * @param userId  用户ID</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">List&lt;SysUserEntity&gt; <span class="hljs-title">queryUserInfo</span>(<span class="hljs-params">Long userId</span>)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询所有用户信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">List&lt;SysUserEntity&gt; <span class="hljs-title">queryUserAll</span>(<span class="hljs-params"></span>)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据userId更新用户的邮箱和手机号</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">updateUserInfo</span>(<span class="hljs-params">SysUserEntity user</span>)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7、resource下数据执行语句"><a href="#7、resource下数据执行语句" class="headerlink" title="7、resource下数据执行语句"></a>7、resource下数据执行语句</h3><p>SysCodeMasterDao.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;mapper namespace=<span class="hljs-string">&quot;com.niaobulashi.mapper.master.SysUserMasterDao&quot;</span>&gt;<br><br>    &lt;!--查询所有用户信息--&gt;<br>    &lt;select id=<span class="hljs-string">&quot;queryUserAll&quot;</span> resultType=<span class="hljs-string">&quot;com.niaobulashi.entity.SysUserEntity&quot;</span>&gt;<br>        SELECT<br>            ur.*<br>        FROM<br>            sys_user ur<br>        WHERE<br>            <span class="hljs-number">1</span> = <span class="hljs-number">1</span><br>    &lt;/select&gt;<br><br>    &lt;!--根据用户userId查询用户信息--&gt;<br>    &lt;select id=<span class="hljs-string">&quot;queryUserInfo&quot;</span> resultType=<span class="hljs-string">&quot;com.niaobulashi.entity.SysUserEntity&quot;</span>&gt;<br>        SELECT<br>            ur.*<br>        FROM<br>            sys_user ur<br>        WHERE<br>            <span class="hljs-number">1</span> = <span class="hljs-number">1</span><br>          AND ur.user_id = #&#123;userId&#125;<br>    &lt;/select&gt;<br><br>    &lt;!-- 根据UserId，更新邮箱和手机号 --&gt;<br>    &lt;update id=<span class="hljs-string">&quot;updateUserInfo&quot;</span> parameterType=<span class="hljs-string">&quot;com.niaobulashi.entity.SysUserEntity&quot;</span>&gt;<br>        UPDATE sys_user u<br>        &lt;set&gt;<br>            &lt;<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;email != null&quot;</span>&gt;<br>                u.email = #&#123;email&#125;,<br>            &lt;/if&gt;<br>            &lt;<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;mobile != null&quot;</span>&gt;<br>                u.mobile = #&#123;mobile&#125;,<br>            &lt;/if&gt;<br>        &lt;/set&gt;<br>        WHERE<br>        u.user_id = #&#123;userId&#125;<br>    &lt;/update&gt;<br><br>&lt;/mapper&gt;<br></code></pre></td></tr></table></figure><p>8、Controller层测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysUserController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SysUserMasterDao sysUserMasterDao;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SysUserSlaveDao sysUserSlaveDao;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有用户信息Master</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/getUserMasterAll&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SysUserEntity&gt; <span class="hljs-title">getUserMaster</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;查询主库&quot;</span>);<br>        List&lt;SysUserEntity&gt; userList = sysUserMasterDao.queryUserAll();<br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有用户信息Slave</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/getUserSlaveAll&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SysUserEntity&gt; <span class="hljs-title">getUserSlave</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;查询从库&quot;</span>);<br>        List&lt;SysUserEntity&gt; userList = sysUserSlaveDao.queryUserAll();<br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据userId查询用户信息Master</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/getUserMasterById&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SysUserEntity&gt; <span class="hljs-title">getUserMasterById</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;userId&quot;, required = false)</span> Long userId)</span> </span>&#123;<br>        List&lt;SysUserEntity&gt; userList = sysUserMasterDao.queryUserInfo(userId);<br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据userId查询用户信息Slave</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/getUserSlaveById&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SysUserEntity&gt; <span class="hljs-title">getUserSlaveById</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;userId&quot;, required = false)</span> Long userId)</span> </span>&#123;<br>        List&lt;SysUserEntity&gt; userList = sysUserSlaveDao.queryUserInfo(userId);<br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、发送查询所有用户接口"><a href="#二、发送查询所有用户接口" class="headerlink" title="二、发送查询所有用户接口"></a>二、发送查询所有用户接口</h3><p>主库：<a href="http://localhost:8080/getUserMasterAll">http://localhost:8080/getUserMasterAll</a></p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/image01@main/picture/mybatis-mutli-04-04.png"></p><p>从库：<a href="http://localhost:8080/getUserSlaveAll">http://localhost:8080/getUserSlaveAll</a></p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/image01@main/picture/mybatis-mutli-04-05.png"></p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>1、通过多数据源方式实现数据库层面的读写分离</p><p>2、多数据源链接数据库是，使用spring.datasource.jdbc-url</p><p>3、多数据源的mybatis.configuration配置注意需要手动注入SqlSessionFactory</p><h2 id="示例代码-github"><a href="#示例代码-github" class="headerlink" title="示例代码-github"></a><a href="https://github.com/niaobulashi/spring-boot-learning/tree/master/spring-boot-13-multi-mybatis"><strong>示例代码-github</strong></a></h2>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot， Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot2(三)：使用Spring Boot2集成Redis缓存</title>
    <link href="/2019/06/30/2019-06-30-spring-boot-redis/"/>
    <url>/2019/06/30/2019-06-30-spring-boot-redis/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前面一节总结了<a href="https://niaobulashi.github.io/springboot/2019/06/28/mybatis-2levelcache.html">SpringBoot实现Mybatis的缓存机制</a>，但是实际项目中很少用到Mybatis的二级缓存机制，反而用到比较多的是第三方缓存<a href="https://redis.io/">Redis</a>。</p><p><strong>Redis</strong>是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。</p><h2 id="一、安装启动Redis"><a href="#一、安装启动Redis" class="headerlink" title="一、安装启动Redis"></a>一、安装启动Redis</h2><p>安装Redis的就不讲太多了，直接去<a href="https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100">官方下载redis</a>，下载<a href="https://github.com/microsoftarchive/redis/releases/download/win-3.2.100/Redis-x64-3.2.100.zip">Redis-x64-3.2.100.zip</a>，cmd，在redis目录下输入：redis-server.exe redis.windows.conf启动即可</p><p>另外可以通过Redis桌面客户端可视化连接工具操作：<a href="https://redisdesktop.com/">redisdesktop</a></p><h2 id="二、代码部署"><a href="#二、代码部署" class="headerlink" title="二、代码部署"></a>二、代码部署</h2><p>快速建立Spring Boot项目</p><h3 id="添加redis依赖"><a href="#添加redis依赖" class="headerlink" title="添加redis依赖"></a>添加redis依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">password:</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">jedis:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">1000</span>  <span class="hljs-comment"># 连接池最大连接数（使用负值表示没有限制）</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">-1ms</span>  <span class="hljs-comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">10</span>  <span class="hljs-comment"># 连接池中的最大空闲连接</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">5</span> <span class="hljs-comment"># 连接池中的最小空闲连接</span><br></code></pre></td></tr></table></figure><h3 id="RedisConfig配置类"><a href="#RedisConfig配置类" class="headerlink" title="RedisConfig配置类"></a>RedisConfig配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisConnectionFactory factory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">()</span> </span>&#123;<br>    RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> RedisTemplate&lt;&gt;();<br>    <span class="hljs-comment">//更改在redis里面查看key编码问题</span><br>    redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> StringRedisSerializer());<br>    redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> StringRedisSerializer());<br>    redisTemplate.setHashValueSerializer(<span class="hljs-keyword">new</span> StringRedisSerializer());<br>    redisTemplate.setValueSerializer(<span class="hljs-keyword">new</span> JdkSerializationRedisSerializer());<br>    redisTemplate.setConnectionFactory(factory);<br>    <span class="hljs-keyword">return</span> redisTemplate;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="RedisUtils工具类"><a href="#RedisUtils工具类" class="headerlink" title="RedisUtils工具类"></a>RedisUtils工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><span class="hljs-comment">// 简单的K-V操作</span><br><span class="hljs-meta">@Resource(name=&quot;redisTemplate&quot;)</span><br><span class="hljs-keyword">private</span> ValueOperations&lt;String, String&gt; valueOperations;<br><br><span class="hljs-comment">// 针对Map类型的数据操作</span><br><span class="hljs-meta">@Resource(name=&quot;redisTemplate&quot;)</span><br><span class="hljs-keyword">private</span> HashOperations&lt;String, String, Object&gt; hashOperations;<br><br><span class="hljs-comment">// 针对List类型的数据操作</span><br><span class="hljs-meta">@Resource(name=&quot;redisTemplate&quot;)</span><br><span class="hljs-keyword">private</span> ListOperations&lt;String, Object&gt; listOperations;<br><br><span class="hljs-comment">// set类型数据操作</span><br><span class="hljs-meta">@Resource(name=&quot;redisTemplate&quot;)</span><br><span class="hljs-keyword">private</span> SetOperations&lt;String, Object&gt; setOperations;<br><br><span class="hljs-comment">// zset类型数据操作</span><br><span class="hljs-meta">@Resource(name=&quot;redisTemplate&quot;)</span><br><span class="hljs-keyword">private</span> ZSetOperations&lt;String, Object&gt; zSetOperations;<br></code></pre></td></tr></table></figure><h3 id="实体类SysCodeEntity"><a href="#实体类SysCodeEntity" class="headerlink" title="实体类SysCodeEntity"></a>实体类SysCodeEntity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysCodeEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><br>    <span class="hljs-comment">// 分类编码</span><br>    <span class="hljs-keyword">private</span> String kindCode;<br><br>    <span class="hljs-comment">// 分类名称</span><br>    <span class="hljs-keyword">private</span> String kindName;<br><br>    <span class="hljs-comment">// CODE编码</span><br>    <span class="hljs-keyword">private</span> String code;<br>......<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ServiceImpl实现类"><a href="#ServiceImpl实现类" class="headerlink" title="ServiceImpl实现类"></a>ServiceImpl实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询所有数字字典</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SysCodeEntity&gt; <span class="hljs-title">queryCodeAll</span><span class="hljs-params">()</span> </span>&#123;<br>    logger.info(<span class="hljs-string">&quot;先从缓存中查找，如果没有则去数据进行查询&quot;</span>);<br>    List&lt;SysCodeEntity&gt; codeList = (List&lt;SysCodeEntity&gt;)redisTemplate.opsForList().leftPop(<span class="hljs-string">&quot;codeList&quot;</span>);<br>    <span class="hljs-keyword">if</span> (codeList == <span class="hljs-keyword">null</span>) &#123;<br>        logger.info(<span class="hljs-string">&quot;说明缓存中没有数据，则到数据库中查询&quot;</span>);<br>        codeList = sysCodeDao.queryCodeAll();<br><br>        logger.info(<span class="hljs-string">&quot;将数据库获取的数据存入缓存&quot;</span>);<br>        redisTemplate.opsForList().leftPush(<span class="hljs-string">&quot;codeList&quot;</span>, codeList);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        logger.info(<span class="hljs-string">&quot;则说明缓存中存在，直接从缓存中获取数据&quot;</span>);<br>    &#125;<br>    logger.info(<span class="hljs-string">&quot;codeList=&quot;</span> + codeList);<br>    <span class="hljs-keyword">return</span> codeList;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面例子具体解释已经在注释中体现，通过opsForList的leftPop和leftPush存入和获取Redis缓存的数据。</p><h3 id="Controller层实现"><a href="#Controller层实现" class="headerlink" title="Controller层实现"></a>Controller层实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询所有数字字典</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/getAll&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SysCodeEntity&gt; <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>    Long startTime = System.currentTimeMillis(); <span class="hljs-comment">//开始时间</span><br>    List&lt;SysCodeEntity&gt; codeList = sysCodeService.queryCodeAll();<br>    Long endTime = System.currentTimeMillis(); <span class="hljs-comment">//结束时间</span><br>    System.out.println(<span class="hljs-string">&quot;查询数据库--共耗时：&quot;</span> + (endTime - startTime) + <span class="hljs-string">&quot;毫秒&quot;</span>); <span class="hljs-comment">//1007毫秒</span><br>    <span class="hljs-keyword">return</span> codeList;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Postman进行测试"><a href="#Postman进行测试" class="headerlink" title="Postman进行测试"></a>Postman进行测试</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">http:<span class="hljs-regexp">//l</span>ocalhost:<span class="hljs-number">8080</span>/getAll<br></code></pre></td></tr></table></figure><h3 id="日志信息"><a href="#日志信息" class="headerlink" title="日志信息"></a>日志信息</h3><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/image01@main/picture/springboot_03_01.png"></p><h2 id="三、总结和扩展"><a href="#三、总结和扩展" class="headerlink" title="三、总结和扩展"></a>三、总结和扩展</h2><p>1、Redis支持：字符串String、哈希Hash、列表List、集合Set、有序集合Sorted Set、发布订阅Pub/Sub、事务Transactions，7种数据类型</p><p>2、Redis实用场景：缓存系统、计数器、消息列队系统、排行版及相关问题、社交网络、按照用户投票和时间排序、过期项目处理、实时系统</p><p>3、Redis的高级功能：慢查询（内部执行时间超过某个指定的时限查询）、PipeLine管道（降低客户端与redis通信次数，适用于批处理）、BitMap位图（针对大数据量设计）、HyperLogLog（极小空间完成独立数据统计）、发布订阅、消息队列、GEO地理位置存储</p><p>4、Redis持久化：</p><p>​    快照RDB（使用<a href="https://zh.wikipedia.org/w/index.php?title=%E5%BF%AB%E7%85%A7&action=edit&redlink=1">快照</a>，一种半持久耐用模式。不时的将数据集以异步方式从内存以RDB格式写入硬盘）</p><p>​    日志AOF（1.1版本开始使用更安全的AOF格式替代，一种只能追加的日志类型。将数据集修改操作记录起来。Redis能够在后台对只可追加的记录作修改来避免无限增长的日志）</p><p>5、Redis分布式解决方案：主从复制、集群…</p><h2 id="示例代码-github"><a href="#示例代码-github" class="headerlink" title="示例代码-github"></a><a href="https://github.com/niaobulashi/spring-boot-learning/tree/master/spring-boot-12-mybatis-redis"><strong>示例代码-github</strong></a></h2><p>后期持续探索Redis技术 To be continued…</p><p>推荐阅读：<a href="https://gitbook.cn/gitchat/column/5a55d8e232c7126d8482f5d2"><strong>Redis 入门到分布式实践</strong></a></p><hr>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot2(二)：使用Spring Boot2集成Mybatis缓存机制</title>
    <link href="/2019/06/28/2019-06-28-mybatis-2levelcache/"/>
    <url>/2019/06/28/2019-06-28-mybatis-2levelcache/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>学习SpringBoot集成Mybatis的第二章，了解到Mybatis自带的缓存机制，在部署的时候踩过了一些坑。在此记录和分享一下Mybatis的缓存作用。</p><p> 本文章的源码再文章末尾</p><h2 id="什么是查询缓存"><a href="#什么是查询缓存" class="headerlink" title="什么是查询缓存"></a>什么是查询缓存</h2><p>MyBatis有一级缓存和二级缓存。记录可以看下这篇博文：</p><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>首先看一下什么是一级缓存，一级缓存是指SqlSession。一级缓存的作用域是一个SqlSession。Mybatis默认开启一级缓存。</p><p>在同一个SqlSession中，执行相同的查询SQL，第一次会去查询数据库，并写到缓存中；第二次直接从缓存中获取。当执行SQL查询前后发生增删改操作时，则SqlSession的缓存清空。</p><p>具体可以看这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLocalCacheScope</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        SqlSession sqlSession1 = factory.openSession(<span class="hljs-keyword">true</span>); <br>        SqlSession sqlSession2 = factory.openSession(<span class="hljs-keyword">true</span>); <br><br>        StudentMapper studentMapper = sqlSession1.getMapper(StudentMapper.class);<br>        StudentMapper studentMapper2 = sqlSession2.getMapper(StudentMapper.class);<br><br>        System.out.println(<span class="hljs-string">&quot;studentMapper读取数据: &quot;</span> + studentMapper.getStudentById(<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">&quot;studentMapper读取数据: &quot;</span> + studentMapper.getStudentById(<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">&quot;studentMapper2更新了&quot;</span> + studentMapper2.updateStudentName(<span class="hljs-string">&quot;小岑&quot;</span>,<span class="hljs-number">1</span>) + <span class="hljs-string">&quot;个学生的数据&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;studentMapper读取数据: &quot;</span> + studentMapper.getStudentById(<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">&quot;studentMapper2读取数据: &quot;</span> + studentMapper2.getStudentById(<span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>开启两个sqlSession</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/f480ac76.jpg"></p><p>从打印日志可以看出，前面两个说明sqlSession1的会话缓存生效了，第三个对sqlSession2会话执行了更新操作，这时候数据库发生数据变化，sqlSession2被清空。可是在执行第四个查询是，是查询的sqlSession1会话，由于sqlSession1没有被清空，所以还是查询的缓存的数据，是数据更新之前的，查询的是脏数据，一级缓存sqlSession是不共享的。证明了一级缓存只是在数据库会话内部共享的。</p><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>Mybatis的二级缓存是指mapper映射文件。二级缓存的作用域是同一个namespace下的mapper映射文件内容，<strong>多个SqlSession共享</strong>，Mybatis需要手动设置二级缓存。</p><p>在同一个namespace下的mapper文件中，执行相同的查询SQL，第一次会查询数据库，并写道缓存中；第二次z直接从缓存中获取。当执行SQL查询前后发生增删改操作时，则二级缓存清空。</p><p>上面说到二级缓存可以共享多个SqlSession。可以解决不同SqlSession回话中查询到脏数据的问题了。</p><h2 id="SpringBoot整合Mybatis开启二级缓存"><a href="#SpringBoot整合Mybatis开启二级缓存" class="headerlink" title="SpringBoot整合Mybatis开启二级缓存"></a>SpringBoot整合Mybatis开启二级缓存</h2><p>首先，Mybatis默认是开启一级缓存的，即同一个SqlSession每次查询都会去缓存中查询，没有数据的话，再去数据库获取数据。<strong>但是，整合到SpringBoot中后，一级缓存就会被关闭</strong>。为什么会出现这种原因呢，可以看下这篇文章：</p><p>好了，现在来创建项目，可以根据前一篇文章来创建项目，在这基础上修改</p><h3 id="pom-xml新增mybatis缓存包caches"><a href="#pom-xml新增mybatis缓存包caches" class="headerlink" title="pom.xml新增mybatis缓存包caches"></a>pom.xml新增mybatis缓存包caches</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="SysUserDao-xml添加开启Mybatis二级缓存"><a href="#SysUserDao-xml添加开启Mybatis二级缓存" class="headerlink" title="SysUserDao.xml添加开启Mybatis二级缓存"></a>SysUserDao.xml添加开启Mybatis二级缓存</h3><p>加上这个标签，二级缓存就会开启，他的默认属性如下</p><ul><li><p>映射语句文件中的所有 select 语句将会被缓存。</p></li><li><p>映射语句文件中的所有 insert,update 和 delete 语句会刷新缓存。</p></li><li><p>缓存会使用 Least Recently Used(LRU,最近最少使用的)算法来收回。</p></li><li><p>根据时间表(比如 no Flush Interval,没有刷新间隔), 缓存不会以任何时间顺序来刷新。</p></li><li><p>缓存会存储列表集合或对象(无论查询方法返回什么)的 1024 个引用。</p></li><li><p>缓存会被视为是 read/write(可读/可写)的缓存,意味着对象检索不是共享的,而且可以安全地被调用者修改,而不干扰其他调用者或线程所做的潜在修改。</p><p>也可以自定义二级缓存的属性，例如：</p></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;cache<br>  <span class="hljs-attribute">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span><br>  <span class="hljs-attribute">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span><br>  <span class="hljs-attribute">size</span>=<span class="hljs-string">&quot;512&quot;</span><br>  <span class="hljs-attribute">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>   这个更高级的配置创建了一个 FIFO 缓存,并每隔 60 秒刷新,存数结果对象或列表的 512 个引用,而且返回的对象被认为是只读的,因此在不同线程中的调用者之间修改它们会 导致冲突。</p><p>​        可用的收回策略有:</p><ul><li>LRU – 最近最少使用的:移除最长时间不被使用的对象。</li><li>FIFO – 先进先出:按对象进入缓存的顺序来移除它们。</li><li>SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。</li><li>WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li></ul><p>默认的是 LRU。</p><p>  flushInterval(刷新间隔)可以被设置为任意的正整数,而且它们代表一个合理的毫秒 形式的时间段。默认情况是不设置,也就是没有刷新间隔,缓存仅仅调用语句时刷新。</p><p>​        size(引用数目)可以被设置为任意正整数,要记住你缓存的对象数目和你运行环境的 可用内存资源数目。默认值是 1024。</p><p>​        readOnly(只读)属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓 存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。可读写的缓存 会返回缓存对象的拷贝(通过序列化) 。这会慢一些,但是安全,因此默认是 false。</p><h2 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h2><p>编写Controller接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询所有用户信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/getAll&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SysUserEntity&gt; <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;SysUserEntity&gt; userList = sysUserService.queryUserAll();<br>    <span class="hljs-keyword">return</span> userList;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据userId查询用户信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/getUser&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SysUserEntity&gt; <span class="hljs-title">getUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;userId&quot;, required = false)</span> Long userId)</span> </span>&#123;<br>    List&lt;SysUserEntity&gt; userList = sysUserService.queryUserInfo(userId);<br>    <span class="hljs-keyword">return</span> userList;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新用户信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/updateUser&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> SysUserEntity user)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> sysUserService.updateUserInfo(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过postman发送接口请求进行测试：</p><ul><li><p>1、发送查询用户全部信息：<a href="http://localhost:8080/getAll">http://localhost:8080/getAll</a></p></li><li><p>2、根据userId查询用户信息：<a href="http://localhost:8080/getUser?userId=1">http://localhost:8080/getUser?userId=1</a></p></li><li><p>3、更新用户信息<a href="http://localhost:8080/updateUser">http://localhost:8080/updateUser</a></p><p>更新用户信息接口发送报文:</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;userId&quot;</span>:<span class="hljs-number">5</span>,<br><span class="hljs-attr">&quot;email&quot;</span>:<span class="hljs-string">&quot;12321321&quot;</span>,<br><span class="hljs-attr">&quot;mobile&quot;</span>:<span class="hljs-string">&quot;11111111111213&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通过日志可以看到，第一次发送1接口请求，对数据库进行了查询</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/image01@main/picture/mybatis_02_01.png"></p><p>可以看到，第二次和第三次查询没有查询数据库的SQL打印，而是去数据库获取数据</p><p>此时发送3接口，进行更新操作，在发送1接口，查询改用户的数据</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/image01@main/picture/mybatis_02_02.png"></p><p>可以看到，当执行数据库更新操作后，再进行查询，此时缓存已经清空，需要从数据库中重新查询获取。</p><p>这就演示了SpringBoot整合Mybatis的缓存机制测试。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、缓存的对象必须实现序列化。因为二级缓存的数据不一定都是存储到内存中，它的存储介质多种多样，所以需要给缓存的对象执行序列化，才可以确保获取无误。</p><p>2、Mybatis的二级缓存相比于一级缓存来说，实现了SqlSession之间的缓存数据的共享，做到namespace级别，粒度更细</p><p>3、在分布式环境下，由于默认的MyBatis Cache实现都是基于本地的，分布式环境下必然会出现读取到脏数据，需要使用集中式缓存将MyBatis的Cache接口实现，有一定的开发成本，直接使用Redis、Memcached等分布式缓存可能成本更低，安全性也更高。</p><p>不过建议Mybatis的缓存特性再生产环境下进行关闭，单纯作为一个<a href="https://www.cnblogs.com/wisdo/p/4279091.html">ORM框架</a>使用可能更加合适。</p><p>下篇文章计划写SpringBoot整合Mybatis，使用Redis实现缓存基本配置。</p><p><strong><a href="https://github.com/niaobulashi/spring-boot-learning/tree/master/spring-boot-11-mybatis-cache">示例代码-github</a></strong></p><hr>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Mybatis</tag>
      
      <tag>Cache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot2版的权限管理系统</title>
    <link href="/2019/06/28/2019-06-28-myproject-niaobulashi/"/>
    <url>/2019/06/28/2019-06-28-myproject-niaobulashi/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>github项目地址：<a href="https://github.com/niaobulashi/niaobulashi">https://github.com/niaobulashi/niaobulashi</a></p><p>springboot学习地址：<a href="http://www.ityouknow.com/spring-boot.html">http://www.ityouknow.com/spring-boot.html</a></p><p>shiro学习地址：<a href="https://jinnianshilongnian.iteye.com/blog/2018398">https://jinnianshilongnian.iteye.com/blog/2018398</a></p><p>在线演示地址：<a href="http://manage.niaobulashi.com/">http://manage.niaobulashi.com</a></p><p>登录名和密码：niaobulashi/niaobulashi</p><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a><strong>项目说明</strong></h2><ul><li>采用SpringBoot、MyBatis、Shiro框架，开发的一套权限系统，极低门槛，拿来即用。设计之初，就非常注重安全性，为企业系统保驾护航，让一切都变得如此简单。</li><li>提供了代码生成器，只需编写30%左右代码，其余的代码交给系统自动生成，可快速完成开发任务</li><li>支持MySQL、Oracle、SQL Server、PostgreSQL等主流数据库</li></ul><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a><strong>项目结构</strong></h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">niaobulashi<br>├─niaobulashi-<span class="hljs-keyword">admin</span>      管理后台<br>│    ├─db  数据库<span class="hljs-keyword">SQL</span>脚本<br>│    │ <br>│    ├─modules  模块<br>│    │    ├─job 定时任务<br>│    │    ├─oss 文件存储<br>│    │    └─sys 系统管理(核心)<br>│    │ <br>│    └─resources <br>│        ├─mapper   MyBatis文件<br>│        ├─statics  静态资源<br>│        ├─<span class="hljs-keyword">template</span> 系统页面<br>│        │    ├─modules      模块页面<br>│        │    ├─<span class="hljs-keyword">index</span>.html   AdminLTE主题风格（默认主题）<br>│        │    └─index1.html  主题风格<br>│        └─application.yml   全局配置文件<br>├─niaobulashi-api        API服务<br>├─niaobulashi-common     公共模块<br>├─niaobulashi-dynamic-datasource     多数据源<br>├─niaobulashi-generator  代码生成器<br>│             └─resources <br>│                   ├─mapper   MyBatis文件<br>│                   ├─<span class="hljs-keyword">template</span> 代码生成器模板（可增加或修改相应模板）<br>│                   ├─application.yml    全局配置文件<br>│                   └─generator.properties   代码生成器，配置文件<br>│<br></code></pre></td></tr></table></figure><h2 id="项目模块"><a href="#项目模块" class="headerlink" title="项目模块"></a><strong>项目模块</strong></h2><ul><li>niaobulashi-common为公共模块，其他模块以jar包的形式引入进去，主要提供些工具类，以及renren-admin、renren-api模块公共的entity、mapper、dao、service服务，防止一个功能重复多次编写代码。</li><li>niaobulashi-admin为后台模块，也是系统的核心，用来开发后台管理系统，可以打包成jar，部署到服务器上运行，或者打包成war，放到Tomcat8.5+容器里运行。</li><li>niaobulashi-api为接口模块，主要是简化APP开发，如：为微信小程序、IOS、Android提供接口，拥有一套单独的用户体系，没有与renren-admin用户表共用，因为renren-admin用户表里存放的是企业内部人员账号，具有后台管理员权限，可以登录后台管理系统，而renren-api用户表里存放的是我们的真实用户，不具备登录后台管理系统的权限。renren-api主要是实现了用户注册、登录、接口权限认证、获取登录用户等功能，为APP接口的安全调用，提供一套优雅的解决方案，从而简化APP接口开发。</li><li>niaobulashi-generator为代码生成器模块，只需在MySQL数据库里，创建好表结构，就可以生成新增、修改、删除、查询、导出等操作的代码，包括entity、mapper、dao、service、controller、页面等所有代码，项目开发神器。可以作为单独的项目运行，我已经将这部分的模块移植到了niaobulashi-admin</li></ul><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a><strong>技术选型</strong></h2><p>核心框架：Spring Boot 2.1<br>安全框架：Apache Shiro 1.4<br>视图框架：Spring MVC 5.0<br>持久层框架：MyBatis 3.5<br>定时器：Quartz 2.3<br>数据库连接池：Druid 1.1<br>日志管理：SLF4J 1.7、Log4j<br>页面交互：Vue2.x</p><h2 id="软件需求"><a href="#软件需求" class="headerlink" title="软件需求"></a><strong>软件需求</strong></h2><ul><li>JDK12</li><li>MySQL5.5+</li><li>Maven3.0+</li></ul><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a><strong>本地部署</strong></h2><ul><li>idea通过：<a href="https://github.com/niaobulashi/niaobulashi">https://github.com/niaobulashi/niaobulashi</a>  进行clone到本地</li><li>在项目目录：resources/db找到数据库文件，部署到本地</li><li>修改配置文件application-test.yml，数据库改为本地的用户名和密码</li><li>直接启动，访问：localhost:8080</li><li>登录名和密码：admin/admin</li></ul><h2 id="Linux部署"><a href="#Linux部署" class="headerlink" title="Linux部署"></a><strong>Linux部署</strong></h2><ul><li>打包成jar，在主项目niaobulashi上进行打包，mvn clean install</li><li>会生成相应项目的jar包，放在Linux目标目录下，执行java -jar 包名</li></ul><h2 id="运行可能会遇到的问题"><a href="#运行可能会遇到的问题" class="headerlink" title="运行可能会遇到的问题"></a><strong>运行可能会遇到的问题</strong></h2><ul><li>启动可能报错，mysql严格区分大小写，可能找不到表，解决方案：mysql不区分大小写</li><li>没有/tmp/spring.log目录权限，解决方案：在root用户下，添加写权限sudo chmod 777 spring.log</li><li>登陆页面的验证码显示乱码，原因：linux没有安装字体，解决方案：linux安装字体</li></ul><h2 id="根据项目信息截图"><a href="#根据项目信息截图" class="headerlink" title="根据项目信息截图"></a><strong>根据项目信息截图</strong></h2><p><img src="https://img2018.cnblogs.com/blog/1438593/201906/1438593-20190616153400635-1101498470.png" alt="请输入图片描述"></p><p><img src="https://img2018.cnblogs.com/blog/1438593/201906/1438593-20190616153421792-613530570.png" alt="请输入图片描述"></p><p><img src="https://img2018.cnblogs.com/blog/1438593/201906/1438593-20190616153453457-2123784717.png" alt="请输入图片描述"></p><p><img src="https://img2018.cnblogs.com/blog/1438593/201906/1438593-20190616153604556-1621950822.png" alt="请输入图片描述"></p><p><img src="https://img2018.cnblogs.com/blog/1438593/201906/1438593-20190616153515427-507006984.png" alt="请输入图片描述"></p><p><img src="https://img2018.cnblogs.com/blog/1438593/201906/1438593-20190616153724452-154266737.png" alt="请输入图片描述"></p><p>ps：日报管理模块没有实际功能，只是个菜单而已，后期进行维护</p><hr>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>聊聊MyBatis缓存机制</title>
    <link href="/2019/06/27/2019-06-27-mybatis-cache/"/>
    <url>/2019/06/27/2019-06-27-mybatis-cache/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>MyBatis是常见的Java数据库访问层框架。在日常工作中，开发人员多数情况下是使用MyBatis的默认缓存配置，但是MyBatis缓存机制有一些不足之处，在使用中容易引起脏数据，形成一些潜在的隐患。个人在业务开发中也处理过一些由于MyBatis缓存引发的开发问题，带着个人的兴趣，希望从应用及源码的角度为读者梳理MyBatis缓存机制。官方说明：<code>MyBatis Spring-Boot-Starter will help you use MyBatis with Spring Boot</code><br>其实就是 Mybatis 看 Spring Boot 这么火热也开发出一套解决方案来凑凑热闹，但这一凑确实解决了很多问题，使用起来确实顺畅了许多。<code>mybatis-spring-boot-starter</code>主要有两种解决方案，一种是使用注解解决一切问题，一种是简化后的老传统。</p><p>本次分析中涉及到的代码和数据库表均放在GitHub上，地址： <a href="https://github.com/kailuncen/mybatis-cache-demo">mybatis-cache-demo</a> </p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>本文按照以下顺序展开。</p><ul><li>一级缓存介绍及相关配置。</li><li>一级缓存工作流程及源码分析。</li><li>一级缓存总结。</li><li>二级缓存介绍及相关配置。</li><li>二级缓存源码分析。</li><li>二级缓存总结。</li><li>全文总结。</li></ul><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><h3 id="一级缓存介绍"><a href="#一级缓存介绍" class="headerlink" title="一级缓存介绍"></a>一级缓存介绍</h3><p>在应用运行过程中，我们有可能在一次数据库会话中，执行多次查询条件完全相同的SQL，MyBatis提供了一级缓存的方案优化这部分场景，如果是相同的SQL语句，会优先命中一级缓存，避免直接对数据库进行查询，提高性能。具体执行过程如下图所示。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/6e38df6a.jpg" alt="img"></p><p>每个SqlSession中持有了Executor，每个Executor中有一个LocalCache。当用户发起查询时，MyBatis根据当前执行的语句生成<code>MappedStatement</code>，在Local Cache进行查询，如果缓存命中的话，直接返回结果给用户，如果缓存没有命中的话，查询数据库，结果写入<code>Local Cache</code>，最后返回结果给用户。具体实现类的类关系图如下图所示。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/d76ec5fe.jpg" alt="img"></p><h3 id="一级缓存配置"><a href="#一级缓存配置" class="headerlink" title="一级缓存配置"></a>一级缓存配置</h3><p>我们来看看如何使用MyBatis一级缓存。开发者只需在MyBatis的配置文件中，添加如下语句，就可以使用一级缓存。共有两个选项，<code>SESSION</code>或者<code>STATEMENT</code>，默认是<code>SESSION</code>级别，即在一个MyBatis会话中执行的所有语句，都会共享这一个缓存。一种是<code>STATEMENT</code>级别，可以理解为缓存只对当前执行的这一个<code>Statement</code>有效。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;setting <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;localCacheScope&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;SESSION&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h3 id="一级缓存实验"><a href="#一级缓存实验" class="headerlink" title="一级缓存实验"></a>一级缓存实验</h3><p>接下来通过实验，了解MyBatis一级缓存的效果，每个单元测试后都请恢复被修改的数据。</p><p>首先是创建示例表student，创建对应的POJO类和增改的方法，具体可以在entity包和mapper包中查看。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `student` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">COLLATE</span> utf8_bin <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `age` tinyint(<span class="hljs-number">3</span>) unsigned <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin;<br></code></pre></td></tr></table></figure><p>在以下实验中，id为1的学生名称是凯伦。</p><h4 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h4><p>开启一级缓存，范围为会话级别，调用三次<code>getStudentById</code>，代码如下所示：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public void get<span class="hljs-constructor">StudentById()</span> throws Exception &#123;<br>        SqlSession sqlSession = factory.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session(<span class="hljs-params">true</span>)</span>; <span class="hljs-comment">// 自动提交事务</span><br>        StudentMapper studentMapper = sqlSession.get<span class="hljs-constructor">Mapper(StudentMapper.<span class="hljs-params">class</span>)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(studentMapper.get<span class="hljs-constructor">StudentById(1)</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(studentMapper.get<span class="hljs-constructor">StudentById(1)</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(studentMapper.get<span class="hljs-constructor">StudentById(1)</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/9e996384.jpg" alt="img"></p><p>我们可以看到，只有第一次真正查询了数据库，后续的查询使用了一级缓存。</p><h4 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h4><p>增加了对数据库的修改操作，验证在一次数据库会话中，如果对数据库发生了修改操作，一级缓存是否会失效。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void add<span class="hljs-constructor">Student()</span> throws Exception &#123;<br>        SqlSession sqlSession = factory.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session(<span class="hljs-params">true</span>)</span>; <span class="hljs-comment">// 自动提交事务</span><br>        StudentMapper studentMapper = sqlSession.get<span class="hljs-constructor">Mapper(StudentMapper.<span class="hljs-params">class</span>)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(studentMapper.get<span class="hljs-constructor">StudentById(1)</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;增加了&quot;</span> + studentMapper.add<span class="hljs-constructor">Student(<span class="hljs-params">buildStudent</span>()</span>) + <span class="hljs-string">&quot;个学生&quot;</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(studentMapper.get<span class="hljs-constructor">StudentById(1)</span>);<br>        sqlSession.close<span class="hljs-literal">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/fb6a78e0.jpg" alt="img"></p><p>我们可以看到，在修改操作后执行的相同查询，查询了数据库，<strong>一级缓存失效</strong>。</p><h4 id="实验3"><a href="#实验3" class="headerlink" title="实验3"></a>实验3</h4><p>开启两个<code>SqlSession</code>，在<code>sqlSession1</code>中查询数据，使一级缓存生效，在<code>sqlSession2</code>中更新数据库，验证一级缓存只在数据库会话内部共享。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void test<span class="hljs-constructor">LocalCacheScope()</span> throws Exception &#123;<br>        SqlSession sqlSession1 = factory.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session(<span class="hljs-params">true</span>)</span>; <br>        SqlSession sqlSession2 = factory.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session(<span class="hljs-params">true</span>)</span>; <br><br>        StudentMapper studentMapper = sqlSession1.get<span class="hljs-constructor">Mapper(StudentMapper.<span class="hljs-params">class</span>)</span>;<br>        StudentMapper studentMapper2 = sqlSession2.get<span class="hljs-constructor">Mapper(StudentMapper.<span class="hljs-params">class</span>)</span>;<br><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;studentMapper读取数据: &quot;</span> + studentMapper.get<span class="hljs-constructor">StudentById(1)</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;studentMapper读取数据: &quot;</span> + studentMapper.get<span class="hljs-constructor">StudentById(1)</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;studentMapper2更新了&quot;</span> + studentMapper2.update<span class="hljs-constructor">StudentName(<span class="hljs-string">&quot;小岑&quot;</span>,1)</span> + <span class="hljs-string">&quot;个学生的数据&quot;</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;studentMapper读取数据: &quot;</span> + studentMapper.get<span class="hljs-constructor">StudentById(1)</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;studentMapper2读取数据: &quot;</span> + studentMapper2.get<span class="hljs-constructor">StudentById(1)</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/f480ac76.jpg" alt="img"></p><p><code>sqlSession2</code>更新了id为1的学生的姓名，从凯伦改为了小岑，但session1之后的查询中，id为1的学生的名字还是凯伦，出现了脏数据，也证明了之前的设想，一级缓存只在数据库会话内部共享。</p><h3 id="一级缓存工作流程-amp-源码分析"><a href="#一级缓存工作流程-amp-源码分析" class="headerlink" title="一级缓存工作流程&amp;源码分析"></a>一级缓存工作流程&amp;源码分析</h3><p>那么，一级缓存的工作流程是怎样的呢？我们从源码层面来学习一下。</p><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><p>一级缓存执行的时序图，如下图所示。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/bb851700.png" alt="img"></p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>接下来将对MyBatis查询相关的核心类和一级缓存的源码进行走读。这对后面学习二级缓存也有帮助。</p><p><strong>SqlSession</strong>： 对外提供了用户和数据库之间交互需要的所有方法，隐藏了底层的细节。默认实现类是<code>DefaultSqlSession</code>。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/ba96bc7f.jpg" alt="img"></p><p><strong>Executor</strong>： <code>SqlSession</code>向用户提供操作数据库的方法，但和数据库操作有关的职责都会委托给Executor。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/ef5e0eb3.jpg" alt="img"></p><p>如下图所示，Executor有若干个实现类，为Executor赋予了不同的能力，大家可以根据类名，自行学习每个类的基本作用。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/83326eb3.jpg" alt="img"></p><p>在一级缓存的源码分析中，主要学习<code>BaseExecutor</code>的内部实现。</p><p><strong>BaseExecutor</strong>： <code>BaseExecutor</code>是一个实现了Executor接口的抽象类，定义若干抽象方法，在执行的时候，把具体的操作委托给子类进行执行。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">protected abstract <span class="hljs-built_in">int</span> <span class="hljs-keyword">do</span><span class="hljs-constructor">Update(MappedStatement <span class="hljs-params">ms</span>, Object <span class="hljs-params">parameter</span>)</span> throws SQLException;<br>protected abstract List&lt;BatchResult&gt; <span class="hljs-keyword">do</span><span class="hljs-constructor">FlushStatements(<span class="hljs-params">boolean</span> <span class="hljs-params">isRollback</span>)</span> throws SQLException;<br>protected abstract &lt;E&gt; List&lt;E&gt; <span class="hljs-keyword">do</span><span class="hljs-constructor">Query(MappedStatement <span class="hljs-params">ms</span>, Object <span class="hljs-params">parameter</span>, RowBounds <span class="hljs-params">rowBounds</span>, ResultHandler <span class="hljs-params">resultHandler</span>, BoundSql <span class="hljs-params">boundSql</span>)</span> throws SQLException;<br>protected abstract &lt;E&gt; Cursor&lt;E&gt; <span class="hljs-keyword">do</span><span class="hljs-constructor">QueryCursor(MappedStatement <span class="hljs-params">ms</span>, Object <span class="hljs-params">parameter</span>, RowBounds <span class="hljs-params">rowBounds</span>, BoundSql <span class="hljs-params">boundSql</span>)</span> throws SQLException;<br></code></pre></td></tr></table></figure><p>在一级缓存的介绍中提到对<code>Local Cache</code>的查询和写入是在<code>Executor</code>内部完成的。在阅读<code>BaseExecutor</code>的代码后发现<code>Local Cache</code>是<code>BaseExecutor</code>内部的一个成员变量，如下代码所示。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">BaseExecutor</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Executor</span> &#123;<br><span class="hljs-keyword">protected</span> ConcurrentLinkedQueue&lt;DeferredLoad&gt; deferredLoads;<br><span class="hljs-keyword">protected</span> PerpetualCache localCache;<br></code></pre></td></tr></table></figure><p><strong>Cache</strong>： MyBatis中的Cache接口，提供了和缓存相关的最基本的操作，如下图所示：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/793031d0.jpg" alt="img"></p><p>有若干个实现类，使用装饰器模式互相组装，提供丰富的操控缓存的能力，部分实现类如下图所示：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/cdb21712.jpg" alt="img"></p><p><code>BaseExecutor</code>成员变量之一的<code>PerpetualCache</code>，是对Cache接口最基本的实现，其实现非常简单，内部持有HashMap，对一级缓存的操作实则是对HashMap的操作。如下代码所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PerpetualCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cache</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> id;<br>  <span class="hljs-keyword">private</span> Map&lt;<span class="hljs-keyword">Object</span>, <span class="hljs-keyword">Object</span>&gt; cache = <span class="hljs-keyword">new</span> HashMap&lt;<span class="hljs-keyword">Object</span>, <span class="hljs-keyword">Object</span>&gt;();<br></code></pre></td></tr></table></figure><p>在阅读相关核心类代码后，从源代码层面对一级缓存工作中涉及到的相关代码，出于篇幅的考虑，对源码做适当删减，读者朋友可以结合本文，后续进行更详细的学习。</p><p>为执行和数据库的交互，首先需要初始化<code>SqlSession</code>，通过<code>DefaultSqlSessionFactory</code>开启<code>SqlSession</code>：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> SqlSession <span class="hljs-keyword">open</span><span class="hljs-constructor">SessionFromDataSource(ExecutorType <span class="hljs-params">execType</span>, TransactionIsolationLevel <span class="hljs-params">level</span>, <span class="hljs-params">boolean</span> <span class="hljs-params">autoCommit</span>)</span> &#123;<br>    ............<br>    final Executor executor = configuration.<span class="hljs-keyword">new</span><span class="hljs-constructor">Executor(<span class="hljs-params">tx</span>, <span class="hljs-params">execType</span>)</span>;     <br>    return <span class="hljs-keyword">new</span> <span class="hljs-constructor">DefaultSqlSession(<span class="hljs-params">configuration</span>, <span class="hljs-params">executor</span>, <span class="hljs-params">autoCommit</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在初始化<code>SqlSesion</code>时，会使用<code>Configuration</code>类创建一个全新的<code>Executor</code>，作为<code>DefaultSqlSession</code>构造函数的参数，创建Executor代码如下所示：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public Executor <span class="hljs-keyword">new</span><span class="hljs-constructor">Executor(Transaction <span class="hljs-params">transaction</span>, ExecutorType <span class="hljs-params">executorType</span>)</span> &#123;<br>    executorType = executorType<span class="hljs-operator"> == </span>null ? defaultExecutorType : executorType;<br>    executorType = executorType<span class="hljs-operator"> == </span>null ? ExecutorType.SIMPLE : executorType;<br>    Executor executor;<br>    <span class="hljs-keyword">if</span> (ExecutorType.BATCH<span class="hljs-operator"> == </span>executorType) &#123;<br>      executor = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BatchExecutor(<span class="hljs-params">this</span>, <span class="hljs-params">transaction</span>)</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ExecutorType.REUSE<span class="hljs-operator"> == </span>executorType) &#123;<br>      executor = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ReuseExecutor(<span class="hljs-params">this</span>, <span class="hljs-params">transaction</span>)</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      executor = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleExecutor(<span class="hljs-params">this</span>, <span class="hljs-params">transaction</span>)</span>;<br>    &#125;<br>    <span class="hljs-comment">// 尤其可以注意这里，如果二级缓存开关开启的话，是使用CahingExecutor装饰BaseExecutor的子类</span><br>    <span class="hljs-keyword">if</span> (cacheEnabled) &#123;<br>      executor = <span class="hljs-keyword">new</span> <span class="hljs-constructor">CachingExecutor(<span class="hljs-params">executor</span>)</span>;                      <br>    &#125;<br>    executor = (Executor) interceptorChain.plugin<span class="hljs-constructor">All(<span class="hljs-params">executor</span>)</span>;<br>    return executor;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SqlSession</code>创建完毕后，根据Statment的不同类型，会进入<code>SqlSession</code>的不同方法中，如果是<code>Select</code>语句的话，最后会执行到<code>SqlSession</code>的<code>selectList</code>，代码如下所示：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>public &lt;E&gt; List&lt;E&gt; select<span class="hljs-constructor">List(String <span class="hljs-params">statement</span>, Object <span class="hljs-params">parameter</span>, RowBounds <span class="hljs-params">rowBounds</span>)</span> &#123;<br>      MappedStatement ms = configuration.get<span class="hljs-constructor">MappedStatement(<span class="hljs-params">statement</span>)</span>;<br>      return executor.query(ms, wrap<span class="hljs-constructor">Collection(<span class="hljs-params">parameter</span>)</span>, rowBounds, Executor.NO_RESULT_HANDLER);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SqlSession</code>把具体的查询职责委托给了Executor。如果只开启了一级缓存的话，首先会进入<code>BaseExecutor</code>的<code>query</code>方法。代码如下所示：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>public &lt;E&gt; List&lt;E&gt; query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException &#123;<br>    BoundSql boundSql = ms.get<span class="hljs-constructor">BoundSql(<span class="hljs-params">parameter</span>)</span>;<br>    CacheKey key = create<span class="hljs-constructor">CacheKey(<span class="hljs-params">ms</span>, <span class="hljs-params">parameter</span>, <span class="hljs-params">rowBounds</span>, <span class="hljs-params">boundSql</span>)</span>;<br>    return query(ms, parameter, rowBounds, resultHandler, key, boundSql);<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，会先根据传入的参数生成CacheKey，进入该方法查看CacheKey是如何生成的，代码如下所示：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">CacheKey cacheKey = <span class="hljs-built_in">new</span> CacheKey();<br>cacheKey.<span class="hljs-keyword">update</span>(ms.getId());<br>cacheKey.<span class="hljs-keyword">update</span>(rowBounds.getOffset());<br>cacheKey.<span class="hljs-keyword">update</span>(rowBounds.getLimit());<br>cacheKey.<span class="hljs-keyword">update</span>(boundSql.getSql());<br>//后面是<span class="hljs-keyword">update</span>了<span class="hljs-keyword">sql</span>中带的参数<br>cacheKey.<span class="hljs-keyword">update</span>(<span class="hljs-keyword">value</span>);<br></code></pre></td></tr></table></figure><p>在上述的代码中，将<code>MappedStatement</code>的Id、SQL的offset、SQL的limit、SQL本身以及SQL中的参数传入了CacheKey这个类，最终构成CacheKey。以下是这个类的内部结构：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> DEFAULT_MULTIPLYER = <span class="hljs-number">37</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> DEFAULT_HASHCODE = <span class="hljs-number">17</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> multiplier;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> hashcode;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">long</span> checksum;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">count</span>;<br><span class="hljs-keyword">private</span> List&lt;Object&gt; updateList;<br><br><span class="hljs-keyword">public</span> CacheKey() &#123;<br>    <span class="hljs-keyword">this</span>.hashcode = DEFAULT_HASHCODE;<br>    <span class="hljs-keyword">this</span>.multiplier = DEFAULT_MULTIPLYER;<br>    <span class="hljs-keyword">this</span>.<span class="hljs-keyword">count</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">this</span>.updateList = <span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><p>首先是成员变量和构造函数，有一个初始的<code>hachcode</code>和乘数，同时维护了一个内部的<code>updatelist</code>。在<code>CacheKey</code>的<code>update</code>方法中，会进行一个<code>hashcode</code>和<code>checksum</code>的计算，同时把传入的参数添加进<code>updatelist</code>中。如下代码所示：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">update</span>(<span class="hljs-keyword">Object</span> <span class="hljs-keyword">object</span>) &#123;<br>    <span class="hljs-type">int</span> baseHashCode = <span class="hljs-keyword">object</span> == <span class="hljs-keyword">null</span> ? <span class="hljs-number">1</span> : ArrayUtil.hashCode(<span class="hljs-keyword">object</span>); <br>    count++;<br>    checksum += baseHashCode;<br>    baseHashCode *= count;<br>    hashcode = multiplier * hashcode + baseHashCode;<br>    <br>    updateList.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">object</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>同时重写了<code>CacheKey</code>的<code>equals</code>方法，代码如下所示：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs processing">@Override<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> equals(<span class="hljs-keyword">Object</span> object) &#123;<br>    .............<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; updateList.<span class="hljs-built_in">size</span>(); i++) &#123;<br>      <span class="hljs-keyword">Object</span> thisObject = updateList.<span class="hljs-built_in">get</span>(i);<br>      <span class="hljs-keyword">Object</span> thatObject = cacheKey.updateList.<span class="hljs-built_in">get</span>(i);<br>      <span class="hljs-keyword">if</span> (!ArrayUtil.equals(thisObject, thatObject)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>除去hashcode、checksum和count的比较外，只要updatelist中的元素一一对应相等，那么就可以认为是CacheKey相等。只要两条SQL的下列五个值相同，即可以认为是相同的SQL。</p><blockquote><p>Statement Id + Offset + Limmit + Sql + Params</p></blockquote><p>BaseExecutor的query方法继续往下走，代码如下所示：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">list</span> = resultHandler<span class="hljs-operator"> == </span>null ? (List&lt;E&gt;) localCache.get<span class="hljs-constructor">Object(<span class="hljs-params">key</span>)</span> : null;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span> != null) &#123;<br>    <span class="hljs-comment">// 这个主要是处理存储过程用的。</span><br>    handle<span class="hljs-constructor">LocallyCachedOutputParameters(<span class="hljs-params">ms</span>, <span class="hljs-params">key</span>, <span class="hljs-params">parameter</span>, <span class="hljs-params">boundSql</span>)</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">list</span> = query<span class="hljs-constructor">FromDatabase(<span class="hljs-params">ms</span>, <span class="hljs-params">parameter</span>, <span class="hljs-params">rowBounds</span>, <span class="hljs-params">resultHandler</span>, <span class="hljs-params">key</span>, <span class="hljs-params">boundSql</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果查不到的话，就从数据库查，在<code>queryFromDatabase</code>中，会对<code>localcache</code>进行写入。</p><p>在<code>query</code>方法执行的最后，会判断一级缓存级别是否是<code>STATEMENT</code>级别，如果是的话，就清空缓存，这也就是<code>STATEMENT</code>级别的一级缓存无法共享<code>localCache</code>的原因。代码如下所示：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;<br>        <span class="hljs-selector-tag">clearLocalCache</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>在源码分析的最后，我们确认一下，如果是<code>insert/delete/update</code>方法，缓存就会刷新的原因。</p><p><code>SqlSession</code>的<code>insert</code>方法和<code>delete</code>方法，都会统一走<code>update</code>的流程，代码如下所示：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@Override<br><span class="hljs-built_in">public</span> <span class="hljs-type">int</span> <span class="hljs-keyword">insert</span>(String <span class="hljs-keyword">statement</span>, <span class="hljs-keyword">Object</span> parameter) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">update</span>(<span class="hljs-keyword">statement</span>, parameter);<br>  &#125;<br>   @Override<br>  <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> <span class="hljs-keyword">delete</span>(String <span class="hljs-keyword">statement</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">update</span>(<span class="hljs-keyword">statement</span>, <span class="hljs-keyword">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>update</code>方法也是委托给了<code>Executor</code>执行。<code>BaseExecutor</code>的执行方法如下所示：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>public <span class="hljs-built_in">int</span> update(MappedStatement ms, Object parameter) throws SQLException &#123;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ErrorContext</span>.</span></span>instance<span class="hljs-literal">()</span>.resource(ms.get<span class="hljs-constructor">Resource()</span>).activity(<span class="hljs-string">&quot;executing an update&quot;</span>).<span class="hljs-keyword">object</span>(ms.get<span class="hljs-constructor">Id()</span>);<br>    <span class="hljs-keyword">if</span> (closed) &#123;<br>      throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">ExecutorException(<span class="hljs-string">&quot;Executor was closed.&quot;</span>)</span>;<br>    &#125;<br>    clear<span class="hljs-constructor">LocalCache()</span>;<br>    return <span class="hljs-keyword">do</span><span class="hljs-constructor">Update(<span class="hljs-params">ms</span>, <span class="hljs-params">parameter</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>每次执行<code>update</code>前都会清空<code>localCache</code>。</p><p>至此，一级缓存的工作流程讲解以及源码分析完毕。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>MyBatis一级缓存的生命周期和SqlSession一致。</li><li>MyBatis一级缓存内部设计简单，只是一个没有容量限定的HashMap，在缓存的功能性上有所欠缺。</li><li>MyBatis的一级缓存最大范围是SqlSession内部，有多个SqlSession或者分布式的环境下，数据库写操作会引起脏数据，建议设定缓存级别为Statement。</li></ol><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><h3 id="二级缓存介绍"><a href="#二级缓存介绍" class="headerlink" title="二级缓存介绍"></a>二级缓存介绍</h3><p>在上文中提到的一级缓存中，其最大的共享范围就是一个SqlSession内部，如果多个SqlSession之间需要共享缓存，则需要使用到二级缓存。开启二级缓存后，会使用CachingExecutor装饰Executor，进入一级缓存的查询流程前，先在CachingExecutor进行二级缓存的查询，具体的工作流程如下所示。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/28399eba.png" alt="img"></p><p>二级缓存开启后，同一个namespace下的所有操作语句，都影响着同一个Cache，即二级缓存被多个SqlSession共享，是一个全局的变量。</p><p>当开启缓存后，数据的查询执行的流程就是 二级缓存 -&gt; 一级缓存 -&gt; 数据库。</p><h3 id="二级缓存配置"><a href="#二级缓存配置" class="headerlink" title="二级缓存配置"></a>二级缓存配置</h3><p>要正确的使用二级缓存，需完成如下配置的。</p><ol><li>在MyBatis的配置文件中开启二级缓存。</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;setting <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><ol><li>在MyBatis的映射XML中配置cache或者 cache-ref 。</li></ol><p>cache标签用于声明这个namespace使用二级缓存，并且可以自定义配置。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;cache/&gt;</span>   <br></code></pre></td></tr></table></figure><ul><li><code>type</code>：cache使用的类型，默认是<code>PerpetualCache</code>，这在一级缓存中提到过。</li><li><code>eviction</code>： 定义回收的策略，常见的有FIFO，LRU。</li><li><code>flushInterval</code>： 配置一定时间自动刷新缓存，单位是毫秒。</li><li><code>size</code>： 最多缓存对象的个数。</li><li><code>readOnly</code>： 是否只读，若配置可读写，则需要对应的实体类能够序列化。</li><li><code>blocking</code>： 若缓存中找不到对应的key，是否会一直blocking，直到有对应的数据进入缓存。</li></ul><p><code>cache-ref</code>代表引用别的命名空间的Cache配置，两个命名空间的操作使用的是同一个Cache。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">&lt;cache-<span class="hljs-keyword">ref</span> <span class="hljs-keyword">namespace</span>=<span class="hljs-string">&quot;mapper.StudentMapper&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h3 id="二级缓存实验"><a href="#二级缓存实验" class="headerlink" title="二级缓存实验"></a>二级缓存实验</h3><p>接下来我们通过实验，了解MyBatis二级缓存在使用上的一些特点。</p><p>在本实验中，id为1的学生名称初始化为点点。</p><h4 id="实验1-1"><a href="#实验1-1" class="headerlink" title="实验1"></a>实验1</h4><p>测试二级缓存效果，不提交事务，<code>sqlSession1</code>查询完数据后，<code>sqlSession2</code>相同的查询是否会从缓存中获取数据。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void test<span class="hljs-constructor">CacheWithoutCommitOrClose()</span> throws Exception &#123;<br>        SqlSession sqlSession1 = factory.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session(<span class="hljs-params">true</span>)</span>; <br>        SqlSession sqlSession2 = factory.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session(<span class="hljs-params">true</span>)</span>; <br>        <br>        StudentMapper studentMapper = sqlSession1.get<span class="hljs-constructor">Mapper(StudentMapper.<span class="hljs-params">class</span>)</span>;<br>        StudentMapper studentMapper2 = sqlSession2.get<span class="hljs-constructor">Mapper(StudentMapper.<span class="hljs-params">class</span>)</span>;<br><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;studentMapper读取数据: &quot;</span> + studentMapper.get<span class="hljs-constructor">StudentById(1)</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;studentMapper2读取数据: &quot;</span> + studentMapper2.get<span class="hljs-constructor">StudentById(1)</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/71e2bfdc.jpg" alt="img"></p><p>我们可以看到，当<code>sqlsession</code>没有调用<code>commit()</code>方法时，二级缓存并没有起到作用。</p><h4 id="实验2-1"><a href="#实验2-1" class="headerlink" title="实验2"></a>实验2</h4><p>测试二级缓存效果，当提交事务时，<code>sqlSession1</code>查询完数据后，<code>sqlSession2</code>相同的查询是否会从缓存中获取数据。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void test<span class="hljs-constructor">CacheWithCommitOrClose()</span> throws Exception &#123;<br>        SqlSession sqlSession1 = factory.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session(<span class="hljs-params">true</span>)</span>; <br>        SqlSession sqlSession2 = factory.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session(<span class="hljs-params">true</span>)</span>; <br>        <br>        StudentMapper studentMapper = sqlSession1.get<span class="hljs-constructor">Mapper(StudentMapper.<span class="hljs-params">class</span>)</span>;<br>        StudentMapper studentMapper2 = sqlSession2.get<span class="hljs-constructor">Mapper(StudentMapper.<span class="hljs-params">class</span>)</span>;<br><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;studentMapper读取数据: &quot;</span> + studentMapper.get<span class="hljs-constructor">StudentById(1)</span>);<br>        sqlSession1.commit<span class="hljs-literal">()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;studentMapper2读取数据: &quot;</span> + studentMapper2.get<span class="hljs-constructor">StudentById(1)</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/f366f34e.jpg" alt="img"></p><p>从图上可知，<code>sqlsession2</code>的查询，使用了缓存，缓存的命中率是0.5。</p><h4 id="实验3-1"><a href="#实验3-1" class="headerlink" title="实验3"></a>实验3</h4><p>测试<code>update</code>操作是否会刷新该<code>namespace</code>下的二级缓存。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void test<span class="hljs-constructor">CacheWithUpdate()</span> throws Exception &#123;<br>        SqlSession sqlSession1 = factory.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session(<span class="hljs-params">true</span>)</span>; <br>        SqlSession sqlSession2 = factory.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session(<span class="hljs-params">true</span>)</span>; <br>        SqlSession sqlSession3 = factory.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session(<span class="hljs-params">true</span>)</span>; <br>        <br>        StudentMapper studentMapper = sqlSession1.get<span class="hljs-constructor">Mapper(StudentMapper.<span class="hljs-params">class</span>)</span>;<br>        StudentMapper studentMapper2 = sqlSession2.get<span class="hljs-constructor">Mapper(StudentMapper.<span class="hljs-params">class</span>)</span>;<br>        StudentMapper studentMapper3 = sqlSession3.get<span class="hljs-constructor">Mapper(StudentMapper.<span class="hljs-params">class</span>)</span>;<br>        <br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;studentMapper读取数据: &quot;</span> + studentMapper.get<span class="hljs-constructor">StudentById(1)</span>);<br>        sqlSession1.commit<span class="hljs-literal">()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;studentMapper2读取数据: &quot;</span> + studentMapper2.get<span class="hljs-constructor">StudentById(1)</span>);<br>        <br>        studentMapper3.update<span class="hljs-constructor">StudentName(<span class="hljs-string">&quot;方方&quot;</span>,1)</span>;<br>        sqlSession3.commit<span class="hljs-literal">()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;studentMapper2读取数据: &quot;</span> + studentMapper2.get<span class="hljs-constructor">StudentById(1)</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/3ad93c3a.jpg" alt="img"></p><p>我们可以看到，在<code>sqlSession3</code>更新数据库，并提交事务后，<code>sqlsession2</code>的<code>StudentMapper namespace</code>下的查询走了数据库，没有走Cache。</p><h4 id="实验4"><a href="#实验4" class="headerlink" title="实验4"></a>实验4</h4><p>验证MyBatis的二级缓存不适应用于映射文件中存在多表查询的情况。</p><p>通常我们会为每个单表创建单独的映射文件，由于MyBatis的二级缓存是基于<code>namespace</code>的，多表查询语句所在的<code>namspace</code>无法感应到其他<code>namespace</code>中的语句对多表查询中涉及的表进行的修改，引发脏数据问题。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void test<span class="hljs-constructor">CacheWithDiffererntNamespace()</span> throws Exception &#123;<br>        SqlSession sqlSession1 = factory.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session(<span class="hljs-params">true</span>)</span>; <br>        SqlSession sqlSession2 = factory.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session(<span class="hljs-params">true</span>)</span>; <br>        SqlSession sqlSession3 = factory.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session(<span class="hljs-params">true</span>)</span>; <br>    <br>        StudentMapper studentMapper = sqlSession1.get<span class="hljs-constructor">Mapper(StudentMapper.<span class="hljs-params">class</span>)</span>;<br>        StudentMapper studentMapper2 = sqlSession2.get<span class="hljs-constructor">Mapper(StudentMapper.<span class="hljs-params">class</span>)</span>;<br>        ClassMapper classMapper = sqlSession3.get<span class="hljs-constructor">Mapper(ClassMapper.<span class="hljs-params">class</span>)</span>;<br>        <br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;studentMapper读取数据: &quot;</span> + studentMapper.get<span class="hljs-constructor">StudentByIdWithClassInfo(1)</span>);<br>        sqlSession1.close<span class="hljs-literal">()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;studentMapper2读取数据: &quot;</span> + studentMapper2.get<span class="hljs-constructor">StudentByIdWithClassInfo(1)</span>);<br><br>        classMapper.update<span class="hljs-constructor">ClassName(<span class="hljs-string">&quot;特色一班&quot;</span>,1)</span>;<br>        sqlSession3.commit<span class="hljs-literal">()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;studentMapper2读取数据: &quot;</span> + studentMapper2.get<span class="hljs-constructor">StudentByIdWithClassInfo(1)</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/5265ed97.jpg" alt="img"></p><p>在这个实验中，我们引入了两张新的表，一张class，一张classroom。class中保存了班级的id和班级名，classroom中保存了班级id和学生id。我们在<code>StudentMapper</code>中增加了一个查询方法<code>getStudentByIdWithClassInfo</code>，用于查询学生所在的班级，涉及到多表查询。在<code>ClassMapper</code>中添加了<code>updateClassName</code>，根据班级id更新班级名的操作。</p><p>当<code>sqlsession1</code>的<code>studentmapper</code>查询数据后，二级缓存生效。保存在StudentMapper的namespace下的cache中。当<code>sqlSession3</code>的<code>classMapper</code>的<code>updateClassName</code>方法对class表进行更新时，<code>updateClassName</code>不属于<code>StudentMapper</code>的<code>namespace</code>，所以<code>StudentMapper</code>下的cache没有感应到变化，没有刷新缓存。当<code>StudentMapper</code>中同样的查询再次发起时，从缓存中读取了脏数据。</p><h4 id="实验5"><a href="#实验5" class="headerlink" title="实验5"></a>实验5</h4><p>为了解决实验4的问题呢，可以使用Cache ref，让<code>ClassMapper</code>引用<code>StudenMapper</code>命名空间，这样两个映射文件对应的SQL操作都使用的是同一块缓存了。</p><p>执行结果：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/a2e4c2d8.jpg" alt="img"></p><p>不过这样做的后果是，缓存的粒度变粗了，多个<code>Mapper namespace</code>下的所有操作都会对缓存使用造成影响。</p><h3 id="二级缓存源码分析"><a href="#二级缓存源码分析" class="headerlink" title="二级缓存源码分析"></a>二级缓存源码分析</h3><p>MyBatis二级缓存的工作流程和前文提到的一级缓存类似，只是在一级缓存处理前，用<code>CachingExecutor</code>装饰了<code>BaseExecutor</code>的子类，在委托具体职责给<code>delegate</code>之前，实现了二级缓存的查询和写入功能，具体类关系图如下图所示。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/090216b1.jpg" alt="img"></p><h4 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h4><p>源码分析从<code>CachingExecutor</code>的<code>query</code>方法展开，源代码走读过程中涉及到的知识点较多，不能一一详细讲解，读者朋友可以自行查询相关资料来学习。</p><p><code>CachingExecutor</code>的<code>query</code>方法，首先会从<code>MappedStatement</code>中获得在配置初始化时赋予的Cache。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">Cache</span> <span class="hljs-keyword">cache</span> = ms.getCache();<br></code></pre></td></tr></table></figure><p>本质上是装饰器模式的使用，具体的装饰链是：</p><blockquote><p>SynchronizedCache -&gt; LoggingCache -&gt; SerializedCache -&gt; LruCache -&gt; PerpetualCache。</p></blockquote><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/1f5233b2.jpg" alt="img"></p><p>以下是具体这些Cache实现类的介绍，他们的组合为Cache赋予了不同的能力。</p><ul><li><code>SynchronizedCache</code>：同步Cache，实现比较简单，直接使用synchronized修饰方法。</li><li><code>LoggingCache</code>：日志功能，装饰类，用于记录缓存的命中率，如果开启了DEBUG模式，则会输出命中率日志。</li><li><code>SerializedCache</code>：序列化功能，将值序列化后存到缓存中。该功能用于缓存返回一份实例的Copy，用于保存线程安全。</li><li><code>LruCache</code>：采用了Lru算法的Cache实现，移除最近最少使用的Key/Value。</li><li><code>PerpetualCache</code>： 作为为最基础的缓存类，底层实现比较简单，直接使用了HashMap。</li></ul><p>然后是判断是否需要刷新缓存，代码如下所示：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">flush<span class="hljs-constructor">CacheIfRequired(<span class="hljs-params">ms</span>)</span>;<br></code></pre></td></tr></table></figure><p>在默认的设置中<code>SELECT</code>语句不会刷新缓存，<code>insert/update/delte</code>会刷新缓存。进入该方法。代码如下所示：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">private</span> <span class="hljs-literal">void</span> flushCacheIfRequired(MappedStatement ms) &#123;<br>    <span class="hljs-keyword">Cache</span> <span class="hljs-keyword">cache</span> = ms.getCache();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">cache</span> != <span class="hljs-built_in">null</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;      <br>      tcm.clear(<span class="hljs-keyword">cache</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MyBatis的<code>CachingExecutor</code>持有了<code>TransactionalCacheManager</code>，即上述代码中的tcm。</p><p><code>TransactionalCacheManager</code>中持有了一个Map，代码如下所示：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">private</span> <span class="hljs-built_in">Map</span>&lt;<span class="hljs-keyword">Cache</span>, TransactionalCache&gt; transactionalCaches = <span class="hljs-literal">new</span> HashMap&lt;<span class="hljs-keyword">Cache</span>, TransactionalCache&gt;();<br></code></pre></td></tr></table></figure><p>这个Map保存了Cache和用<code>TransactionalCache</code>包装后的Cache的映射关系。</p><p><code>TransactionalCache</code>实现了Cache接口，<code>CachingExecutor</code>会默认使用他包装初始生成的Cache，作用是如果事务提交，对缓存的操作才会生效，如果事务回滚或者不提交事务，则不对缓存产生影响。</p><p>在<code>TransactionalCache</code>的clear，有以下两句。清空了需要在提交时加入缓存的列表，同时设定提交时清空缓存，代码如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">clear</span>(<span class="hljs-params"></span>)</span> &#123;<br>clearOnCommit = <span class="hljs-literal">true</span>;<br>entriesToAddOnCommit.clear();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>CachingExecutor</code>继续往下走，<code>ensureNoOutParams</code>主要是用来处理存储过程的，暂时不用考虑。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> (ms.is<span class="hljs-constructor">UseCache()</span><span class="hljs-operator"> &amp;&amp; </span>resultHandler<span class="hljs-operator"> == </span>null) &#123;<br>ensure<span class="hljs-constructor">NoOutParams(<span class="hljs-params">ms</span>, <span class="hljs-params">parameterObject</span>, <span class="hljs-params">boundSql</span>)</span>;<br></code></pre></td></tr></table></figure><p>之后会尝试从tcm中获取缓存的列表。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">List</span><span class="hljs-operator">&lt;</span><span class="hljs-built_in">E</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">List</span><span class="hljs-operator">&lt;</span><span class="hljs-built_in">E</span><span class="hljs-operator">&gt;</span><span class="hljs-punctuation">)</span> <span class="hljs-variable">tcm</span><span class="hljs-operator">.</span><span class="hljs-variable">getObject</span><span class="hljs-punctuation">(</span><span class="hljs-variable">cache</span><span class="hljs-operator">,</span> <span class="hljs-variable">key</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure><p>在<code>getObject</code>方法中，会把获取值的职责一路传递，最终到<code>PerpetualCache</code>。如果没有查到，会把key加入Miss集合，这个主要是为了统计命中率。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Object <span class="hljs-built_in">object</span> = <span class="hljs-built_in">delegate</span>.getObject(key);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">object</span> == <span class="hljs-literal">null</span>) &#123;<br>entriesMissedInCache.<span class="hljs-keyword">add</span>(key);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>CachingExecutor</code>继续往下走，如果查询到数据，则调用<code>tcm.putObject</code>方法，往缓存中放入值。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lsl">if (<span class="hljs-type">list</span> == null) &#123;<br><span class="hljs-type">list</span> = delegate.&lt;E&gt; query(ms, parameterObject, rowBounds, resultHandler, <span class="hljs-type">key</span>, boundSql);<br>tcm.putObject(cache, <span class="hljs-type">key</span>, <span class="hljs-type">list</span>); <span class="hljs-comment">// issue #578 and #116</span><br>&#125;<br></code></pre></td></tr></table></figure><p>tcm的<code>put</code>方法也不是直接操作缓存，只是在把这次的数据和key放入待提交的Map中。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">putObject</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> key, <span class="hljs-built_in">Object</span> <span class="hljs-built_in">object</span></span>)</span> &#123;<br>    entriesToAddOnCommit.put(key, <span class="hljs-built_in">object</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>从以上的代码分析中，我们可以明白，如果不调用<code>commit</code>方法的话，由于<code>TranscationalCache</code>的作用，并不会对二级缓存造成直接的影响。因此我们看看<code>Sqlsession</code>的<code>commit</code>方法中做了什么。代码如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">commit</span>(<span class="hljs-params"><span class="hljs-built_in">boolean</span> force</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      executor.commit(isCommitOrRollbackRequired(force));<br></code></pre></td></tr></table></figure><p>因为我们使用了CachingExecutor，首先会进入CachingExecutor实现的commit方法。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">commit</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> required)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    delegate.commit(required);<br>    tcm.commit();<br>&#125;<br></code></pre></td></tr></table></figure><p>会把具体commit的职责委托给包装的<code>Executor</code>。主要是看下<code>tcm.commit()</code>，tcm最终又会调用到<code>TrancationalCache</code>。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">commit</span>() &#123;<br>    <span class="hljs-selector-tag">if</span> (clearOnCommit) &#123;<br>      <span class="hljs-selector-tag">delegate</span><span class="hljs-selector-class">.clear</span>();<br>    &#125;<br>    <span class="hljs-selector-tag">flushPendingEntries</span>();<br>    <span class="hljs-selector-tag">reset</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>看到这里的<code>clearOnCommit</code>就想起刚才<code>TrancationalCache</code>的<code>clear</code>方法设置的标志位，真正的清理Cache是放到这里来进行的。具体清理的职责委托给了包装的Cache类。之后进入<code>flushPendingEntries</code>方法。代码如下所示：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">private</span> <span class="hljs-literal">void</span> flushPendingEntries() &#123;<br>    for (<span class="hljs-built_in">Map</span>.Entry&lt;Object, Object&gt; entry : entriesToAddOnCommit.entrySet()) &#123;<br>      delegate.putObject(entry.getKey(), entry.getValue());<br>    &#125;<br>    <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>flushPending</code>Entries中，将待提交的Map进行循环处理，委托给包装的Cache类，进行<code>putObject</code>的操作。</p><p>后续的查询操作会重复执行这套流程。如果是<code>insert|update|delete</code>的话，会统一进入<code>CachingExecutor</code>的<code>update</code>方法，其中调用了这个函数，代码如下所示：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> void flush<span class="hljs-constructor">CacheIfRequired(MappedStatement <span class="hljs-params">ms</span>)</span> <br></code></pre></td></tr></table></figure><p>在二级缓存执行流程后就会进入一级缓存的执行流程，因此不再赘述。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ol><li>MyBatis的二级缓存相对于一级缓存来说，实现了<code>SqlSession</code>之间缓存数据的共享，同时粒度更加的细，能够到<code>namespace</code>级别，通过Cache接口实现类不同的组合，对Cache的可控性也更强。</li><li>MyBatis在多表查询时，极大可能会出现脏数据，有设计上的缺陷，安全使用二级缓存的条件比较苛刻。</li><li>在分布式环境下，由于默认的MyBatis Cache实现都是基于本地的，分布式环境下必然会出现读取到脏数据，需要使用集中式缓存将MyBatis的Cache接口实现，有一定的开发成本，直接使用Redis、Memcached等分布式缓存可能成本更低，安全性也更高。</li></ol><h2 id="全文总结"><a href="#全文总结" class="headerlink" title="全文总结"></a>全文总结</h2><p>本文对介绍了MyBatis一二级缓存的基本概念，并从应用及源码的角度对MyBatis的缓存机制进行了分析。最后对MyBatis缓存机制做了一定的总结，个人建议MyBatis缓存特性在生产环境中进行关闭，单纯作为一个ORM框架使用可能更为合适。</p><hr>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Mybatis</tag>
      
      <tag>Cache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot2(一)：使用Spring Boot2集成Mybatis基础搭建</title>
    <link href="/2019/06/26/2019-06-26-mybatis-hello/"/>
    <url>/2019/06/26/2019-06-26-mybatis-hello/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Mybatis 初期使用比较麻烦，需要各种配置文件、实体类、Dao 层映射关联、还有一大推其它配置。<code>mybatis-spring-boot-starter</code> 就是 Spring Boot+ Mybatis 可以完全注解不用配置文件，也可以简单配置轻松上手。</p><h2 id="mybatis-spring-boot-starter"><a href="#mybatis-spring-boot-starter" class="headerlink" title="mybatis-spring-boot-starter"></a>mybatis-spring-boot-starter</h2><p>官方说明：<code>MyBatis Spring-Boot-Starter will help you use MyBatis with Spring Boot</code><br>其实就是 Mybatis 看 Spring Boot 这么火热也开发出一套解决方案来凑凑热闹，但这一凑确实解决了很多问题，使用起来确实顺畅了许多。<code>mybatis-spring-boot-starter</code>主要有两种解决方案，一种是使用注解解决一切问题，一种是简化后的老传统。</p><p>当然任何模式都需要首先引入<code>mybatis-spring-boot-starter</code>的 Pom 文件，现在最新版本是 2.0.1</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我一般使用的是XML极简模式，可能是由于之前用的hibernate用习惯了</p><h2 id="极简-xml-版本"><a href="#极简-xml-版本" class="headerlink" title="极简 xml 版本"></a>极简 xml 版本</h2><p>极简 xml 版本保持映射文件的老传统，接口层只需要定义空方法，系统会自动根据方法名在映射文件中找对应的 Sql .</p><h3 id="1-添加相关-Maven-文件"><a href="#1-添加相关-Maven-文件" class="headerlink" title="1 添加相关 Maven 文件"></a>1 添加相关 Maven 文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>完整的 Pom 包这里就不贴了，大家直接看源码</p><h3 id="2、application-yml相关配置"><a href="#2、application-yml相关配置" class="headerlink" title="2、application.yml相关配置"></a>2、<code>application.yml</code>相关配置</h3><p>推荐使用<code>application.yml</code>进行配置，其实使用<code>application.yml</code>或者<code>application.properties</code>都是一样的效果，<code>application.yml</code>最终是转换为<code>application.properties</code>进行生效的，只不过<code>application.yml</code>视觉效果看起来更加明了。新建项目默认为<code>application.properties</code>，直接改为<code>application.yml</code>，另外新增一个<code>application-test.yml</code>用户不同环境使用不同的配置文件用。</p><p><code>application.yml</code>配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#指定配置文件为test</span><br><span class="hljs-attr">spring</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">profiles</span>:<span class="hljs-string"></span><br>    <span class="hljs-attr">active</span>: <span class="hljs-string">test</span><br><br><span class="hljs-comment">#配置Mybatis</span><br><span class="hljs-attr">mybatis</span>:<span class="hljs-string"></span><br>  <span class="hljs-meta">type-aliases-package</span>: <span class="hljs-string">com.niaobulashi.entity</span><br>  <span class="hljs-meta">mapper-locations</span>: <span class="hljs-string">classpath:mapper/*.xml</span><br>  <span class="hljs-attr">configuration</span>:<span class="hljs-string"></span><br><span class="hljs-comment">    # 开启驼峰命名转换，如：Table(create_time) -&gt; Entity(createTime)。不需要我们关心怎么进行字段匹配，mybatis会自动识别`大写字母与下划线`</span><br>    <span class="hljs-meta">map-underscore-to-camel-case</span>: <span class="hljs-string">true</span><br><br><span class="hljs-comment">#打印SQL日志</span><br><span class="hljs-attr">logging</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">level</span>:<span class="hljs-string"></span><br>    <span class="hljs-meta">com.niaobulashi.dao</span>: <span class="hljs-string">DEBUG</span><br></code></pre></td></tr></table></figure><p><code>application-test.yml</code>配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">datasource</span>:<span class="hljs-string"></span><br>    <span class="hljs-attr">url</span>: <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><br>    <span class="hljs-attr">username</span>: <span class="hljs-string">root</span><br>    <span class="hljs-attr">password</span>: <span class="hljs-string">root</span><br>    <span class="hljs-meta">driver-class-name</span>: <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><p>Spring Boot 会自动加载 <code>spring.datasource.*</code> 相关配置，数据源就会自动注入到 sqlSessionFactory 中，sqlSessionFactory 会自动注入到 Mapper 中，对了，你一切都不用管了，直接拿起来使用就行了。</p><p>在启动类中添加对 mapper 包扫描<code>@MapperScan</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.niaobulashi.dao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(MybatisApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>或者直接在 Mapper 类上面添加注解<code>@Mapper</code>，建议使用上面那种，不然每个 mapper 加个注解也挺麻烦的</p><h3 id="3、添加-User-的实例"><a href="#3、添加-User-的实例" class="headerlink" title="3、添加 User 的实例"></a>3、添加 User 的实例</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs haxe">@Data<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysUserEntity</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Serializable</span></span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final long serialVersionUID = <span class="hljs-number">1</span>L;<br><span class="hljs-comment">//用户ID</span><br><span class="hljs-keyword">private</span> Long userId;<br><br><span class="hljs-comment">//用户名</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> username;<br><br><span class="hljs-comment">//密码</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> password;<br><br><span class="hljs-comment">//盐</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> salt;<br><br><span class="hljs-comment">//邮箱</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> email;<br><br><span class="hljs-comment">//手机号</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> mobile;<br><br><span class="hljs-comment">//状态  0：禁用   1：正常</span><br><span class="hljs-keyword">private</span> Integer status;<br><br><span class="hljs-comment">//创建时间</span><br><span class="hljs-keyword">private</span> Date createTime;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、添加-User-的映射文件"><a href="#4、添加-User-的映射文件" class="headerlink" title="4、添加 User 的映射文件"></a>4、添加 User 的映射文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.niaobulashi.dao.SysUserDao&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--查询用户的所有菜单ID--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserInfo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.niaobulashi.entity.SysUserEntity&quot;</span>&gt;</span><br>        SELECT<br>            ur.*<br>        FROM<br>            sys_user ur<br>        WHERE<br>            1 = 1<br>          AND ur.user_id = #&#123;userId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其实就是把上个版本中 Mapper 的 Sql 搬到了这里的 xml 中了</p><h3 id="5、编写-Mapper-层的代码"><a href="#5、编写-Mapper-层的代码" class="headerlink" title="5、编写 Mapper 层的代码"></a>5、编写 Mapper 层的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SysUserDao</span> </span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据userId查询用户信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userId  用户ID</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">List&lt;SysUserEntity&gt; <span class="hljs-title">queryUserInfo</span><span class="hljs-params">(Long userId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、编写Service层的代码"><a href="#6、编写Service层的代码" class="headerlink" title="6、编写Service层的代码"></a>6、编写Service层的代码</h3><p><code>SysUserService</code>接口类：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">SysUserService</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询用户的所有菜单ID</span><br><span class="hljs-comment"> */</span><br>List&lt;SysUserEntity&gt; queryUserInfo(Long userId);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SysUserServiceImpl</code>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service(&quot;sysUserService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysUserServiceImpl</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title">SysUserService</span> </span>&#123;<br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> SysUserDao sysUserDao;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询用户的所有菜单ID</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SysUserEntity&gt; <span class="hljs-title">queryUserInfo</span><span class="hljs-params">(Long userId)</span> </span>&#123;<br><span class="hljs-keyword">return</span> sysUserDao.queryUserInfo(userId);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7、测试"><a href="#7、测试" class="headerlink" title="7、测试"></a>7、测试</h3><p>经过上面5个步骤就可以完成基本的接口开发，省去了Controller层的开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MabatisTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Logger logger = LoggerFactory.getLogger(MabatisTest.class);<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SysUserService sysUserService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryUserInfo</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        SysUserEntity userEntity = <span class="hljs-keyword">new</span> SysUserEntity();<br>        userEntity.setUserId(<span class="hljs-number">1L</span>);<br>        List&lt;SysUserEntity&gt; list = sysUserService.queryUserInfo(userEntity.getUserId());<br>        logger.info(<span class="hljs-string">&quot;list:&quot;</span> + list);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="最后项目目录结构"><a href="#最后项目目录结构" class="headerlink" title="最后项目目录结构"></a>最后项目目录结构</h2><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/image01@main/picture/mybatis_01_01.png" alt="mybaits_01_hello项目目录结构"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SpringBoot和Mybatis这对CP，完美</p><p><strong><a href="https://github.com/niaobulashi/spring-boot-learning/tree/master/spring-boot-10-mybatis-hello">示例代码-github</a></strong></p><hr>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019西安草莓音乐节-周六这么过</title>
    <link href="/2019/06/21/2019-06-21-Strawberry-Music-Festival/"/>
    <url>/2019/06/21/2019-06-21-Strawberry-Music-Festival/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>还记得3年前在武汉的时候，去的武汉的草莓音乐节。<br>今年刚好在西安也举办了草莓音乐节，丝毫没有犹豫。</p><p>冲鸭</p><center class="half"><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/2_1618541847271.jpg" alt="西安草莓音乐节1" width="200px"/><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/3_1618541847272.jpg" alt="西安草莓音乐节2" width="200px"/></center><p>举办场地在西安的大明宫国家遗址公园，公园相当之大，举办这种音乐节相当合适不过了<br>现场安全措施也相当到位，保安，消防，警察都就位了。给你们点赞！<br>可以说现场听音乐和平时还是很不一样的</p><p>emmm，悄咪咪的拍了这张，太可爱了吧 ::aru:clap:: </p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/4_1618541847273.jpg" alt="西安草莓音乐节3"></p><p>当热门歌手要出场的时候，现场异常的拥挤，进也进不去，出也不好出，很尴尬。<br>一个歌手唱完后，中间大概要等半个多小时。于是就傻呼呼的站在那里等上那么久，而且都是站在那里等，天气温度略高，热啊<br>等到歌手出来之后，全场尖叫声，啊，终于等到了，你可总算是出来了</p><center class="half"><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/5_1618541847274.jpg" alt="西安草莓音乐节4" width="200px"/></center><p>开心的周六<br>希望每年都可以去一趟草莓音乐节<br>不管工作有多忙，请假也得去 ::aru:cheer:: </p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>端午期间把婚纱照给拍了</title>
    <link href="/2019/05/15/2019-05-15-wedding-photos/"/>
    <url>/2019/05/15/2019-05-15-wedding-photos/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>就在2019年的端午那天</p><p>我俩在西安把婚纱照拍了</p><p>从大一下学期认识你，到现在，算下来有7年了</p><p>一路下来挺不容易的，非常珍惜</p><p>时间过得太快了，很多事情来不及写下来，时间就过去了</p><p>我开玩笑说我老了肯定得老年痴呆，许多事情还得靠你来细细叙说</p><p>拍照拍了一天，早上5点半起床，7点半开始化妆拍照，拍到晚上8点。也算完成了一件大事</p><p>人生有许许多多重大事情需要经历</p><p>婚姻只有一次，我喜欢给你最好的一次</p><p>昨天效果照片出来了几张，出来之后第一时间发了朋友圈</p><p>很感谢朋友们的祝福</p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/07/910517079.jpg" alt="微信图片_20190614171601.jpg"></p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/07/743410673.jpg" alt="微信图片_20190614171609.jpg"></p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/07/966374007.jpg" alt="微信图片_20190614171621.jpg"></p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/07/3487850163.jpg" alt="微信图片_20190614171614.jpg"></p><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/07/244475427.jpg" alt="微信图片_20190614171626.jpg"></p><p>个人很喜欢最后一张哈哈哈哈</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
      <tag>Love</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年清明节广州之旅(多图预警)</title>
    <link href="/2019/05/09/2019-05-09-qingming-to-guangzhou/"/>
    <url>/2019/05/09/2019-05-09-qingming-to-guangzhou/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>本来清明节回来，就来写的，可是呢emmmm，可能有点懒吧。一直没有静下心来好好写点了</p></blockquote><h2 id="出发"><a href="#出发" class="headerlink" title="出发~"></a>出发~</h2><h2 id="宿舍到机场"><a href="#宿舍到机场" class="headerlink" title="宿舍到机场"></a>宿舍到机场</h2><p>西安市区没有机场，只有咸阳有个咸阳机场。去机场也没有地铁，只有机场大巴，从这边坐机场大巴过去要1个小时。所以如果是9点的飞机，从宿舍去大巴骑单车要10分钟，大巴大约25分钟一趟。。这不敢保证一去就有大巴可以走 ::aru:sweat:: 大巴出发去机场还有1个小时，到机场了也至少需要保证有一个小时，飞机提前30分钟检票。所有，去一趟广州，确实很累的(´இ皿இ｀)</p><p>大约4点半从宿舍出发，刷个摩拜，一路狂奔到大巴站点处。</p><p>一路狂奔并且不忘拍照 </p><center class="half"><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/2_1618542511504.jpg" alt="从宿舍一路狂奔到大巴站" width="200px"/><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/3_1618542511505.jpg" alt="一路狂奔并且不忘拍照" width="200px"/></center><p>上飞机了，座位上方突然摇下了小屏幕，可以看到航班飞行的航线：西安到广州</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/4_1618542511506.jpg" alt="西安到广州的航线"></p><p>困了，先睡一觉。。</p><p>一觉醒来，也就到了，中途转了多少趟车也就不多说了 ::aru:blood2::  ::aru:blood:: </p><h2 id="广州之行"><a href="#广州之行" class="headerlink" title="广州之行"></a>广州之行</h2><h4 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h4><p>从早上4点半多出门，大概是下午3点多到的广州目的地，终于到啦</p><p>第一天也没有出远门玩，就在旁边的万科广场附件溜达溜达。广州空气什么的比西安好多了</p><p>先让我猛吸几口空气 ::huaji:huaji01:: </p><p>一起散散步，看了看万科广场上举办的古装拍摄活动。咱俩都在远处看的，拍照有点模糊</p><center class="half"><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/5_1618542511507.jpg"/><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/6_1618542511508.jpg" alt="万科广场附近的古装拍摄活动" width="200px"/></center><p>商场里面弄了个大唐集市，差点以为我又到西安了 ::huaji:huaji03:: ，以为西安有个大唐不夜城，大唐西市，大唐巴拉巴拉什么的</p><center class="half"><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/7_1618542511509.jpg" alt="大唐集市活动1" width="200px"/><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/8_1618542511510.jpg" alt="大唐集市活动2" width="200px"/></center><h4 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h4><p>我们计划了第二天去<a href="https://baike.baidu.com/item/%E4%B8%9C%E8%8E%9E%E8%A7%82%E9%9F%B3%E5%B1%B1%E6%A3%AE%E6%9E%97%E5%85%AC%E5%9B%AD/1466637">观音山</a>爬山，过去要做动车过去，只要10块钱的动车票，可是时间不这么密集，太晚了点。<br>于是我们打滴滴过去的，大概60软妹币吧。<br>广州的老板都是靓仔 靓女的叫，哈哈哈哈，还请大声的叫出来 ::huaji:huaji06:: </p><p>到了观音山景点门口，可以看到，人还是有点点多的。。买两张票，出发咯</p><center class="half"><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/9_1618542511511.jpg" alt="观音山景点门口1" width="200px"/><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/10_1618542511512.jpg" alt="观音山景点门口2" width="200px"/></center><p>刚开始爬 走楼梯，真的累死我了，我俩都很累。平时也没有锻炼，一上来就要开始走斜坡，爬楼梯，爬了大约20分钟，上头有一段中途休息区，可以稍稍缓冲下。这一身肥膘太不争气了，得缓缓。 ::huaji:huaji03:: </p><center class="third"><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/11_1618542511513.jpg" alt="弥勒佛" width="100px"/><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/12_1618542511514.jpg" alt="后面正在爬的游客" width="100px"/><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/13_1618542511515.jpg" alt="哦耶" width="100px"/></center><p>因为这是观音山，佛家圣地，一路上有很多警世名言<br>大家也就看一看</p><center class="third"><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/14_1618542511516.jpg" alt="人生有八苦" width="100px"/><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/15_1618542511517.jpg" alt="色即是空，空即是色" width="100px"/><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/16_1618542511518.jpg" alt="悲，悟，笑" width="100px"/></center><p>观音山这景点确实也还不错，说是爬山，其实就是一条马路盘旋在几座山上，直到山顶。很适合我ヾ(≧∇≦*)ゝ</p><p>一路上也有很多花样，装扮好看的，好玩的，也都有。不会让你在爬山的过程中过于无聊</p><center class="half"><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/18_1618542511520.jpg" alt="吊花" width="200px"/><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/17_1618542511519.jpg" alt="骆驼" width="200px"/>!!!<p>走了大概有2个多小时，终于到了观音脚下啦。。额。。还只是脚下，真正要上去，还得走上50分钟</p><p>我们到了脚下的一处人员比较集中的地方，这里也有一处标记有名的地方：送子观音</p><p>好多人在这里挂祈福的小牌牌，希望能有个健康的宝宝 ::twemoji:bigsmile:: </p><center class="third"><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/19_1618542511521.jpg" alt="路牌" width="100px"/><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/20_1618542511522.jpg" alt="送子观音祈福1" width="100px"/><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/21_1618542511523.jpg" alt="送子观音祈福2" width="100px"/>!!!<p>好了，咱们也不是来求送子观音的 ::aru:nose:: 哈哈哈哈，还没到时候呢</p><p>我们继续开始攀登之路。</p><p>玩过QQ飞车电脑版的应该都知道，有一张地图叫做：十一城。这张地图路线像手掌一样，各种90度转弯哈哈哈哈</p><p>这里观音脚下的盘旋之路，正是这样，后悔没有带相机过去，拍摄技术渣拍不出那种陡峭的效果来，不过是真的陡峭。小屁孩都在路上爬，对，是真的在爬!</p><p>!!!</p><center class="third"><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/22_1618542511524.jpg" alt="陡峭1" width="100px"/><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/23_1618542511525.jpg" alt="陡峭2-小屁孩在爬" width="100px"/><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/24_1618542511526.jpg" alt="陡峭3" width="100px"/>!!!<p>一路上也有些有意思的画面，福芦娃，小沙弥（我遇见差不多有7、8个了），垃圾桶（莫名好笑的表情）￣﹃￣ ::aru:smile:: </p><center class="third"><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/25_1618542511527.jpg" alt="福芦娃" width="100px"/><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/26_1618542511528.jpg" alt="小沙弥" width="100px"/><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/27_1618542511529.jpg" alt="垃圾桶￣﹃￣" width="100px"/><p>到了，到了，终于到顶峰了，观音山本山，观音本尊</p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/29_1618542511531.jpg" alt="佛门圣地" width="100px"/><p>终于见到了，雕像之大，不知其几千里也！！！真的巨大</p><p>上顶有很多商店，卖开过光的佛珠什么的，还有敲平安鼓，烧香拜佛。</p><p>我俩拜了拜这里的财神爷，不求大富大贵，只求小康无忧 ::aru:shy::  ::aru:shy2:: </p><p>啊啊啊啊，要下山啦</p><p>也没有逗留太久，我俩就下山啦。下山我可不想再走下去了，我们去乘坐下山的车站，去买了票。这里人是真滴多啊，下山的高峰期，在这里等了40多分钟。。</p><h4 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h4><p>第三天，要回去了，三天假真的不够用啊，过得太快了8(´இ皿இ｀)</p><p>我也就不po照片了。。不然就没有流量了 ::aru:shy:: </p><p>下午5点种出发，现在不记得那时候晚上几点的飞机了。反正回西安宿舍差不多1点半。。好累啊啊啊啊 ::aru:distressed:: </p><p>好好休息</p><p>晚安</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle常用SQL语句工作总结（持续更新中）</title>
    <link href="/2019/04/26/2019-04-26-java-interview/"/>
    <url>/2019/04/26/2019-04-26-java-interview/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="加油吧，骚年！"><a href="#加油吧，骚年！" class="headerlink" title="加油吧，骚年！"></a>加油吧，骚年！</h2><p>首先直接来一个github上star最多的Java相关基础知识的学习大纲，超级全面，避免了导出找资料的繁琐。相当nice!</p><p><a target="_blank" href="https://github.com/Snailclimb/JavaGuide">JavaGuide</a></p><p>可以说相当有用了</p><p>其他的内容是相关看到的Java相关知识，也是万能的网友的博客，在这里引用归总起来</p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><a target="_blank" href="https://www.cnblogs.com/shenliang123/archive/2011/10/27/2226903.html" >1.java int与integer的区别</a></p><p><a target="_blank" href="http://www.cnblogs.com/shenliang123/archive/2012/04/16/2451996.html" >2.java 自动装箱与拆箱</a></p><p><a target="_blank" href="http://www.cnblogs.com/shenliang123/archive/2012/04/16/2452156.html" >3.java中 == 与 equal 的区别</a></p><p><a target="_blank" href="https://www.cnblogs.com/shenliang123/archive/2011/10/26/2225535.html" >4.java集合应用类</a></p><p><a target="_blank" href="https://www.cnblogs.com/LittleHann/p/3690187.html" >5.Java集合类: Set、List、Map、Queue使用场景梳理</a></p><p><a target="_blank" href="https://www.cnblogs.com/gmq/archive/2013/05/30/3108849.html" >6.java实现算术表达式求值</a></p><p><a target="_blank" href="https://blog.csdn.net/javazejian/article/details/71860633" >7.深入理解Java注解类型(@Annotation)</a></p><p><a target="_blank" href="http://www.runoob.com/java/java-collections.html" >8.Java 集合框架</a></p><p><a target="_blank" href="https://blog.csdn.net/ccpat/article/details/44515335" >9.Java this 关键字用法</a></p><p><a target="_blank" href="https://blog.csdn.net/qq_32331073/article/details/80402979" >10.Java解析(读取)Json数据</a></p><h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><p><a target="_blank" href="https://niaobulashi.com/tag/Spring-Boot/" >鸟不拉屎SpringBoot系列文章</a></p><p><a target="_blank" href="http://springboot.fun/" >Spring Boot 中文索引</a></p><p><a target="_blank" href="http://www.ityouknow.com/spring-boot.html" >纯洁的微笑SpringBoot系列文章</a></p><p><a target="_blank" href="http://blog.didispace.com/Spring-Boot%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/" >程序猿DD的SpringBoot系列文章</a></p><p><a target="_blank" href="https://www.fangzhipeng.com/spring-boot.html" >方志朋的SpringBoot系列文章</a></p><p><a target="_blank" href="https://www.dalaoyang.cn/tag/springboot/" >大佬杨的SpringBoot系列文章</a></p><p><a target="_blank" href="https://jinnianshilongnian.iteye.com/blog/2001040" >Cache抽象详解</a></p><p><a target="_blank" href="https://www.cnblogs.com/duanxz/p/7493276.html" >spring4.0之二：@Configuration的使用</a></p><h2 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h2><p><a target="_blank" href="https://springcloud.cc/" >Spring Cloud微服务架构集大成者，云计算最佳业务实践。</a></p><p><a target="_blank" href="http://springcloud.fun/" >Spring Cloud 中文索引</a></p><p><a target="_blank" href="http://www.ityouknow.com/spring-cloud.html" >纯洁的微笑SpringCloud系列文章</a></p><p><a target="_blank" href="https://www.fangzhipeng.com/spring-cloud.html" >方志朋的博客SpringCloud系列文章</a></p><p><a target="_blank" href="http://blog.didispace.com/spring-cloud-learning/" >程序猿DD的Spring Cloud 从入门到精通</a></p><p><a target="_blank" href="https://www.dalaoyang.cn/tag/springcloud/2" >dalaoyang博客SpringCloud系列文章</a></p><h2 id="消息中间件RabbitMQ"><a href="#消息中间件RabbitMQ" class="headerlink" title="消息中间件RabbitMQ"></a>消息中间件RabbitMQ</h2><p><a target="_blank" href="https://www.cnblogs.com/xingyunblog/p/9685359.html" >1.RabbitMQ 学习专栏</a></p><p><a target="_blank" href="https://www.jianshu.com/p/dae5bbed39b1" >2.RabbitMQ入门教程（概念，应用场景，安装，使用）</a></p><p><a target="_blank" href="https://www.zhihu.com/question/34243607" >3.消息队列的使用场景是怎样的？</a></p><h2 id="安全框架Shiro"><a href="#安全框架Shiro" class="headerlink" title="安全框架Shiro"></a>安全框架Shiro</h2><p><a target="_blank" href="https://jinnianshilongnian.iteye.com/blog/2018398" >跟我学Shiro</a></p><p><a target="_blank" href="https://www.cnblogs.com/learnhow/p/5694876.html" >30分钟学会如何使用Shiro</a></p><h2 id="前端框架：Vue"><a href="#前端框架：Vue" class="headerlink" title="前端框架：Vue"></a>前端框架：Vue</h2><p><a target="_blank" href="https://vuejs.bootcss.com/v2/guide" >1.Vue.js官方学习文档</a></p><p><a target="_blank" href="https://www.cnblogs.com/xumqfaith/p/7743387.html" >2.Vue中的 ref 和 $refs</a></p><h2 id="高并发应用"><a href="#高并发应用" class="headerlink" title="高并发应用"></a>高并发应用</h2><p><a target="_blank" href="https://www.cnblogs.com/wangzhongqiu/category/959574.html" >高并发解决方案</a></p><h2 id="Java并发知识图谱"><a href="#Java并发知识图谱" class="headerlink" title="Java并发知识图谱"></a>Java并发知识图谱</h2><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/07/2550976952.jpg" alt="第二专题-并发编程专题.png"></p>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle常用SQL语句工作总结（持续更新中）</title>
    <link href="/2019/04/25/2019-04-25-oracle-sql/"/>
    <url>/2019/04/25/2019-04-25-oracle-sql/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要是记录工作中遇到的一些各种’常用’和’变态’的SQL语句(๑•̀ㅁ•́ฅ)</p><hr><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h4 id="1-统计成功失败总数"><a href="#1-统计成功失败总数" class="headerlink" title="1.统计成功失败总数"></a>1.统计成功失败总数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(正确数)<span class="hljs-operator">+</span><span class="hljs-built_in">sum</span>(错误数) <span class="hljs-keyword">as</span> 总记录数,<span class="hljs-built_in">sum</span>(正确数),<span class="hljs-built_in">sum</span>(错误数)<br><span class="hljs-keyword">from</span> (<br>    <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) 正确数,<span class="hljs-number">0</span> 错误数<br>    <span class="hljs-keyword">from</span> tb<br>    <span class="hljs-keyword">where</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <br>    <span class="hljs-keyword">select</span> <span class="hljs-number">0</span> 正确数,<span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) 错误数<br>    <span class="hljs-keyword">from</span> tb<br>    <span class="hljs-keyword">where</span> status<span class="hljs-operator">=</span><span class="hljs-number">0</span>) a;<br></code></pre></td></tr></table></figure><h4 id="2-相同的id，取最新一条"><a href="#2-相同的id，取最新一条" class="headerlink" title="2.相同的id，取最新一条"></a>2.相同的id，取最新一条</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// 例子<br><span class="hljs-keyword">select</span> *<br>  <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> row_number() <span class="hljs-keyword">over</span>(<span class="hljs-keyword">partition</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-type">time</span> <span class="hljs-keyword">desc</span>) rn, a.*<br>           <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> a)<br> <span class="hljs-keyword">where</span> rn = <span class="hljs-number">1</span>;<br><br>// 实际使用<br><span class="hljs-keyword">select</span> <br>       <span class="hljs-keyword">temp</span>.c_notice_record_id <span class="hljs-keyword">as</span> &quot;noticeRecordId&quot;,<br>       <span class="hljs-keyword">temp</span>.c_notice_task_id <span class="hljs-keyword">as</span> &quot;noticeTaskId&quot;,<br>       <span class="hljs-keyword">temp</span>.c_receiver_id <span class="hljs-keyword">as</span> &quot;receiverId&quot;,<br>       <span class="hljs-keyword">temp</span>.c_notice_result <span class="hljs-keyword">as</span> &quot;noticeResult&quot;,<br>       <span class="hljs-keyword">temp</span>.create_time <span class="hljs-keyword">as</span> &quot;createTime&quot;<br>  <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> t.c_notice_record_id,<br>               t.c_notice_task_id,<br>               t.c_receiver_id,<br>               t.c_notice_result,<br>               t.create_time,<br>               row_number() <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> t.c_receiver_id <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> t.create_time <span class="hljs-keyword">desc</span>) <span class="hljs-keyword">as</span> row_flg<br>          <span class="hljs-keyword">from</span> t_notice_record t) <span class="hljs-keyword">temp</span><br> <span class="hljs-keyword">where</span> <span class="hljs-keyword">temp</span>.row_flg = <span class="hljs-string">&#x27;1&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="3-相同ID-合并字段，页面换行显示"><a href="#3-相同ID-合并字段，页面换行显示" class="headerlink" title="3.相同ID 合并字段，页面换行显示"></a>3.相同ID 合并字段，页面换行显示</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> t.project_code,<br>       listagg(to_char(t.sqmx), <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>) <span class="hljs-keyword">within</span> <span class="hljs-keyword">GROUP</span>(<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> t.project_code) <span class="hljs-keyword">as</span> sqmx<br>  <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> trrs.project_code,<br>               trrs.reveal_rate <span class="hljs-keyword">as</span> sqmx<br>          <span class="hljs-keyword">from</span> t_reveal_report_scheme trrs<br>         <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> = <span class="hljs-number">1</span><br>           <span class="hljs-keyword">and</span> trrs.delete_flag = <span class="hljs-string">&#x27;0&#x27;</span>) t<br> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> t.project_code;<br></code></pre></td></tr></table></figure><p>如图所示：<br><img src="https://niaobulashi.com/usr/uploads/sina/5d1c5145642a1.jpg" alt="请输入图片描述"></p><h4 id="4-根据表table-b的name去重查询的结果集查询表table-a"><a href="#4-根据表table-b的name去重查询的结果集查询表table-a" class="headerlink" title="4.根据表table_b的name去重查询的结果集查询表table_a"></a>4.根据表table_b的name去重查询的结果集查询表table_a</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> a.*<br>  <span class="hljs-keyword">from</span> table_a a<br> <span class="hljs-keyword">where</span> a.name <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> tc.name<br>                            <span class="hljs-keyword">from</span> table_b b<br>                           <span class="hljs-keyword">where</span> b.delete_flag = <span class="hljs-string">&#x27;0&#x27;</span>)<br>   <span class="hljs-keyword">and</span> a.delete_flag = <span class="hljs-string">&#x27;0&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="5-使用BETWEEN-DATE-YMD"><a href="#5-使用BETWEEN-DATE-YMD" class="headerlink" title="5.使用BETWEEN_DATE_YMD"></a>5.使用BETWEEN_DATE_YMD</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Date<span class="hljs-literal">[]</span> betweenDate = <span class="hljs-keyword">new</span> Date<span class="hljs-literal">[<span class="hljs-number">2</span>]</span>;<br>betweenDate<span class="hljs-literal">[<span class="hljs-number">0</span>]</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ToolUtil</span>.</span></span>formate<span class="hljs-constructor">Date(<span class="hljs-params">startDate</span>, <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>)</span>;<br>betweenDate<span class="hljs-literal">[<span class="hljs-number">1</span>]</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ToolUtil</span>.</span></span>formate<span class="hljs-constructor">Date(<span class="hljs-params">endDate</span>, <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>)</span>;<br>investWhereProp.add(<span class="hljs-keyword">new</span> <span class="hljs-constructor">ColumnBase(<span class="hljs-string">&quot;settlementDate&quot;</span>, <span class="hljs-params">betweenDate</span>, ColumnBase.BETWEEN_DATE_YMD)</span>);<br></code></pre></td></tr></table></figure><h4 id="6-查询临时表SQL"><a href="#6-查询临时表SQL" class="headerlink" title="6.查询临时表SQL"></a>6.查询临时表SQL</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> TU.TABLESPACE_NAME                                    <span class="hljs-keyword">AS</span> <span class="hljs-string">&quot;TABLESPACE_NAME&quot;</span>,<br>       TT.TOTAL - TU.USED                                    <span class="hljs-keyword">AS</span> <span class="hljs-string">&quot;FREE(G)&quot;</span>,<br>       TT.TOTAL                                              <span class="hljs-keyword">AS</span> <span class="hljs-string">&quot;TOTAL(G)&quot;</span>,<br>       <span class="hljs-built_in">ROUND</span>(NVL(TU.USED, <span class="hljs-number">0</span>) / TT.TOTAL * <span class="hljs-number">100</span>, <span class="hljs-number">3</span>)            <span class="hljs-keyword">AS</span> <span class="hljs-string">&quot;USED(%)&quot;</span>,<br>       <span class="hljs-built_in">ROUND</span>(NVL(TT.TOTAL - TU.USED, <span class="hljs-number">0</span>) * <span class="hljs-number">100</span> / TT.TOTAL, <span class="hljs-number">3</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&quot;FREE(%)&quot;</span><br><span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> TABLESPACE_NAME, <br>              <span class="hljs-built_in">SUM</span>(BYTES_USED) / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> USED<br>       <span class="hljs-keyword">FROM</span> V$TEMP_SPACE_HEADER<br>       <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> TABLESPACE_NAME) TU ,<br>     (<span class="hljs-keyword">SELECT</span> TABLESPACE_NAME,<br>              <span class="hljs-built_in">SUM</span>(BYTES) / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> <span class="hljs-keyword">AS</span> TOTAL<br>       <span class="hljs-keyword">FROM</span> DBA_TEMP_FILES<br>       <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> TABLESPACE_NAME) TT<br><span class="hljs-keyword">WHERE</span> TU.TABLESPACE_NAME = TT.TABLESPACE_NAME;<br></code></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h4 id="1-Oracle两表关联（join）更新字段值一张表到另一张表"><a href="#1-Oracle两表关联（join）更新字段值一张表到另一张表" class="headerlink" title="1.Oracle两表关联（join）更新字段值一张表到另一张表"></a>1.Oracle两表关联（join）更新字段值一张表到另一张表</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">update</span> (<span class="hljs-keyword">select</span> a.name aname, b.name bname <br>       <span class="hljs-keyword">from</span> A a, B b <span class="hljs-keyword">where</span> a.id = b.id)<br>   <span class="hljs-keyword">set</span> aname = bname;<br>//注：两表关联属性id必须为<span class="hljs-keyword">unique</span> <span class="hljs-keyword">index</span>或<span class="hljs-keyword">primary key</span><br></code></pre></td></tr></table></figure><h4 id="2-两表关联更新"><a href="#2-两表关联更新" class="headerlink" title="2.两表关联更新"></a>2.两表关联更新</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//查询TA中是否按单位净值成交，0-否，或者为空</span><br><span class="hljs-keyword">select</span> tf.c_tradebynetvalue, tpp.*<br>  <span class="hljs-keyword">from</span> t_polling_product tpp<br> inner <span class="hljs-keyword">join</span> tfundinfo@HSTA tf<br>    <span class="hljs-keyword">on</span> tpp.c_product_code = tf.c_fundcode<br>   <span class="hljs-keyword">and</span> (tf.c_tradebynetvalue <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">or</span> tf.c_tradebynetvalue = <span class="hljs-string">&#x27;0&#x27;</span>)<br>    <span class="hljs-keyword">where</span> tpp.c_polling_approve_status <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>;<br>    <br><span class="hljs-comment">//更新</span><br>update t_polling_product t<br>   <span class="hljs-keyword">set</span> t.c_stock_type_level1 = <span class="hljs-string">&#x27;1&#x27;</span>, t.c_stock_type_level2 = <span class="hljs-string">&#x27;07&#x27;</span><br> <span class="hljs-function"><span class="hljs-keyword">where</span> <span class="hljs-title">exists</span> (<span class="hljs-params"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span></span></span><br><span class="hljs-function"><span class="hljs-params">          <span class="hljs-keyword">from</span> tfundinfo@HSTA tf</span></span><br><span class="hljs-function"><span class="hljs-params">         <span class="hljs-keyword">where</span> tf.c_fundcode = t.c_product_code</span></span><br><span class="hljs-function"><span class="hljs-params">         <span class="hljs-keyword">and</span> (tf.c_tradebynetvalue <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">or</span> tf.c_tradebynetvalue = <span class="hljs-string">&#x27;0&#x27;</span></span>))</span><br><span class="hljs-function">   <span class="hljs-keyword">and</span> t.c_polling_approve_status <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span></span>;<br></code></pre></td></tr></table></figure><h4 id="3-A表关联B表更新A的两个字段"><a href="#3-A表关联B表更新A的两个字段" class="headerlink" title="3.A表关联B表更新A的两个字段"></a>3.A表关联B表更新A的两个字段</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">update A <span class="hljs-built_in">t1</span><br>   set (<span class="hljs-built_in">t1</span>.name, <span class="hljs-built_in">t1</span>.phone, <span class="hljs-built_in">t1</span>.age) =<br>       (select <span class="hljs-built_in">t2</span>.name, <span class="hljs-built_in">t2</span>.phone, <span class="hljs-built_in">t2</span>.age from <span class="hljs-keyword">B </span><span class="hljs-built_in">t2</span> where <span class="hljs-built_in">t2</span>.id = <span class="hljs-built_in">t1</span>.id)<br> where <span class="hljs-built_in">t1</span>.id in (select <span class="hljs-built_in">t2</span>.id from <span class="hljs-keyword">B </span><span class="hljs-built_in">t2</span> where <span class="hljs-built_in">t2</span>.id = <span class="hljs-built_in">t1</span>.id);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java处理excel时遇到的一些问题及总结</title>
    <link href="/2019/04/24/2019-04-24-java-excel/"/>
    <url>/2019/04/24/2019-04-24-java-excel/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>最近的开发过程中遇到需要导出excel，以及导入解析excel的需求<br>需要先导出excel，修改之后，再用该excel导入处理</p></blockquote><hr><h2 id="poi无法解析ooxml格式excel"><a href="#poi无法解析ooxml格式excel" class="headerlink" title="poi无法解析ooxml格式excel"></a>poi无法解析ooxml格式excel</h2><p>遇到了第一个问题，poi无法解析ooxml格式的excel文件，<a href="https://poi.apache.org/">poi</a>是apache解析excel文件以及相关操作的jar包。<br>当时平台导出的excel格式文件，无法导入解析，总是报错</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span>.io.IOException: Invalid header signature; read <span class="hljs-number">0</span>x<span class="hljs-number">6576206</span>C<span class="hljs-number">6</span>D<span class="hljs-number">783</span>F<span class="hljs-number">3</span>C, expected <span class="hljs-number">0</span>xE<span class="hljs-number">11</span>AB<span class="hljs-number">1</span>A<span class="hljs-number">1</span>E<span class="hljs-number">011</span>CFD<span class="hljs-number">0</span> - Your file appears not to be a valid OLE<span class="hljs-number">2</span> document<br></code></pre></td></tr></table></figure><p>在网上查阅资料好久，终于找到了一位博友的文章</p><p><a href="https://www.fanyeong.com/2016/03/20/%E4%BD%BF%E7%94%A8apache-poi%E7%94%9F%E6%88%90word%E6%96%87%E6%A1%A3%E4%B8%8D%E8%83%BD%E8%A2%ABoffice%E8%AF%BB%E5%8F%96%E7%9A%84%E9%97%AE%E9%A2%98/">使用apache-poi生成word文档不能被office读取的问题</a></p><p>可惜现在他的网站打不开了 ::aru:crying:: ，还好当时有记录问题截图</p><p><img src="https://niaobulashi.com/usr/uploads/sina/5d1c5144b6c4c.jpg" alt="博友描述的问题"></p><p>很明显了：poi并不支持ooxml格式的excel解析</p><p>所以找到一个excel公共处理项目，个人觉得很方便</p><p>github：<a href="https://github.com/niaobulashi/easy-excel">easy-excel</a><br>具体项目的操作已有说明，支持导入导出</p><p>该项目导出的excel为office的xls正常格式，可以满足这次导入的解析 ::aru:cheer:: </p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分库分表？如何做到永不迁移数据和避免热点？（转）</title>
    <link href="/2019/04/23/2019-04-23-new-db/"/>
    <url>/2019/04/23/2019-04-23-new-db/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>中大型项目中，一旦遇到数据量比较大，小伙伴应该都知道就应该对数据进行拆分了。有垂直和水平两种。<br>垂直拆分比较简单，也就是本来一个数据库，数据量大之后，从业务角度进行拆分多个库。如下图，独立的拆分出订单库和用户库。<br><img src="https://img-blog.csdnimg.cn/2019073010534092.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1Nzc0NzQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>水平拆分的概念，是同一个业务数据量大之后，进行水平拆分。<br><img src="https://img-blog.csdnimg.cn/20190730105350113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1Nzc0NzQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上图中订单数据达到了4000万，我们也知道mysql单表存储量推荐是百万级，如果不进行处理，mysql单表数据太大，会导致性能变慢。使用方案可以参考数据进行水平拆分。把4000万数据拆分4张表或者更多。当然也可以分库，再分表；把压力从数据库层级分开。</p><h2 id="二、分库分表方案"><a href="#二、分库分表方案" class="headerlink" title="二、分库分表方案"></a>二、分库分表方案</h2><p>分库分表方案中有常用的方案，hash取模和range范围方案；分库分表方案最主要就是路由算法，把路由的key按照指定的算法进行路由存放。下边来介绍一下两个方案的特点。</p><p><strong>1、hash取模方案</strong></p><p><img src="https://img-blog.csdnimg.cn/20190730105610280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1Nzc0NzQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在我们设计系统之前，可以先预估一下大概这几年的订单量，如：4000万。每张表我们可以容纳1000万，也我们可以设计4张表进行存储。<br>那具体如何路由存储的呢？hash的方案就是对指定的路由key（如：id）对分表总数进行取模，上图中，id=12的订单，对4进行取模，也就是会得到0，那此订单会放到0表中。id=13的订单，取模得到为1，就会放到1表中。为什么对4取模，是因为分表总数是4。</p><p><strong>优点：</strong></p><p>订单数据可以均匀的放到那4张表中，这样此订单进行操作时，就不会有热点问题。</p><p>热点的含义：热点的意思就是对订单进行操作集中到1个表中，其他表的操作很少。</p><p>订单有个特点就是时间属性，一般用户操作订单数据，都会集中到这段时间产生的订单。如果这段时间产生的订单 都在同一张订单表中，那就会形成热点，那张表的压力会比较大。</p><p><strong>缺点：</strong></p><p>将来的数据迁移和扩容，会很难。</p><p>如：业务发展很好，订单量很大，超出了4000万的量，那我们就需要增加分表数。如果我们增加4个表<br><img src="https://img-blog.csdnimg.cn/20190730105626918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1Nzc0NzQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>一旦我们增加了分表的总数，取模的基数就会变成8，以前id=12的订单按照此方案就会到4表中查询，但之前的此订单时在0表的，这样就导致了数据查不到。就是因为取模的基数产生了变化。</p><p>遇到这个情况，我们小伙伴想到的方案就是做数据迁移，把之前的4000万数据，重新做一个hash方案，放到新的规划分表中。也就是我们要做数据迁移。这个是很痛苦的事情。有些小公司可以接受晚上停机迁移，但大公司是不允许停机做数据迁移的。</p><p>当然做数据迁移可以结合自己的公司的业务，做一个工具进行，不过也带来了很多工作量，每次扩容都要做数据迁移</p><p>那有没有不需要做数据迁移的方案呢，我们看下面的方案</p><p><strong>2、range范围方案</strong></p><p>range方案也就是以范围进行拆分数据。</p><p><img src="https://img-blog.csdnimg.cn/20190730105639290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1Nzc0NzQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>range方案比较简单，就是把一定范围内的订单，存放到一个表中；如上图id=12放到0表中，id=1300万的放到1表中。设计这个方案时就是前期把表的范围设计好。通过id进行路由存放。</p><p><strong>优点</strong></p><p>我们小伙伴们想一下，此方案是不是有利于将来的扩容，不需要做数据迁移。即时再增加4张表，之前的4张表的范围不需要改变，id=12的还是在0表，id=1300万的还是在1表，新增的4张表他们的范围肯定是 大于 4000万之后的范围划分的。</p><p><strong>缺点</strong></p><p>有热点问题，我们想一下，因为id的值会一直递增变大，那这段时间的订单是不是会一直在某一张表中，如id=1000万 ～ id=2000万之间，这段时间产生的订单是不是都会集中到此张表中，这个就导致1表过热，压力过大，而其他的表没有什么压力。</p><p><strong>3、总结：</strong></p><p>hash取模方案：没有热点问题，但扩容迁移数据痛苦</p><p>range方案：不需要迁移数据，但有热点问题。</p><p>那有什么方案可以做到两者的优点结合呢？，即不需要迁移数据，又能解决数据热点的问题呢？</p><p>其实还有一个现实需求，能否根据服务器的性能以及存储高低，适当均匀调整存储呢？</p><p><img src="https://img-blog.csdnimg.cn/20190730105656363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1Nzc0NzQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="三、方案思路"><a href="#三、方案思路" class="headerlink" title="三、方案思路"></a>三、方案思路</h2><p>hash是可以解决数据均匀的问题，range可以解决数据迁移问题，那我们可以不可以两者相结合呢？利用这两者的特性呢？<br>我们考虑一下数据的扩容代表着，路由key（如id）的值变大了，这个是一定的，那我们先保证数据变大的时候，首先用range方案让数据落地到一个范围里面。这样以后id再变大，那以前的数据是不需要迁移的。</p><p>但又要考虑到数据均匀，那是不是可以在一定的范围内数据均匀的呢？因为我们每次的扩容肯定会事先设计好这次扩容的范围大小，我们只要保证这次的范围内的数据均匀是不是就ok了。<br><img src="https://img-blog.csdnimg.cn/20190730105729517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1Nzc0NzQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="四、方案设计"><a href="#四、方案设计" class="headerlink" title="四、方案设计"></a>四、方案设计</h2><p>我们先定义一个group组概念，这组里面包含了一些分库以及分表，如下图</p><p><img src="https://img-blog.csdnimg.cn/2019073010575679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1Nzc0NzQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>上图有几个关键点：</strong><br>1）id=0～4000万肯定落到group01组中</p><p>2）group01组有3个DB，那一个id如何路由到哪个DB？</p><p>3）根据hash取模定位DB，那模数为多少？模数要为所有此group组DB中的表数，上图总表数为10。为什么要去表的总数？而不是DB总数3呢？</p><p>4）如id=12，id%10=2；那值为2，落到哪个DB库呢？这是设计是前期设定好的，那怎么设定的呢？</p><p>5）一旦设计定位哪个DB后，就需要确定落到DB中的哪张表呢？</p><p><img src="https://img-blog.csdnimg.cn/20190730105802673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1Nzc0NzQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="五、核心主流程"><a href="#五、核心主流程" class="headerlink" title="五、核心主流程"></a>五、核心主流程</h2><p><img src="https://img-blog.csdnimg.cn/20190730105819287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1Nzc0NzQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>按照上面的流程，我们就可以根据此规则，定位一个id，我们看看有没有避免热点问题。</p><p>我们看一下，id在【0，1000万】范围内的，根据上面的流程设计，1000万以内的id都均匀的分配到DB_0,DB_1,DB_2三个数据库中的Table_0表中，为什么可以均匀，因为我们用了hash的方案，对10进行取模。</p><p>上面我们也提了疑问，为什么对表的总数10取模，而不是DB的总数3进行取模？我们看一下为什么DB_0是4张表，其他两个DB_1是3张表？</p><p>在我们安排服务器时，有些服务器的性能高，存储高，就可以安排多存放些数据，有些性能低的就少放点数据。如果我们取模是按照DB总数3，进行取模，那就代表着【0，4000万】的数据是平均分配到3个DB中的，那就不能够实现按照服务器能力适当分配了。</p><p><strong>按照Table总数10就能够达到，看如何达到</strong></p><p><img src="https://img-blog.csdnimg.cn/20190730110356861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1Nzc0NzQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>上图中我们对10进行取模，如果值为【0，1，2，3】就路由到DB_0，【4，5，6】路由到DB_1，【7，8，9】路由到DB_2。现在小伙伴们有没有理解，这样的设计就可以把多一点的数据放到DB_0中，其他2个DB数据量就可以少一点。DB_0承担了4/10的数据量，DB_1承担了3/10的数据量，DB_2也承担了3/10的数据量。整个Group01承担了【0，4000万】的数据量。</p><p>注意：小伙伴千万不要被DB_1或DB_2中table的范围也是0～4000万疑惑了，这个是范围区间，也就是id在哪些范围内，落地到哪个表而已。</p><p>上面一大段的介绍，就解决了热点的问题，以及可以按照服务器指标，设计数据量的分配。<br><img src="https://img-blog.csdnimg.cn/20190730105922585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1Nzc0NzQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="六、如何扩容"><a href="#六、如何扩容" class="headerlink" title="六、如何扩容"></a>六、如何扩容</h2><p>其实上面设计思路理解了，扩容就已经出来了；那就是扩容的时候再设计一个group02组，定义好此group的数据范围就ok了。</p><p><img src="https://img-blog.csdnimg.cn/20190730105944944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1Nzc0NzQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>因为是新增的一个group01组，所以就没有什么数据迁移概念，完全是新增的group组，而且这个group组照样就防止了热点，也就是【4000万，5500万】的数据，都均匀分配到三个DB的table_0表中，【5500万～7000万】数据均匀分配到table_1表中。</p><h2 id="七、系统设计"><a href="#七、系统设计" class="headerlink" title="七、系统设计"></a>七、系统设计</h2><p><img src="https://img-blog.csdnimg.cn/20190730110000333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1Nzc0NzQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>思路确定了，设计是比较简单的，就3张表，把group，DB，table之间建立好关联关系就行了。</p><p><strong>group和DB的关系</strong><br><img src="https://img-blog.csdnimg.cn/20190730110056301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1Nzc0NzQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190730110128280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1Nzc0NzQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>table和db的关系</strong></p><p>上面的表关联其实是比较简单的，只要原理思路理顺了，就ok了。小伙伴们在开发的时候不要每次都去查询三张关联表，可以保存到缓存中（本地jvm缓存），这样不会影响性能。<br><img src="https://img-blog.csdnimg.cn/20190730110141494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1Nzc0NzQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>一旦需要扩容，小伙伴是不是要增加一下group02关联关系，那应用服务需要重新启动吗？<br>简单点的话，就凌晨配置，重启应用服务就行了。但如果是大型公司，是不允许的，因为凌晨也有订单的。那怎么办呢？本地jvm缓存怎么更新呢？</p><p>其实方案也很多，可以使用用zookeeper，也可以使用分布式配置，这里是比较推荐使用分布式配置中心的，可以将这些数据配置到分布式配置中心去</p><p>到此为止，整体的方案介绍结束，希望对小伙伴们有所帮助。谢谢！！！</p><p>这边隐含了一个关键点，那就是路由key（如：id）的值是非常关键的，要求一定是有序的，自增的，这个就涉及到分布式唯一id的方案！</p>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>分表分库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java系统架构师学习体系图</title>
    <link href="/2019/04/22/2019-04-22-java-architect/"/>
    <url>/2019/04/22/2019-04-22-java-architect/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>分享一张Java系统架构师的架构学习体系图</p></blockquote><hr><p><img src="https://images.niaobulashi.com/typecho/uploads/2019/07/4115284714.jpg" alt="Java系统架构师"></p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打包成war包之后如何读取配置文件</title>
    <link href="/2019/04/17/2019-04-17-java-war-filePath/"/>
    <url>/2019/04/17/2019-04-17-java-war-filePath/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天工作开发中遇到一个问题：在idea运行的项目读取配置文件没有问题，打包成war包之后就会报错java.io.FileNotFoundException: class path resource</p><hr><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>打包成war包后，配置文件在war包中，不是一个独立的文件了，无法通过File的方式访问</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">String filePath = <span class="hljs-string">&quot;classpath:template_xml/readexcel/test.xml&quot;</span>;<br>File file = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResourceUtils</span>.</span></span>get<span class="hljs-constructor">File(<span class="hljs-params">filePath</span>)</span>;<br>InputStream fis = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileInputStream(<span class="hljs-params">file</span>)</span>;<br></code></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过文件流的形式读取文件</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">String filePath = <span class="hljs-string">&quot;template_xml/readexcel/test.xml&quot;</span>;<br>InputStream fis = this.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">ResourceAsStream(<span class="hljs-params">filePath</span>)</span>;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>开发过程中遇到读取文件的，尽量用文件流的形式读取文件，可避免在不同环境下可以正确读取</p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ORA-02049：oracle超时分布式事务处理等待锁</title>
    <link href="/2019/04/16/2019-04-16-oracle-TimeOut/"/>
    <url>/2019/04/16/2019-04-16-oracle-TimeOut/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="查询死锁信息"><a href="#查询死锁信息" class="headerlink" title="查询死锁信息"></a>查询死锁信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> username,<br>       lockwait,<br>       status,<br>       machine,<br>       program<br>  <span class="hljs-keyword">FROM</span> v$session<br> <span class="hljs-keyword">WHERE</span> sid <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> session_id <span class="hljs-keyword">FROM</span> v$locked_object);<br></code></pre></td></tr></table></figure><h2 id="查找被锁的SQL语句"><a href="#查找被锁的SQL语句" class="headerlink" title="查找被锁的SQL语句"></a>查找被锁的SQL语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> sql_text<br>  <span class="hljs-keyword">FROM</span> v$<span class="hljs-keyword">sql</span><br> <span class="hljs-keyword">WHERE</span> hash_value <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> sql_hash_value<br>                        <span class="hljs-keyword">FROM</span> v$session<br>                       <span class="hljs-keyword">WHERE</span> sid <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> session_id <span class="hljs-keyword">FROM</span> v$locked_object));<br><br></code></pre></td></tr></table></figure><h2 id="查找被死锁的进程"><a href="#查找被死锁的进程" class="headerlink" title="查找被死锁的进程"></a>查找被死锁的进程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.username,<br>       l.OBJECT_ID,<br>       l.SESSION_ID,<br>       s.SERIAL#,<br>       l.ORACLE_USERNAME,<br>       l.OS_USER_NAME,<br>       l.PROCESS<br>  <span class="hljs-keyword">FROM</span> V$LOCKED_OBJECT l, V$SESSION S<br> <span class="hljs-keyword">WHERE</span> l.SESSION_ID <span class="hljs-operator">=</span> S.SID;<br><br><span class="hljs-comment">--或者</span><br><br><span class="hljs-keyword">SELECT</span> <br> S.USERNAME,<br> DECODE(L.TYPE, <span class="hljs-string">&#x27;TM&#x27;</span>, <span class="hljs-string">&#x27;TABLE LOCK&#x27;</span>, <span class="hljs-string">&#x27;TX&#x27;</span>, <span class="hljs-string">&#x27;ROW LOCK&#x27;</span>, <span class="hljs-keyword">NULL</span>) LOCK_LEVEL,<br> O.OWNER,<br> O.OBJECT_NAME,<br> O.OBJECT_TYPE,<br> S.SID,<br> S.SERIAL#,<br> S.TERMINAL,<br> S.MACHINE,<br> S.PROGRAM,<br> S.OSUSER<br>  <span class="hljs-keyword">FROM</span> V$SESSION S, V$LOCK L, DBA_OBJECTS O<br> <span class="hljs-keyword">WHERE</span> L.SID <span class="hljs-operator">=</span> S.SID<br>   <span class="hljs-keyword">AND</span> L.ID1 <span class="hljs-operator">=</span> O.OBJECT_ID(<span class="hljs-operator">+</span>)<br>   <span class="hljs-keyword">AND</span> S.USERNAME <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h2 id="根据实际情况决定是否kill"><a href="#根据实际情况决定是否kill" class="headerlink" title="根据实际情况决定是否kill"></a>根据实际情况决定是否kill</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">system</span> kill session <span class="hljs-string">&#x27;sid,serial#&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>明天走起，飞广州</title>
    <link href="/2019/04/05/2019-04-05-tomorrow-to-guangzhou/"/>
    <url>/2019/04/05/2019-04-05-tomorrow-to-guangzhou/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>明天4点半起床，或者更早4点半出发，飞往广州</p><p>才3天假期，国务院怎么不早点公布5月1号的放假计划，有4天<br>无奈早就买好了飞机票，不然就5月出行了</p><p>这里有点坑，飞机票的改票或者退票，只退给你50块钱的油钱？？ ::aru:despise::<br>合着我600多买的飞机票，要改票或者退票，只退50 ::aru:cryingface:: </p><p>两个月去两次广州，这谁抗得住啊！经济不允许我这么干啊</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/1617863848901.jpg" alt="请输入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自用谷歌插件推荐</title>
    <link href="/2019/03/26/2019-03-26-google-extensions/"/>
    <url>/2019/03/26/2019-03-26-google-extensions/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>分享一波自用的谷歌插件<br>这是我目前浏览器用的插件(ฅ´ω`ฅ)<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/5d1c513a07c98.jpg" alt="请输入图片描述"></p><p>有几个值得推荐下</p><p>1、<a href="https://tampermonkey.net/">tampermonkey</a> 油猴无需解释，简直不能太牛逼了</p><p>推荐一些优秀方便的脚本<a href="https://greasyfork.org/zh-CN/scripts">https://greasyfork.org/zh-CN/scripts</a><br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/5d1c513c8bd40.jpg" alt="请输入图片描述"></p><p>2、<a href="http://bugs.chronodownloader.net/my_view_page.php">Chrono下载管理器</a> 浏览器下载文件管理，很是方便<br><a href="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/5d1c513720142.jpg">https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/5d1c513720142.jpg</a></p><p>3、<a href="https://link.zhihu.com/?target=https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en">postman</a> 后台开发人员必备</p><p>当然了，有桌面应用了<a href="https://www.getpostman.com/downloads/">https://www.getpostman.com/downloads/</a></p><p>4、<a href="http://www.ggfwzs.com/">谷歌访问助手</a> 让你科学上网</p><p>仅限访问google搜索，google邮箱、google扩展商店等服务<br>当然了，有条件的可以弄个VPN年会员，我用的蓝灯，很快，都可以共享设备<br>没有买VPN的小伙伴，可以用这个，google搜索响应很快，牛逼<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/5d1c513ccaa0b.jpg" alt="请输入图片描述"></p><p>5、<a href="https://chrome.google.com/webstore/detail/adblock/gighmmpiobklfepjocnamgkkbiglidom">AdBlock</a> 去广告神器</p><p>无需解释，屏蔽就完事了</p><p>6、微博图床 对于习惯使用markdown的小伙伴来说简直太方便了<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/5d1c513d403ae.jpg" alt="请输入图片描述"></p><p>7、<a href="https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad">FeHelper</a> 前端开发助手</p><p>各种开发工具包，很是全面<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/5d1c513d883aa.jpg" alt="请输入图片描述"></p><p>8、<a href="https://chrome.google.com/webstore/detail/super-history-cache-clean/afelaengidkffdcabnhdoeojoeoonfcn/reviews">Super History &amp; Cache Cleaner</a> 一键清理缓存<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/5d1c513dc0e13.jpg" alt="请输入图片描述"></p><p>9、<a href="https://chrome.google.com/webstore/detail/%E5%9B%BE%E6%B5%81-%E7%9C%8B%E5%9B%BE%E5%8A%A9%E6%89%8B/gpcdnjdgomhddecjpknmfodkpkgibajh?hl=zh-CN">图流</a> 一键展示当前浏览器窗口的所有图片，提供一键图片下载功能</p><p>牛逼！<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/5d1c513e3e1a2.jpg" alt="请输入图片描述"></p><p>10、<a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=en-US">Octotree</a> github浏览项目是，左侧类似idea展示项目结构，牛逼！<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/5d1c513e893c3.jpg" alt="请输入图片描述"></p><p>11、<a href="https://chrome.google.com/webstore/detail/isometric-contributions/mjoedlfflcchnleknnceiplgaeoegien">Isometric Contributions</a> github提交3D视图装逼神器<br><img src="https://niaobulashi.com/usr/uploads/sina/5d1c513ec43b9.jpg" alt="请输入图片描述"></p><p>12、<a href="https://chrome.google.com/webstore/detail/%E4%BA%91%E6%94%B6%E8%97%8F/gnidnmkcdgfiemdaeijncglpgldflhbb?hl=zh-CN">云收藏</a> 由技术大拿：纯洁的微笑  开发的。 随时随地 - 方便快捷 - 智慧收藏 我们做了一个可以在线随时随地简单收藏的一个网站，可以在这个网站上分类整理收藏的网站或者文章，也可以查看别人都收藏了些什么。<br>请输入图片描述</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Google</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发知识图谱</title>
    <link href="/2019/03/25/2019-03-25-java-concurrency/"/>
    <url>/2019/03/25/2019-03-25-java-concurrency/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/1655491825.jpg" alt="Java并发知识图谱.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>喜大普奔喜大普奔，五一调休4天啊啊啊</title>
    <link href="/2019/03/24/2019-03-24-May-Day/"/>
    <url>/2019/03/24/2019-03-24-May-Day/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>国务院发布新消息</p><p><a href="http://www.gov.cn/zhengce/content/2019-03/22/content_5375877.htm">国务院办公厅关于调整2019年劳动节假期安排的通知</a></p><hr><p>各省、自治区、直辖市人民政府，国务院各部委、各直属机构：</p><p>经国务院批准，现将调整2019年劳动节放假安排通知如下。</p><p>一、<strong>2019年5月1日至4日放假调休，共4天。4月28日（星期日）、5月5日（星期日）上班。</strong></p><p>二、<strong>各地区、各部门要抓紧做好本地区、本领域的劳动节假期调整落实工作，采取有效措施，保障交通运力，加强旅游服务，丰富产品供给，强化综合调控，确保平稳运行。</strong></p><p>三、<strong>劳动节期间，要妥善安排好值班和安全、保卫等工作，遇有重大突发事件，要按规定及时报告并妥善处置，确保人民群众祥和平安度过节日假期。</strong></p><hr>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>看到一篇文章《停止学习框架》</title>
    <link href="/2019/03/23/2019-03-23-stop-learn-struct/"/>
    <url>/2019/03/23/2019-03-23-stop-learn-struct/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>知乎译文地址：<a href="https://zhuanlan.zhihu.com/p/52814937">https://zhuanlan.zhihu.com/p/52814937</a><br>原文地址：<a href="http://link.zhihu.com/?target=https://sizovs.net/2018/12/17/stop-learning-frameworks/">http://link.zhihu.com/?target=https%3A//sizovs.net/2018/12/17/stop-learning-frameworks/</a></p><p>感受颇深，框架是为了方便开发项目拿来现成用的。只要你知道这套框架的开发步骤、规范，就知道如何开发了。<br>其他的无非就是一些java其他的基础代码。一些基本逻辑框架都给你封装好了，所以你需要做的事情很少了。</p><p>我觉得这篇文章写得挺好的，可以告诉正在学习框架的我们一个明确的方向：学习框架=浪费时间！<br>你需要学习的东西有比学习框架更有意义。比如jvm、java高并发、Linux、通讯服务。。。</p><p>笔者推荐了程序员需要了解的书籍</p><ul><li>程序员修炼之道 The Pragmatic Programmer</li><li>代码整洁之道 Clean Code</li><li>程序员的职业素养 The Clean Code</li><li>领域驱动设计和实践 Domain-Driven Design</li><li>测试驱动的面向对象软件开发 Growing Object-Oriented Software, Guided by Tests</li><li>持续交付 Continuous Delivery</li></ul><p>以及对读者的解释</p><ul><li>用的编程语言虽然不一样，但是设计方法是类似的。</li><li>用的框架虽然是不一样的，但是设计模式是类似的。</li><li>参与的开发者是不一样的，但是如何和这些人打交道是不变的。</li></ul><p>对读者的忠告，将你的黄金时间用于学习通用技能，那些不会过时的技能。</p><ul><li>不要学习微服务框架，学习演进式架构（Evolutionary Architecture）。</li><li>不要学习新的编程语言，学习代码整洁之道、设计模式、领域驱动设计（DDD）。</li><li>不要学习 LeSS 和规模化敏捷框架（SAFe），学习精益生产原则（Lean manufacturing principles）。</li><li>不要学习 Hystrix，学习容错模式（Fault Tolerance Patterns）。</li><li>不要学习 Docker，学成持续交付。</li><li>不要学习 Angular、React 和 Vue，学习 Web、HTTP 和 REST。</li></ul><p>重在基础知识，而非框架。</p>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript判断对象是否是NULL</title>
    <link href="/2019/03/22/2019-03-22-JavaScript-isnotnull/"/>
    <url>/2019/03/22/2019-03-22-JavaScript-isnotnull/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>写js经常会遇到非空判断</p><p>自己没有做总结，特地转载。很有帮助</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isEmpty</span>(<span class="hljs-params">obj</span>) </span>&#123;<br><span class="hljs-comment">// 检验 undefined 和 null</span><br>    <span class="hljs-keyword">if</span> (!obj &amp;&amp; obj !== <span class="hljs-number">0</span> &amp;&amp; obj !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.prototype.isPrototypeOf(obj) &amp;&amp; obj.length === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Object</span>.prototype.isPrototypeOf(obj) &amp;&amp; <span class="hljs-built_in">Object</span>.keys(obj).length === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年3月份日志</title>
    <link href="/2019/03/21/2019-03-21-rizhi/"/>
    <url>/2019/03/21/2019-03-21-rizhi/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="20190301-周五"><a href="#20190301-周五" class="headerlink" title="20190301 周五"></a>20190301 周五</h2><p>3月第一天，周五，一到周五就感觉轻松了许多，飘得很。 ::aru:tongue:: 再忙也不觉得心累哈哈哈哈<br>然而临近下班时，生产出现了问题，(´இ皿இ｀)得加会班了。</p><h2 id="20190302-20190303-周末"><a href="#20190302-20190303-周末" class="headerlink" title="20190302-20190303 周末"></a>20190302-20190303 周末</h2><p>额，周末两天刚好育碧的全境封锁2开放测试，都在玩去了φ(￣∇￣o)，真好玩哈哈哈哈哈，果断预购了，买的标准版，使用100金币打8折，折后240多软妹币</p><h2 id="20190304-周一"><a href="#20190304-周一" class="headerlink" title="20190304 周一"></a>20190304 周一</h2><p>又到了周一，加油吧，把没做完的事情加班加点做完</p><h2 id="20190305-周二"><a href="#20190305-周二" class="headerlink" title="20190305 周二"></a>20190305 周二</h2><p>工作上遇到批量处理之后，如果在页面上弹框提示该批量的处理结果状态，解决方案是：在ajax成功后时间再调用方法查询这笔批量的结果，返回页面后循环成list的字符串弹框展示。今天就是完成了批量提示的需求优化内容。<br>上班有时候划划水，最近逼乎逛得勤快，倒是微博逛得少了，看来是喜欢吃瓜的心理 ::huaji:huaji03::<br>今天买了清明假期去广州的飞机票 ::aru:pouting:: 哦也</p><p>贴一张昨晚拍的图片，就在公司附件的高新咖啡街区</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/3957195680.jpg" alt="微信图片_20190306142412.jpg"></p><h2 id="20190306-周三"><a href="#20190306-周三" class="headerlink" title="20190306 周三"></a>20190306 周三</h2><p>昨晚加班到9点多，终于把事情给做完了。开心~<br>晚上回去，在b站上看《百家讲坛》，王立群读史记，解读历史上各代皇帝的故事。<br>一看不知不觉就到了凌晨，简直停不下来了∠( ᐛ 」∠)＿<br>开始讲的秦始皇，战国时期，百家争鸣，太给力了。<br>秦国合纵连横，亲远攻近，逐一击破，最终统一天下 ::aru:thumb:: </p><h2 id="20190307-周四"><a href="#20190307-周四" class="headerlink" title="20190307 周四"></a>20190307 周四</h2><p>加班也没听歌，打开百家讲坛，听王立群度史记，太有意思啦<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/957458222.png" alt="微信截图_20190307203955.png"></p><h2 id="20190308-周五"><a href="#20190308-周五" class="headerlink" title="20190308 周五"></a>20190308 周五</h2><p>星期五的到来，整个人都慵懒了，虽然有事情要做，但是却不急不慢的悠悠哉哉的来做，飘了。<br>因为下个星期要上线，周五把最后要修改的代码，匆匆忙忙的修改好之后，提交了。发版到准生产环境开始到处点点，测试。<br>最后就是各种文档的补充了，啊啊啊啊啊，好多文档啊，最后还是晚上8点多才下班 ::aru:crying:: </p><h2 id="20190309-20190310-周末"><a href="#20190309-20190310-周末" class="headerlink" title="20190309-20190310 周末"></a>20190309-20190310 周末</h2><p>啊啊啊啊啊，到了周末了啊啊啊啊啊 ::aru:cheer::<br>周末这两天我估计是打了鸡血了，周六和周日早上和正常上班一样，起得很早。<br>但是起这么早也不知道做啥，隔壁酒店的WIFI上不了网，于是我就没有WIFI了（公司宿舍没有开通网线，坑啊 ::aru:despise:: ！！）<br>让我难受得鸭皮！平时网上冲浪用大王卡流量倒是没有问题，可是看视频什么的，流量也伤不起啊，只能依靠隔壁酒店的免费WIFI了<br>我是一条咸鱼，周末啥都不想做 ::aru:blood:: </p><h2 id="20190311-周一"><a href="#20190311-周一" class="headerlink" title="20190311 周一"></a>20190311 周一</h2><p>周一上午开一上午会，常规操作，在会议室都快睡着了都。<br>今天开会开启了2.12.0版本的需求计划<br>哦对了，周末加薪了，加了500。彻底失去信心了<br>感觉和自己的付出完全不成正比，只能呵呵。。<br>心累了</p><h2 id="20190312-周二"><a href="#20190312-周二" class="headerlink" title="20190312 周二"></a>20190312 周二</h2><p>和往常一样，新的需求下来了，有开始分析需求。一直到晚上9点多，终于把一个问题给解决了。需求终于理清楚了(≧∇≦)/</p><h2 id="20190313-周三"><a href="#20190313-周三" class="headerlink" title="20190313 周三"></a>20190313 周三</h2><p>分析好的需求，在今天讨论下来，全线崩盘，心中有一万只草泥马跑过 ::aru:crying:: </p><h2 id="20190316-20190317-周末"><a href="#20190316-20190317-周末" class="headerlink" title="20190316-20190317 周末"></a>20190316-20190317 周末</h2><p>全境封锁2开放了，周末肝了两天，达到30级。。<br>冲冲冲</p><h2 id="20190319-周一"><a href="#20190319-周一" class="headerlink" title="20190319 周一"></a>20190319 周一</h2><p>10月国庆结完婚之后，立马走人。</p><h2 id="20190320-周三"><a href="#20190320-周三" class="headerlink" title="20190320 周三"></a>20190320 周三</h2><p>今天遇到一个问题：由列表导出Excel文档，Excel文档的格式是xml，使用常用的excel解析是无法解析的。会出现java.io.IOException: Invalid header signature; read 0x6576206C6D783F3C, expected 0xE11AB1A1E011CFD0 - Your file appears not to be a valid OLE2 document 异常信息，在网上查找了好多资料，还是没有找到是什么原因，最终找到了和我遇到一样的情况：<a href="https://www.fanyeong.com/2016/03/20/%E4%BD%BF%E7%94%A8apache-poi%E7%94%9F%E6%88%90word%E6%96%87%E6%A1%A3%E4%B8%8D%E8%83%BD%E8%A2%ABoffice%E8%AF%BB%E5%8F%96%E7%9A%84%E9%97%AE%E9%A2%98/">使用Apache POI生成Word文档不能被office读取的问题</a><br>这位博主也是大牛，总结得很好୧(๑•̀⌄•́๑)૭</p><p>另外，买了仰卧板，平时也得加强锻炼身体呀。可不能再胖乎乎的了。</p><h2 id="20190321-周四"><a href="#20190321-周四" class="headerlink" title="20190321 周四"></a>20190321 周四</h2><p>加班的时间，看下腾讯课堂，老师公然开车哈哈哈哈哈</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日常喜加一</title>
    <link href="/2019/03/01/2019-03-01-steamplus1/"/>
    <url>/2019/03/01/2019-03-01-steamplus1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/826484680.png" alt="我昨天干了什么？.png"></p><p>steam日常喜加一</p><p>男生逛steam堪比女生逛化妆店。</p><p>shut up and take my money</p><p>8说了，开冲</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/3846328606.jpg" alt="v2-3b29ec3e03803927928601c0c721fddd_hd.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>收到这样的报文，你做何感想</title>
    <link href="/2019/02/28/2019-02-28-wtf01/"/>
    <url>/2019/02/28/2019-02-28-wtf01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>和另外一个项目组做接口对接，看下他们处理返回的报文。</p><p>其中有一个是null，却当成字符串 ::aru:blood:: </p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2019/3757155571.png" alt="微信截图_20190228113028.png"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>去女朋友家过年</title>
    <link href="/2019/02/20/2019-02-20-go-grilfriend-home/"/>
    <url>/2019/02/20/2019-02-20-go-grilfriend-home/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好久没来看博客了，博客的邮箱用的QQ邮箱，由于有定期修改QQ密码的习惯，导致忘记修改博客的邮箱提醒的QQ的密码，以为没有人来看，进来一看，有写留言，还是感觉挺开心的。</p><hr><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今年春节是在女朋友家去过年的，也是第二次去女朋友家，第一次还是2018年的国庆。未来的岳父岳母大人都非常的好，第一次没有在父母身边过年，让我感到也不是挺失落，第一次没有在父母身边过年。和岳父岳母大人也谈了谈结婚的事情，打算是2019年的国庆，想想也只有这个时候有时间，到时候随便也把婚假7天都请了，时间充裕点。我咸宁，她随州，虽然同省，还是有点距离的，路途有半天。提前还得好好规划下，问了我爸妈，也问了她爸妈，大致流程也算明白了点</p><ol><li>我带我爸爸妈妈去女方家提亲（见个面，吃个饭，喝个茶，聊聊天）</li><li>我接女方的爸爸妈妈和其他亲戚提前来我家</li><li>隔天在酒店举办婚礼</li><li>女方选个时间，在女方也请客吃饭</li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;流程也太粗略了，现在能想到的就这些，彩礼当然也准备好了，多少呢，也不太多。岳母大人的意思，是手下给我女朋友，然后我们一起奋斗在武汉买房。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;人生中只有一次，到来的时候，估计会慌了吧。</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>发现个了不得的项目</title>
    <link href="/2019/01/23/2019-01-23-dress/"/>
    <url>/2019/01/23/2019-01-23-dress/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="偶尔发现github上一个了不起的项目"><a href="#偶尔发现github上一个了不起的项目" class="headerlink" title="偶尔发现github上一个了不起的项目"></a>偶尔发现github上一个了不起的项目</h3><h3 id="上面有很多小姐姐"><a href="#上面有很多小姐姐" class="headerlink" title="上面有很多小姐姐"></a>上面有很多小姐姐</h3><p> ::aru:shy:: </p><h3 id="你没错看错，都是大佬"><a href="#你没错看错，都是大佬" class="headerlink" title="你没错看错，都是大佬"></a>你没错看错，都是大佬</h3><p><a href="https://github.com/komeiji-satori/Dress">很多漂亮的小姐姐</a></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018年年终总结</title>
    <link href="/2019/01/21/2019-01-21-The-year-end-summary-of-2018/"/>
    <url>/2019/01/21/2019-01-21-The-year-end-summary-of-2018/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-存在的困难和不足"><a href="#一-存在的困难和不足" class="headerlink" title="一.存在的困难和不足"></a>一.存在的困难和不足</h2><ol><li>有时候开发过程中求快，忽略了一些难以一眼就发现的问题，在敲代码的过程，应该思考为什么这么写。同时应该联想到该如何处理异常状况。这是需要在后面的开发过程中不断完善的内容。</li><li>刻苦专研的精神还不够，有时候会不求甚解。这是我的不足，应该在时间充足的情况下，加班也要把不懂的问题搞懂弄通。</li><li>总是认为前人留下来的代码与我无关，这是我不负责任的表现。虽然不是自己写的代码，但是自己负责了这一块，应该将全部的代码都审视一边，哪怕是前人留下的BUG，也需要对此负责。这是我的不足的地方，也是我今后要担当的地方，不管是谁写的，只要是我负责的这一块，这块出问题了，那就是我的责任！</li><li>对业务知识的覆盖面还不够宽广。</li></ol><h2 id="二-明年目标"><a href="#二-明年目标" class="headerlink" title="二.明年目标"></a>二.明年目标</h2><ol><li>开发在快的基础上，求稳！</li><li>对不清楚的地方做上记号，求甚解！</li><li>对自己负责的模块，不留遗憾！</li><li>加强对业务知识的学习！</li><li>加强数据库的相关只是，争取考个oracle数据库相关的认证。</li><li>控制自己的情绪。</li></ol><h2 id="三-结尾"><a href="#三-结尾" class="headerlink" title="三.结尾"></a>三.结尾</h2><p>以上就是我对2018年的总结，请领导批评指正，希望我能不断的成长，改进和完善，提升自我。</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>oracle存储过程 关于update的动态SQL-工作心得</title>
    <link href="/2018/12/20/2018-12-20-oracle-procedures-dynamicsql-update/"/>
    <url>/2018/12/20/2018-12-20-oracle-procedures-dynamicsql-update/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>花了我一下午时间，外加晚上加班<br>终于把存储过程的主要功能给写出来了！！！<br>emmmmm，做个笔记<br>后面有时间就细细分析下，先把代码贴一下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">procedure</span> P_SYNC_TA_PRODUCT_TEST(v_res           <span class="hljs-keyword">OUT</span> NUMBER,<br>                                                       v_errorCode     <span class="hljs-keyword">OUT</span> NVARCHAR2,<br>                                                       v_errorMsg      <span class="hljs-keyword">OUT</span> NVARCHAR2,<br>                                                       d_dateStartDate <span class="hljs-keyword">IN</span> NVARCHAR2,<br>                                                       d_dateEndDate   <span class="hljs-keyword">IN</span> NVARCHAR2) <span class="hljs-keyword">IS</span><br>      <span class="hljs-comment">--查询是否存在已经同步的TA产品信息的个数</span><br>      v_count_updatePolling number(<span class="hljs-number">8</span>) :<span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-comment">--收益率ID自动生成序列</span><br>      v_yieldRateId NVARCHAR2(<span class="hljs-number">36</span>);<br>      <span class="hljs-comment">--受益级别表的产品代码</span><br>      v_productCode varchar2(<span class="hljs-number">36</span>);<br>      <span class="hljs-comment">--受益级别表的受益级别</span><br>      v_yieldLevelCode NVARCHAR2(<span class="hljs-number">10</span>);<br>      <span class="hljs-comment">--受益级别表的预期年化收益率</span><br>      v_yieldRate NVARCHAR2(<span class="hljs-number">20</span>);<br>      v_yieldRateStr NVARCHAR2(<span class="hljs-number">20</span>);<br>      <span class="hljs-comment">--受益级别表的投资区间（开始）</span><br>      v_investmentIntervalS NVARCHAR2(<span class="hljs-number">20</span>);<br>      v_investmentIntervalSStr NVARCHAR2(<span class="hljs-number">20</span>);<br>      <span class="hljs-comment">--受益级别表的投资区间（结束）</span><br>      v_investmentIntervalD NVARCHAR2(<span class="hljs-number">20</span>);<br>      v_investmentIntervalDStr NVARCHAR2(<span class="hljs-number">20</span>);<br>      <span class="hljs-comment">--受益级别表的投资期限</span><br>      v_dueTime NVARCHAR2(<span class="hljs-number">20</span>);<br>      <span class="hljs-comment">--受益级别表的投资期限单位</span><br>      v_dueTimeUnit NVARCHAR2(<span class="hljs-number">2</span>);<br>      <span class="hljs-comment">--受益级别表的年化计算天数</span><br>      v_annualDays NVARCHAR2(<span class="hljs-number">5</span>);<br>      <span class="hljs-comment">--拼接的SQL语句</span><br>      v_confirmSql varchar2(<span class="hljs-number">600</span>);<br>      v_confirmCommaSql varchar2(<span class="hljs-number">600</span>);<br>      v_updateYieldRateSql varchar2(<span class="hljs-number">700</span>);<br>      <br>      <span class="hljs-comment">--用于判断是否新增或更新</span><br>      <span class="hljs-comment">/*v_total_pro number(8) := 0;</span><br><span class="hljs-comment">      --游标tfundInfos的个数</span><br><span class="hljs-comment">      v_total number(8) := 0;</span><br><span class="hljs-comment">      --入池产品ID</span><br><span class="hljs-comment">      v_pollingProductId NVARCHAR2(36);</span><br><span class="hljs-comment">      --用于判断产品表是否存在该产品</span><br><span class="hljs-comment">      v_count_pollingProduct number(8) := 0;</span><br><span class="hljs-comment">      --用于判断是否存在已入池且当日改动的产品</span><br><span class="hljs-comment">      v_count_polling number(8) := 0;</span><br><span class="hljs-comment">      --用于判断TA是否存在受益级别信息</span><br><span class="hljs-comment">      v_count_productRateYiled number(8) := 0;*/</span><br>    <br>      <span class="hljs-comment">--1.定义游标：查询出产品名称、成立日、预计到期日其中和TA不一致的产品信息</span><br>      <span class="hljs-keyword">CURSOR</span> updateProductInfos <span class="hljs-keyword">IS</span><br>        <span class="hljs-keyword">select</span> t.c_fundcode <span class="hljs-keyword">as</span> fundCode, <span class="hljs-comment">--产品代码</span><br>               t.c_fundname <span class="hljs-keyword">as</span> fundName, <span class="hljs-comment">--产品名称（TA）</span><br>               to_char(t.d_setupdate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-keyword">as</span> setupDateStr, <span class="hljs-comment">--成立日（TA）</span><br>               to_char(t.d_contractenddate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-keyword">as</span> contractendDateStr <span class="hljs-comment">--预计到期日期（TA）</span><br>          <span class="hljs-keyword">from</span> tfundinfo<span class="hljs-variable">@HSTA</span> t<br>          <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> t_polling_product tpp<br>            <span class="hljs-keyword">on</span> tpp.c_product_code <span class="hljs-operator">=</span> t.c_fundcode<br>            <span class="hljs-keyword">and</span> tpp.delete_flag <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span><br>         <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>           <span class="hljs-keyword">and</span> to_char(t.d_lastmodifydate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-operator">&gt;=</span><br>               to_char(to_date(d_dateStartDate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>), <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>)<br>           <span class="hljs-keyword">and</span> to_char(t.d_lastmodifydate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-operator">&lt;=</span><br>               to_char(to_date(d_dateEndDate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>), <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>)<br>           <span class="hljs-keyword">and</span> t.c_fundstatus <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-string">&#x27;6&#x27;</span><br>           <span class="hljs-keyword">and</span> (t.c_fundname <span class="hljs-operator">&lt;&gt;</span> tpp.c_product_name<br>           <span class="hljs-keyword">or</span> to_char(t.d_setupdate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-operator">&lt;&gt;</span> to_char(tpp.c_found_date, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>)<br>           <span class="hljs-keyword">or</span> to_char(t.d_contractenddate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-operator">&lt;&gt;</span> to_char(tpp.c_end_date, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>));<br>           <span class="hljs-comment">--排除已经结束的产品，0-募集期，1-正常，6-已结束</span><br>    <br>      <span class="hljs-comment">--2.定义游标：核对受益级别数据后更新或新增家族信托产品受益级别</span><br>      <span class="hljs-keyword">CURSOR</span> margeProductYieldRates <span class="hljs-keyword">IS</span><br>        <span class="hljs-keyword">select</span> t.c_fundcode <span class="hljs-keyword">AS</span> fundCode, <span class="hljs-comment">--产品代码</span><br>               tp.c_profitclass <span class="hljs-keyword">AS</span> profitClass, <span class="hljs-comment">--收益级别</span><br>               tp.f_profit<span class="hljs-operator">*</span><span class="hljs-number">100</span> <span class="hljs-keyword">AS</span> profit, <span class="hljs-comment">--从TA获取的收益率需要乘以100</span><br>               tp.f_amountmin <span class="hljs-keyword">AS</span> amountMin, <span class="hljs-comment">--投资下限（含）</span><br>               tp.f_amountmax <span class="hljs-keyword">AS</span> amountMax, <span class="hljs-comment">--投资上限（不含）</span><br>               tp.c_durationtime <span class="hljs-keyword">AS</span> durationTime, <span class="hljs-comment">--投资期限</span><br>               <span class="hljs-keyword">case</span> tp.c_durationtimeunit<br>                 <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;Y&#x27;</span>  <span class="hljs-comment">--年</span><br>                 <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;M&#x27;</span>  <span class="hljs-comment">--月</span><br>                 <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;D&#x27;</span>  <span class="hljs-comment">--日</span><br>                 <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span><br>               <span class="hljs-keyword">end</span> <span class="hljs-keyword">as</span> durationTimeUnit, <span class="hljs-comment">--期限单位</span><br>               <span class="hljs-keyword">case</span> tp.c_bonusfrequency<br>                 <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;04&#x27;</span><br>                 <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;04&#x27;</span><br>                 <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;04&#x27;</span><br>                 <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;04&#x27;</span><br>                 <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;4&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;04&#x27;</span><br>                 <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;5&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;04&#x27;</span> <span class="hljs-comment">--特定周期</span><br>                 <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;6&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;02&#x27;</span> <span class="hljs-comment">--到期一次性清算</span><br>                 <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;7&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;03&#x27;</span> <span class="hljs-comment">--不定期</span><br>                 <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span><br>               <span class="hljs-keyword">end</span> <span class="hljs-keyword">as</span> bonusFrequencyType, <span class="hljs-comment">--分配频率类型</span><br>               <span class="hljs-keyword">case</span> tp.c_bonusfrequency<br>                 <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;M&#x27;</span> <span class="hljs-comment">--每月</span><br>                 <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;Q&#x27;</span> <span class="hljs-comment">--每季度</span><br>                 <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;4&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;H&#x27;</span> <span class="hljs-comment">--每半年</span><br>                 <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;5&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;Y&#x27;</span> <span class="hljs-comment">--每年</span><br>                 <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span><br>               <span class="hljs-keyword">end</span> <span class="hljs-keyword">as</span> bonusFrequency, <span class="hljs-comment">--分配频率_特定</span><br>               tp.l_incomeyeardays <span class="hljs-keyword">as</span> incomeYearDays, <span class="hljs-comment">--年化天数</span><br>               NVL(to_char(t.d_setupdate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>),<br>                   to_char(sysdate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>)) <span class="hljs-keyword">AS</span> yieldStartDateStr <span class="hljs-comment">--有效开始日期</span><br>          <span class="hljs-keyword">from</span> tfundinfo<span class="hljs-variable">@HSTA</span> t<br>          <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> ttrustfundprofit<span class="hljs-variable">@HSTA</span> tp<br>            <span class="hljs-keyword">on</span> tp.c_fundcode <span class="hljs-operator">=</span> t.c_fundcode<br>         <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>           <span class="hljs-keyword">and</span> to_char(t.d_lastmodifydate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-operator">&gt;=</span><br>               to_char(to_date(d_dateStartDate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>), <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>)<br>           <span class="hljs-keyword">and</span> to_char(t.d_lastmodifydate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-operator">&lt;=</span><br>               to_char(to_date(d_dateEndDate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>), <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>)<br>           <span class="hljs-keyword">and</span> t.c_fundstatus <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-string">&#x27;6&#x27;</span> <span class="hljs-keyword">and</span> t.c_fundcode <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;CA0FX6&#x27;</span>,<span class="hljs-string">&#x27;CA0FUC&#x27;</span>); <span class="hljs-comment">--排除已经结束的产品，0-募集期，1-正常，6-已结束</span><br>           <br>      <br>    <span class="hljs-keyword">begin</span><br>      <span class="hljs-comment">--================================================================================</span><br>      <span class="hljs-comment">-------------------------------【执行sql文】--------------------------------------</span><br>      <span class="hljs-comment">--================================================================================</span><br>      <span class="hljs-comment">--开启日志输出缓冲</span><br>      DBMS_OUTPUT.ENABLE(buffer_size <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">null</span>);<br>      DBMS_OUTPUT.put_line(<span class="hljs-string">&#x27;----------------start------------------&#x27;</span>);<br>    <br>      <br>      <span class="hljs-comment">--1.查询是否存在已经同步的TA产品信息</span><br>      <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<br>        <span class="hljs-keyword">into</span> v_count_updatePolling<br>        <span class="hljs-keyword">from</span> tfundinfo<span class="hljs-variable">@HSTA</span> t<br>        <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> t_polling_product tpp<br>          <span class="hljs-keyword">on</span> tpp.c_product_code <span class="hljs-operator">=</span> t.c_fundcode<br>       <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>         <span class="hljs-keyword">and</span> to_char(t.d_lastmodifydate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-operator">&gt;=</span><br>             to_char(to_date(d_dateStartDate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>), <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>)<br>         <span class="hljs-keyword">and</span> to_char(t.d_lastmodifydate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-operator">&lt;=</span><br>             to_char(to_date(d_dateEndDate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>), <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>)<br>         <span class="hljs-keyword">and</span> t.c_fundstatus <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-string">&#x27;6&#x27;</span>;     <span class="hljs-comment">--排除已经结束的产品，0-募集期，1-正常，6-已结束</span><br>    <br>      <span class="hljs-comment">--如果查询到存在</span><br>      if v_count_updatePolling <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>        <br>        <span class="hljs-comment">--1.1 调用游标：查询出产品名称、成立日、预计到期日其中和TA不一致的产品信息</span><br>        <span class="hljs-comment">/*for updateProductInfo in updateProductInfos loop</span><br><span class="hljs-comment">          --非空判断，如果查询到的数据存在，表示，存在家族信托和TA不一致的产品信息，进行更新处理</span><br><span class="hljs-comment">          if updateProductInfo.Fundcode is not null then</span><br><span class="hljs-comment">            --查询存在说明存在和TA不一致的产品基本信息，则更新和TA一致</span><br><span class="hljs-comment">            update t_polling_product t</span><br><span class="hljs-comment">               set t.c_product_name       = updateProductInfo.Fundname,</span><br><span class="hljs-comment">                   t.c_end_date           = to_date(updateProductInfo.Contractenddatestr, &#x27;yyyy-MM-dd&#x27;),</span><br><span class="hljs-comment">                   t.update_time          = sysdate,</span><br><span class="hljs-comment">                   t.c_found_date         = to_date(updateProductInfo.Setupdatestr, &#x27;yyyy-MM-dd&#x27;)</span><br><span class="hljs-comment">             where t.c_product_code = updateProductInfo.Fundcode;</span><br><span class="hljs-comment">          end if;</span><br><span class="hljs-comment">        end loop;*/</span><br>        <br>        <br>        <span class="hljs-comment">--1.2 调用游标：核对受益级别数据后更新或新增家族信托产品受益级别</span><br>        <span class="hljs-keyword">for</span> margeProductYieldRate <span class="hljs-keyword">IN</span> margeProductYieldRates loop<br>          if margeProductYieldRate.Fundcode <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * 1.2.1</span><br><span class="hljs-comment">             * 查询TA中的受益级别，家族信托是否存在</span><br><span class="hljs-comment">             * 若存在，则表示家族和TA都存在该受益级别，进行核对比较关键信息，发现不同则更新</span><br><span class="hljs-comment">             * 若不存在，表示家族这边缺少TA的受益级别，需要从TA进行同步该受益级别</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-keyword">select</span> tpy.c_product_code,<br>                   tpy.c_yield_level_code,<br>                   tpy.c_yield_rate,<br>                   tpy.c_investment_interval_s,<br>                   tpy.c_investment_interval_d,<br>                   tpy.c_due_time,<br>                   tpy.c_due_time_unit,<br>                   tpy.c_annual_days<br>              <span class="hljs-keyword">into</span> v_productCode, <span class="hljs-comment">--产品代码</span><br>                   v_yieldLevelCode, <span class="hljs-comment">--受益级别</span><br>                   v_yieldRate, <span class="hljs-comment">--预期收益率</span><br>                   v_investmentIntervalS, <span class="hljs-comment">--投资下限</span><br>                   v_investmentIntervalD, <span class="hljs-comment">--投资上限</span><br>                   v_dueTime, <span class="hljs-comment">--投资期限</span><br>                   v_dueTimeUnit, <span class="hljs-comment">--投资期限单位</span><br>                   v_annualDays <span class="hljs-comment">--年化天数</span><br>              <span class="hljs-keyword">from</span> t_product_yield_rate tpy<br>             <span class="hljs-keyword">where</span> tpy.c_yield_level_code <span class="hljs-operator">=</span> margeProductYieldRate.Profitclass<br>               <span class="hljs-keyword">and</span> tpy.c_product_code <span class="hljs-operator">=</span> margeProductYieldRate.Fundcode<br>               <span class="hljs-keyword">and</span> tpy.delete_flag <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span>;<br>            <br>            <span class="hljs-comment">--若存在，则表示家族和TA都存在该受益级别，进行核对比较关键信息，发现不同则更新</span><br>            IF v_productCode <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>              <span class="hljs-comment">/*</span><br><span class="hljs-comment">               * 将匹配的数据进行核对，发现关键字段不匹配的进行更新</span><br><span class="hljs-comment">               * 对受益级别的关键字段进行一一对比</span><br><span class="hljs-comment">               * 对比不一样的，进行拼接SQL</span><br><span class="hljs-comment">               */</span><br>              dbms_output.put_line(<span class="hljs-string">&#x27;开始拼接SQL，产品代码为：&#x27;</span> <span class="hljs-operator">||</span> margeProductYieldRate.Fundcode<span class="hljs-operator">||</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;受益级别为：&#x27;</span><span class="hljs-operator">||</span>margeProductYieldRate.Profitclass);<br>              <br>              <span class="hljs-comment">--oracle  数据库 字段值为小于1的小数时，使用varchar2类型处理，会丢失小数点前面的0</span><br>              v_yieldRateStr :<span class="hljs-operator">=</span> to_char(v_yieldRate, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>);<br>              v_investmentIntervalSStr :<span class="hljs-operator">=</span> to_char(v_investmentIntervalS, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>);<br>              v_investmentIntervalDStr :<span class="hljs-operator">=</span> to_char(v_investmentIntervalD, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>);<br>              <br>              dbms_output.put_line(<span class="hljs-string">&#x27;1.收益率，family:&#x27;</span> <span class="hljs-operator">||</span>v_yieldRateStr<span class="hljs-operator">||</span><span class="hljs-string">&#x27;;&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;TA:&#x27;</span><span class="hljs-operator">||</span>to_char(margeProductYieldRate.Profit, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>));<br>              <span class="hljs-comment">-- 比较年化收益率</span><br>              if v_yieldRateStr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> margeProductYieldRate.Profit <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                if v_yieldRateStr <span class="hljs-operator">&lt;&gt;</span> to_char(margeProductYieldRate.Profit, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>) <span class="hljs-keyword">then</span><br>                  v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_yield_rate=&#x27;</span><span class="hljs-operator">||</span>to_char(margeProductYieldRate.Profit, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>)<span class="hljs-operator">||</span><span class="hljs-string">&#x27;,&#x27;</span>;<br>                <span class="hljs-keyword">end</span> if;<br>              elsif v_yieldRateStr <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> to_char(margeProductYieldRate.Profit, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_yield_rate=&#x27;</span><span class="hljs-operator">||</span>to_char(margeProductYieldRate.Profit, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>)<span class="hljs-operator">||</span><span class="hljs-string">&#x27;,&#x27;</span>;<br>              elsif v_yieldRateStr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> to_char(margeProductYieldRate.Profit, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_yield_rate=null,&#x27;</span>;<br>              <span class="hljs-keyword">end</span> if;<br>              <span class="hljs-comment">--比较投资上限（含）</span><br>              dbms_output.put_line(<span class="hljs-string">&#x27;2.投资上限，family:&#x27;</span> <span class="hljs-operator">||</span> v_investmentIntervalSStr<span class="hljs-operator">||</span><span class="hljs-string">&#x27;;&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;TA:&#x27;</span><span class="hljs-operator">||</span>to_char(margeProductYieldRate.Amountmin, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>));<br>              if v_investmentIntervalSStr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> to_char(margeProductYieldRate.Amountmin, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                if v_investmentIntervalSStr <span class="hljs-operator">&lt;&gt;</span> to_char(margeProductYieldRate.Amountmin, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>) <span class="hljs-keyword">then</span><br>                  v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_investment_interval_s=&#x27;</span><span class="hljs-operator">||</span>to_char(margeProductYieldRate.Amountmin, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>)<span class="hljs-operator">||</span><span class="hljs-string">&#x27;,&#x27;</span>;<br>                <span class="hljs-keyword">end</span> if;<br>              elsif v_investmentIntervalSStr <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> to_char(margeProductYieldRate.Amountmin, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_investment_interval_s=&#x27;</span><span class="hljs-operator">||</span>to_char(margeProductYieldRate.Amountmin, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>)<span class="hljs-operator">||</span><span class="hljs-string">&#x27;,&#x27;</span>;<br>              elsif v_investmentIntervalSStr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> to_char(margeProductYieldRate.Amountmin, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_investment_interval_s=null,&#x27;</span>;<br>              <span class="hljs-keyword">end</span> if;<br>              <span class="hljs-comment">--比较投资下限（不含）          </span><br>              dbms_output.put_line(<span class="hljs-string">&#x27;2.投资下限，family:&#x27;</span> <span class="hljs-operator">||</span> v_investmentIntervalDStr<span class="hljs-operator">||</span><span class="hljs-string">&#x27;;&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;TA:&#x27;</span><span class="hljs-operator">||</span>to_char(margeProductYieldRate.Amountmax, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>));<br>              if v_investmentIntervalDStr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> to_char(margeProductYieldRate.Amountmax, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                if v_investmentIntervalDStr <span class="hljs-operator">&lt;&gt;</span> to_char(margeProductYieldRate.Amountmax, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>) <span class="hljs-keyword">then</span><br>                  v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_investment_interval_d=&#x27;</span><span class="hljs-operator">||</span>to_char(margeProductYieldRate.Amountmax, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>)<span class="hljs-operator">||</span><span class="hljs-string">&#x27;,&#x27;</span>;<br>                <span class="hljs-keyword">end</span> if;<br>              elsif v_investmentIntervalDStr <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> to_char(margeProductYieldRate.Amountmax, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_investment_interval_d=&#x27;</span><span class="hljs-operator">||</span>to_char(margeProductYieldRate.Amountmax, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>)<span class="hljs-operator">||</span><span class="hljs-string">&#x27;,&#x27;</span>;<br>              elsif v_investmentIntervalDStr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> to_char(margeProductYieldRate.Amountmax, <span class="hljs-string">&#x27;fm99999999990.00&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_investment_interval_d=null,&#x27;</span>;<br>              <span class="hljs-keyword">end</span> if;<br>              <span class="hljs-comment">--比较投资期限</span><br>              dbms_output.put_line(<span class="hljs-string">&#x27;3.投资期限，family:&#x27;</span> <span class="hljs-operator">||</span> v_dueTime<span class="hljs-operator">||</span><span class="hljs-string">&#x27;;&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;TA:&#x27;</span><span class="hljs-operator">||</span>margeProductYieldRate.Durationtime);<br>              if v_dueTime <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> margeProductYieldRate.Durationtime <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                if v_dueTime <span class="hljs-operator">&lt;&gt;</span> margeProductYieldRate.Durationtime <span class="hljs-keyword">then</span><br>                  v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_due_time=&#x27;</span><span class="hljs-operator">||</span>margeProductYieldRate.Durationtime<span class="hljs-operator">||</span><span class="hljs-string">&#x27;,&#x27;</span>;<br>                <span class="hljs-keyword">end</span> if;<br>              elsif v_dueTime <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> margeProductYieldRate.Durationtime <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_due_time=&#x27;</span><span class="hljs-operator">||</span>margeProductYieldRate.Durationtime<span class="hljs-operator">||</span><span class="hljs-string">&#x27;,&#x27;</span>;<br>              elsif v_dueTime <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> margeProductYieldRate.Durationtime <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_due_time=null,&#x27;</span>;<br>              <span class="hljs-keyword">end</span> if;<br>              <span class="hljs-comment">--比较投资期限单位</span><br>              dbms_output.put_line(<span class="hljs-string">&#x27;4.投资期限单位，family:&#x27;</span> <span class="hljs-operator">||</span> v_dueTimeUnit<span class="hljs-operator">||</span><span class="hljs-string">&#x27;;&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;TA:&#x27;</span><span class="hljs-operator">||</span>margeProductYieldRate.Durationtimeunit);<br>              if v_dueTimeUnit <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> margeProductYieldRate.Durationtimeunit <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                if v_dueTimeUnit <span class="hljs-operator">&lt;&gt;</span> margeProductYieldRate.Durationtimeunit <span class="hljs-keyword">then</span><br>                  v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_due_time_unit=&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-operator">||</span>margeProductYieldRate.Durationtimeunit<span class="hljs-operator">||</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;,&#x27;</span>;<br>                <span class="hljs-keyword">end</span> if;<br>              elsif v_dueTimeUnit <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> margeProductYieldRate.Durationtimeunit <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_due_time_unit=&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-operator">||</span>margeProductYieldRate.Durationtimeunit<span class="hljs-operator">||</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;,&#x27;</span>;<br>              elsif v_dueTimeUnit <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> margeProductYieldRate.Durationtimeunit <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_due_time_unit=null,&#x27;</span>;<br>              <span class="hljs-keyword">end</span> if;<br>              <span class="hljs-comment">--比较年化计算天数</span><br>              dbms_output.put_line(<span class="hljs-string">&#x27;5.年化计算天数，family:&#x27;</span> <span class="hljs-operator">||</span> v_annualDays<span class="hljs-operator">||</span><span class="hljs-string">&#x27;;&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;TA:&#x27;</span><span class="hljs-operator">||</span>margeProductYieldRate.Incomeyeardays);<br>              if v_annualDays <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> margeProductYieldRate.Incomeyeardays <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                if v_annualDays <span class="hljs-operator">&lt;&gt;</span> margeProductYieldRate.Incomeyeardays <span class="hljs-keyword">then</span><br>                  v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_annual_days&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-operator">||</span>margeProductYieldRate.Incomeyeardays<span class="hljs-operator">||</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;,&#x27;</span>;<br>                <span class="hljs-keyword">end</span> if;<br>              elsif v_annualDays <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> margeProductYieldRate.Incomeyeardays <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_annual_days=&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-operator">||</span>margeProductYieldRate.Incomeyeardays<span class="hljs-operator">||</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;,&#x27;</span>;<br>              elsif v_annualDays <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> margeProductYieldRate.Incomeyeardays <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                v_confirmSql :<span class="hljs-operator">=</span> v_confirmSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27;t.c_annual_days=null,&#x27;</span>;<br>              <span class="hljs-keyword">end</span> if;<br>              <br>              <span class="hljs-comment">--判断存在不一致的受益级别字段</span><br>              if v_confirmSql <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>                <span class="hljs-comment">--将得到的拼接字符串，去掉最后的一个句号&#x27;,&#x27;</span><br>                <span class="hljs-keyword">select</span> substr(v_confirmSql,<span class="hljs-number">1</span>,length(v_confirmSql)<span class="hljs-number">-1</span>) <span class="hljs-keyword">into</span> v_confirmCommaSql <span class="hljs-keyword">from</span> dual;<br>                v_updateYieldRateSql :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;update t_product_yield_rate t set &#x27;</span><span class="hljs-operator">||</span>v_confirmCommaSql<span class="hljs-operator">||</span><span class="hljs-string">&#x27; where t.c_product_code=:1 and t.c_yield_level_code=:2&#x27;</span>;<br>                dbms_output.put_line(<span class="hljs-string">&#x27;拼接的SQL为：&#x27;</span> <span class="hljs-operator">||</span> v_updateYieldRateSql);<br>                <br>                <span class="hljs-comment">--执行更新SQL</span><br>                <span class="hljs-keyword">execute</span> immediate v_updateYieldRateSql <span class="hljs-keyword">USING</span> margeProductYieldRate.Fundcode, margeProductYieldRate.Profitclass;<br>                <br>                <span class="hljs-comment">--本条记录处理完成，将v_confirmSql、v_confirmSqlCount清空准备下条处理</span><br>                v_confirmSql :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>                v_confirmCommaSql :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>                v_updateYieldRateSql :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>              <span class="hljs-keyword">end</span> if;<br>              <br>              <span class="hljs-comment">--若不存在，表示家族这边缺少TA的受益级别，需要从TA进行同步该受益级别</span><br>            <span class="hljs-keyword">else</span><br>              <span class="hljs-comment">--生成收益率ID主键的序列号</span><br>              <span class="hljs-keyword">select</span> concat(to_char(sysdate, <span class="hljs-string">&#x27;yyyyMMddHHmmss&#x27;</span>),<br>                            trunc(dbms_random.value(<span class="hljs-number">100000</span>, <span class="hljs-number">999999</span>)))<br>                <span class="hljs-keyword">into</span> v_yieldRateId<br>                <span class="hljs-keyword">from</span> dual;<br>              dbms_output.put_line(<span class="hljs-string">&#x27;存在新增的受益级别，产品代码为：&#x27;</span><span class="hljs-operator">||</span>margeProductYieldRate.Fundcode<span class="hljs-operator">||</span><span class="hljs-string">&#x27;,受益级别为：&#x27;</span><span class="hljs-operator">||</span>margeProductYieldRate.Profitclass);<br>              <span class="hljs-comment">--将该受益级别同步到家族信托中</span><br>              <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> T_PRODUCT_YIELD_RATE<br>              (T_PRODUCT_YIELD_RATE.C_YIELD_RATE_ID,<br>               T_PRODUCT_YIELD_RATE.C_PRODUCT_CODE,<br>               T_PRODUCT_YIELD_RATE.C_PRODUCT_MANAGER_CODE,<br>               T_PRODUCT_YIELD_RATE.C_INVESTMENT_INTERVAL_S,<br>               T_PRODUCT_YIELD_RATE.C_INVESTMENT_INTERVAL_D,<br>               T_PRODUCT_YIELD_RATE.C_YIELD_RATE,<br>               T_PRODUCT_YIELD_RATE.DELETE_FLAG,<br>               T_PRODUCT_YIELD_RATE.CREATE_USER_ID,<br>               T_PRODUCT_YIELD_RATE.CREATE_TIME,<br>               T_PRODUCT_YIELD_RATE.UPDATE_USER_ID,<br>               T_PRODUCT_YIELD_RATE.UPDATE_TIME,<br>               T_PRODUCT_YIELD_RATE.C_YIELD_START_DATE,<br>               T_PRODUCT_YIELD_RATE.C_YIELD_END_DATE,<br>               T_PRODUCT_YIELD_RATE.C_CHANGE_REASON,<br>               T_PRODUCT_YIELD_RATE.C_YIELD_LEVEL_CODE,<br>               T_PRODUCT_YIELD_RATE.C_ALLOCATION_TYPE,<br>               T_PRODUCT_YIELD_RATE.C_ALLOCATION_TYPE_SP,<br>               T_PRODUCT_YIELD_RATE.C_ALLOCATION_TYPE_MD,<br>               T_PRODUCT_YIELD_RATE.C_ANNUAL_DAYS,<br>               T_PRODUCT_YIELD_RATE.C_DUE_TIME,<br>               T_PRODUCT_YIELD_RATE.C_DUE_TIME_UNIT)<br>            <span class="hljs-keyword">values</span><br>              (v_yieldRateId,<br>               margeProductYieldRate.Fundcode,<br>               <span class="hljs-string">&#x27;0&#x27;</span>,<br>               margeProductYieldRate.Amountmin,<br>               margeProductYieldRate.Amountmax,<br>               margeProductYieldRate.Profit,<br>               <span class="hljs-string">&#x27;0&#x27;</span>,<br>               <span class="hljs-string">&#x27;00000000000000000000&#x27;</span>,<br>               sysdate,<br>               <span class="hljs-string">&#x27;00000000000000000000&#x27;</span>,<br>               sysdate,<br>               to_date(margeProductYieldRate.Yieldstartdatestr, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>),<br>               to_date(<span class="hljs-string">&#x27;9999-12-31&#x27;</span>, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>),<br>               <span class="hljs-string">&#x27;&#x27;</span>,<br>               margeProductYieldRate.Profitclass,<br>               margeProductYieldRate.Bonusfrequencytype,<br>               margeProductYieldRate.Bonusfrequency,<br>               <span class="hljs-string">&#x27;&#x27;</span>,<br>               margeProductYieldRate.Incomeyeardays,<br>               margeProductYieldRate.Durationtime,<br>               margeProductYieldRate.Durationtimeunit);<br>            <span class="hljs-keyword">end</span> if;<br>          <span class="hljs-keyword">end</span> if;<br>        <span class="hljs-keyword">end</span> loop;<br>      <span class="hljs-keyword">end</span> if;<br>    <br>      <br>      <span class="hljs-comment">--输出放回状态信息</span><br>      v_res       :<span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      v_errorCode :<span class="hljs-operator">=</span> SQLCODE;<br>      v_errorMsg  :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;P_SYNC_TA_PRODUCT_TEST&#x27;</span> <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-operator">||</span> TO_CHAR(SQLERRM);<br>      DBMS_OUTPUT.put_line(<span class="hljs-string">&#x27;----------------end------------------&#x27;</span>);<br>      <span class="hljs-comment">--提交</span><br>      <span class="hljs-keyword">COMMIT</span>;<br>      <span class="hljs-comment">--异常处理</span><br>    EXCEPTION<br>      <span class="hljs-keyword">WHEN</span> OTHERS <span class="hljs-keyword">THEN</span><br>        DBMS_OUTPUT.put_line(<span class="hljs-string">&#x27;----------------error------------------&#x27;</span>);<br>        <span class="hljs-comment">--事务回滚</span><br>        <span class="hljs-keyword">ROLLBACK</span>;<br>        v_res       :<span class="hljs-operator">=</span> <span class="hljs-number">-1</span>;<br>        v_errorCode :<span class="hljs-operator">=</span> SQLCODE;<br>        v_errorMsg  :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;P_SYNC_TA_PRODUCT_TEST&#x27;</span> <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-operator">||</span> TO_CHAR(SQLERRM);<br>    <span class="hljs-keyword">end</span> P_SYNC_TA_PRODUCT_TEST;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谁不是为了一日三餐奔波劳碌啊</title>
    <link href="/2018/12/14/2018-12-14-live/"/>
    <url>/2018/12/14/2018-12-14-live/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3470640999.jpg" alt="3470640999.jpg"><br>维护世界和平<br>守护祖国大好河山<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/70101975.jpg" alt="后来才发现"><br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1620755135.jpg" alt="这TM是超人蝙蝠侠干的事"><br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2444817722.jpg" alt="咱们呀没戏"><br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3301920858.jpg" alt="谁不为一日三餐奔波劳累呢"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>没想到我的知乎提问竟然上了知乎热搜第二</title>
    <link href="/2018/12/07/2018-12-07-zhihu-hot2/"/>
    <url>/2018/12/07/2018-12-07-zhihu-hot2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我就随便一问，没想到就上热搜了</p><p>虽然不是什么好问题。。。纯属闲得蛋疼</p><p>如果有人看得不爽的话，emmmm，不好意思啊</p><p>Σ(っ °Д °;)っ ::aru:distressed:: </p><p>喜欢看新闻，当吃瓜群众，真的令人蛋疼</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/4165312654.png" alt="知乎热搜第二.png"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>junit测试类防止事务回滚-工作心得</title>
    <link href="/2018/12/06/2018-12-06-junit-test-rollback/"/>
    <url>/2018/12/06/2018-12-06-junit-test-rollback/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在编写测试类时，调用service层，存在数据库操作</p><p>需要实现数据库的新增或者修改。</p><p>不添加关键注解的话，会出现下列的日志报告</p><p>可以看到关键日志部分：Rolled back transaction for test</p><p>出现了回滚操作</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2931689383.png" alt="微信截图_20181206094409.png"></p><p>这时如果需要在测试类中修改数据，就要添加注解，防止自动回滚</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Rollback(false)</span><br></code></pre></td></tr></table></figure><p>添加位置为类名上方</p><p>添加了返回自动回滚注解之后，看下打印的日志</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3909371742.png" alt="微信截图_20181206094745.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Committed transaction <span class="hljs-keyword">for</span> test<br></code></pre></td></tr></table></figure><p>说明我们的sql已经commit了。实现数据库的变更。</p><p>哦啦~</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1587088613.gif" alt="QQ图片20181206083603.gif"></p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>oracle的多表合并查询-工作心得</title>
    <link href="/2018/11/29/2018-11-29-oracle-select-all/"/>
    <url>/2018/11/29/2018-11-29-oracle-select-all/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="刚刚开发需求写了个SQL，记个笔记，学习下关于数据库的多表合并查询的用法"><a href="#刚刚开发需求写了个SQL，记个笔记，学习下关于数据库的多表合并查询的用法" class="headerlink" title="刚刚开发需求写了个SQL，记个笔记，学习下关于数据库的多表合并查询的用法"></a>刚刚开发需求写了个SQL，记个笔记，学习下关于数据库的多表合并查询的用法</h2><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> t.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A t <br>  <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><span class="hljs-operator">/</span><span class="hljs-keyword">UNION</span><span class="hljs-operator">/</span><span class="hljs-keyword">Intersect</span><span class="hljs-operator">/</span>MINUS<br><span class="hljs-keyword">select</span> s.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> B s;<br></code></pre></td></tr></table></figure><p>##UNION ALL</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/4230521173.png" alt="772156-20170328165135826-1065021997.png"></p><p>使用<strong>UNION ALL</strong>，表示取A、B的合集,不过滤重复的数据行</p><p>##UNION</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2605756222.png" alt="772156-20170328170010639-1715535324.png"></p><p>使用<strong>UNION</strong>，会将结果集A和结果集B进行UNION ALL运算,然后取两者交集的余集作为结果集</p><p>##Intersect<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/718117220.png" alt="772156-20170328170456248-1010642438.png"></p><p>使用Intersect,会将结果集A和结果集B进行UNION ALL运算,<strong>然后两者之间的集交集作为结果集和UNION刚好相反</strong></p><p>##MINUS<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1648560351.png" alt="772156-20170328171317045-1304191687.png"></p><p>使用MINUS,取结果集A减去结果集B留下的差集,注:如果结果集A小于等于结果集B,返回空结果集.</p><hr><p>好啦，下面进入实战阶段，我就直接将我写的SQL贴出来吧</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.<span class="hljs-operator">*</span><br>  <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> t.c_fund_account_name <span class="hljs-keyword">as</span> &quot;fundAccountNo&quot;, <span class="hljs-comment">--基金账号</span><br>               tfp.project_code <span class="hljs-keyword">as</span> &quot;projectCode&quot;, <span class="hljs-comment">--项目编号</span><br>               tfp.project_name <span class="hljs-keyword">as</span> &quot;projectName&quot;, <span class="hljs-comment">--项目名称</span><br>               tfp.project_shortname <span class="hljs-keyword">as</span> &quot;projectShortName&quot;, <span class="hljs-comment">--项目简称</span><br>               c.c_fund_name <span class="hljs-keyword">as</span> &quot;fundName&quot;, <span class="hljs-comment">--基金产品名称</span><br>               c.c_fund_code <span class="hljs-keyword">as</span> &quot;fundCode&quot;, <span class="hljs-comment">--基金产品代码</span><br>               nvl(thold.subsistAssetsShare, <span class="hljs-number">0</span>) <span class="hljs-keyword">as</span> &quot;subsisAssetsShare&quot;, <span class="hljs-comment">--份额（家族）</span><br>               to_char(thold.updateDate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-keyword">as</span> &quot;updateDate&quot;, <span class="hljs-comment">--日期</span><br>               nvl(c.c_current_share, <span class="hljs-number">0</span>) <span class="hljs-keyword">as</span> &quot;currentShare&quot;, <span class="hljs-comment">--份额（基金网站）</span><br>               to_char(c.d_date, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-keyword">as</span> &quot;dateDate&quot;, <span class="hljs-comment">--日期</span><br>               (nvl(thold.subsistAssetsShare, <span class="hljs-number">0</span>) <span class="hljs-operator">-</span> nvl(c.c_current_share, <span class="hljs-number">0</span>)) <span class="hljs-keyword">as</span> &quot;diffValue&quot;, <span class="hljs-comment">--差值</span><br>               <span class="hljs-built_in">CAST</span>((<span class="hljs-keyword">CASE</span><br>                      <span class="hljs-keyword">WHEN</span> (nvl(thold.subsistAssetsShare, <span class="hljs-number">0</span>) <span class="hljs-operator">-</span><br>                           nvl(c.c_current_share, <span class="hljs-number">0</span>)) <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span><br>                       <span class="hljs-string">&#x27;1&#x27;</span><br>                      <span class="hljs-keyword">WHEN</span> (nvl(thold.subsistAssetsShare, <span class="hljs-number">0</span>) <span class="hljs-operator">-</span><br>                           nvl(c.c_current_share, <span class="hljs-number">0</span>)) <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span><br>                       <span class="hljs-string">&#x27;0&#x27;</span><br>                    <span class="hljs-keyword">END</span>) <span class="hljs-keyword">as</span> nvarchar2(<span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> &quot;identical&quot; <span class="hljs-comment">--是否一致</span><br>          <span class="hljs-keyword">from</span> t_fund_account t<br>         <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> fhs.<span class="hljs-operator">*</span>,<br>                           <span class="hljs-built_in">row_number</span>() <span class="hljs-keyword">over</span>(<span class="hljs-keyword">partition</span> <span class="hljs-keyword">by</span> fhs.c_fund_account_no, fhs.c_project_code <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> fhs.d_date <span class="hljs-keyword">desc</span>) rn<br>                      <span class="hljs-keyword">from</span> td_fund_holding_share fhs) c<br>            <span class="hljs-keyword">on</span> t.c_fund_account_name <span class="hljs-operator">=</span> c.c_fund_account_no<br>           <span class="hljs-keyword">and</span> t.c_project_code <span class="hljs-operator">=</span> c.c_project_code<br>          <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> (<span class="hljs-keyword">SELECT</span> tha.project_code <span class="hljs-keyword">as</span> projectCode,<br>                           <span class="hljs-built_in">sum</span>(tha.current_share) <span class="hljs-keyword">as</span> subsistAssetsShare, <span class="hljs-comment">-- 持有份额</span><br>                           <span class="hljs-built_in">sum</span>(tha.current_cost) <span class="hljs-keyword">as</span> currentCost, <span class="hljs-comment">--当前成本</span><br>                           <span class="hljs-built_in">sum</span>(tha.accumulated_profit) <span class="hljs-keyword">as</span> accumulatedProfit, <span class="hljs-comment">--累积利润</span><br>                           <span class="hljs-built_in">max</span>(tha.update_time) <span class="hljs-keyword">as</span> updateDate<br>                      <span class="hljs-keyword">FROM</span> t_hold_assets tha<br>                      <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t_polling_product p<br>                        <span class="hljs-keyword">on</span> tha.c_product_code <span class="hljs-operator">=</span> p.c_product_code<br>                     <span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>                       <span class="hljs-keyword">and</span> tha.delete_flag <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span><br>                       <span class="hljs-keyword">and</span> p.c_stock_type_level1 <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span><br>                       <span class="hljs-keyword">and</span> p.c_stock_type_level2 <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;01&#x27;</span><br>                     <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> tha.project_code) thold<br>            <span class="hljs-keyword">on</span> thold.projectCode <span class="hljs-operator">=</span> t.c_project_code<br>          <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t_family_project tfp<br>            <span class="hljs-keyword">on</span> tfp.project_code <span class="hljs-operator">=</span> t.c_project_code<br>           <span class="hljs-keyword">and</span> tfp.delete_flag <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span><br>         <span class="hljs-keyword">where</span> rn <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>           <span class="hljs-keyword">AND</span> t.c_fund_account_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-comment">--基金账户</span><br>           <span class="hljs-keyword">AND</span> t.delete_flag <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span><br>        <br>        <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br>        <br>        <span class="hljs-keyword">select</span> t.c_fund_account_name <span class="hljs-keyword">as</span> &quot;fundAccountNo&quot;, <span class="hljs-comment">--基金账号</span><br>               tfp.project_code <span class="hljs-keyword">as</span> &quot;projectCode&quot;, <span class="hljs-comment">--项目编号</span><br>               tfp.project_name <span class="hljs-keyword">as</span> &quot;projectName&quot;, <span class="hljs-comment">--项目名称</span><br>               tfp.project_shortname <span class="hljs-keyword">as</span> &quot;projectShortName&quot;, <span class="hljs-comment">--项目简称</span><br>               <span class="hljs-built_in">CAST</span>(<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">as</span> nvarchar2(<span class="hljs-number">50</span>)) <span class="hljs-keyword">as</span> &quot;fundName&quot;, <span class="hljs-comment">--基金产品名称</span><br>               <span class="hljs-built_in">CAST</span>(<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">as</span> nvarchar2(<span class="hljs-number">50</span>)) <span class="hljs-keyword">as</span> &quot;fundCode&quot;, <span class="hljs-comment">--基金产品代码</span><br>               nvl(thold.subsistAssetsShare, <span class="hljs-number">0</span>) <span class="hljs-keyword">as</span> &quot;subsisAssetsShare&quot;, <span class="hljs-comment">--份额（家族）</span><br>               to_char(thold.updateDate, <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-keyword">as</span> &quot;updateDate&quot;, <span class="hljs-comment">--日期</span><br>               to_number(nvl(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">0</span>)) <span class="hljs-keyword">as</span> &quot;currentShare&quot;, <span class="hljs-comment">--份额（基金网站）</span><br>               to_char(<span class="hljs-built_in">CAST</span>(<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">as</span> nvarchar2(<span class="hljs-number">50</span>)), <span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-keyword">as</span> &quot;dateDate&quot;, <span class="hljs-comment">--日期</span><br>               nvl(thold.subsistAssetsShare, <span class="hljs-number">0</span>) <span class="hljs-operator">-</span> nvl(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">0</span>) <span class="hljs-keyword">as</span> &quot;diffValue&quot;, <span class="hljs-comment">--差值</span><br>               <span class="hljs-built_in">CAST</span>((<span class="hljs-keyword">CASE</span><br>                      <span class="hljs-keyword">WHEN</span> (nvl(thold.subsistAssetsShare, <span class="hljs-number">0</span>) <span class="hljs-operator">-</span> nvl(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">0</span>)) <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span><br>                       <span class="hljs-string">&#x27;1&#x27;</span><br>                      <span class="hljs-keyword">WHEN</span> (nvl(thold.subsistAssetsShare, <span class="hljs-number">0</span>) <span class="hljs-operator">-</span> nvl(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">0</span>)) <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span><br>                       <span class="hljs-string">&#x27;0&#x27;</span><br>                    <span class="hljs-keyword">END</span>) <span class="hljs-keyword">as</span> nvarchar2(<span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> &quot;identical&quot; <span class="hljs-comment">--是否一致</span><br>          <span class="hljs-keyword">from</span> t_fund_account t<br>          <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> (<span class="hljs-keyword">SELECT</span> tha.project_code <span class="hljs-keyword">as</span> projectCode,<br>                           <span class="hljs-built_in">sum</span>(tha.current_share) <span class="hljs-keyword">as</span> subsistAssetsShare, <span class="hljs-comment">-- 持有份额</span><br>                           <span class="hljs-built_in">max</span>(tha.update_time) <span class="hljs-keyword">as</span> updateDate<br>                      <span class="hljs-keyword">FROM</span> t_hold_assets tha<br>                      <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t_polling_product p<br>                        <span class="hljs-keyword">on</span> tha.c_product_code <span class="hljs-operator">=</span> p.c_product_code<br>                     <span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>                       <span class="hljs-keyword">and</span> tha.delete_flag <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span><br>                       <span class="hljs-keyword">and</span> p.c_stock_type_level1 <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span><br>                       <span class="hljs-keyword">and</span> p.c_stock_type_level2 <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;01&#x27;</span><br>                     <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> tha.project_code) thold<br>            <span class="hljs-keyword">on</span> thold.projectCode <span class="hljs-operator">=</span> t.c_project_code<br>          <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t_family_project tfp<br>            <span class="hljs-keyword">on</span> t.c_project_code <span class="hljs-operator">=</span> tfp.project_code<br>           <span class="hljs-keyword">and</span> tfp.delete_flag <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span><br>         <span class="hljs-keyword">where</span> t.c_fund_account_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span><br>               (<span class="hljs-keyword">select</span> td.c_fund_account_no <span class="hljs-keyword">from</span> td_fund_holding_share td)<br>           <span class="hljs-keyword">and</span> t.c_fund_account_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span><br>           <span class="hljs-keyword">and</span> t.delete_flag <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span>) a<br> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> a.&quot;diffValue&quot; <span class="hljs-keyword">desc</span>, a.&quot;projectCode&quot; <span class="hljs-keyword">desc</span><br></code></pre></td></tr></table></figure><blockquote><p>上面sql具体意思是：查询出基金信息，A和基金对比先查询其中有的数据，再union all A有基金没有的数据，一起取个并集。OK，需求完成<br>哈哈哈哈，其实只要你SQL写得牛逼，然后了解下业务流程，什么都好说哈哈哈</p></blockquote><blockquote><p>哦对了，最后啰嗦一句。 对于这些并集计算之后，需要排序 则语法为：<br>select t.* from (语句1 union all 语句2)<br>t order by t.id;</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/593399938.jpg" alt="44aba224bc315c60b71173b480b1cb13485477bf.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>翻译翻译，什么叫他妈的惊喜？</title>
    <link href="/2018/11/09/2018-11-09-what-is-a-surprise/"/>
    <url>/2018/11/09/2018-11-09-what-is-a-surprise/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>黄四郎：三天之后，一定给县长一个惊喜 </p><p>张麻子：汤师爷，他是胡万的恩人，现在又成了你的恩人。你给翻译翻译，什么叫惊喜？翻译翻译，什么叫惊喜？</p><p>汤师爷：这还用翻译，都说了。</p><p>张麻子：我让你翻译给我听，什么叫惊喜？</p><p>汤师爷：不用翻译，这就是惊喜啊。</p><p>黄四郎：难道你听不懂什么叫惊喜？</p><p>张麻子：我就想让你翻译翻译，什么叫惊喜！</p><p>汤师爷：惊喜嘛</p><p>张麻子：翻译出来给我听，什么他妈的叫惊喜！什么他妈的叫他妈的惊喜！</p><p>汤师爷：什么他妈的叫惊喜啊？</p><p>黄四郎：惊喜就是三天之后，我出一百八十万给你们出城剿匪，接上我的腿！明白了吗？</p><p>汤师爷：这就是惊喜啊</p><p>张麻子：翻译翻译 翻译翻译！</p><p>汤师爷：惊喜就是三天之后，给你一百八十万两银子出城剿匪，接上他的腿！</p><p>张麻子：哈，大哥这他妈的惊喜啊，小弟我愿意等你三天</p><p>黄四郎：好</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重庆公交车坠江事件</title>
    <link href="/2018/11/02/2018-11-02-gjiao/"/>
    <url>/2018/11/02/2018-11-02-gjiao/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>看完视频<br>心里都是颤抖的，一车人！都没了！！！</p><p>看到有乘客攻击司机，如果你以为事不关己可以坐在那儿看热闹，下一秒有可能你们这些看热闹的都会没命！所以，为了您的生命安全，该出手时必须出手！</p><p><strong>愿逝者安息！</strong></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我以为今天是周一</title>
    <link href="/2018/10/27/2018-10-27-monday/"/>
    <url>/2018/10/27/2018-10-27-monday/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>早上起来，看了眼手机时间快8点了，我惊了，完了完了，要迟到了。</p><p> ::twemoji:frightened:: </p><p>头有点晕晕乎乎还没有醒过来。</p><p>等我回过神来，看了眼星期，发现是星期六，瞬间一种幸福感油然而生。</p><p>发现今天是星期六，真滴是非常幸福的感觉，不用起早床，不用去上班，转过头来继续呼呼大睡</p><p>很知足，很幸福</p><p>哦对了，昨晚喝醉酒了。。 ::aru:shy:: </p><p>20年份的西凤酒，招架不住，太猛了这酒</p><p> ::aru:dead:: </p><p>下次不能这么喝了</p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/69593166.jpg" width="550" align=center />]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加班听些歌《山楂树の恋》</title>
    <link href="/2018/10/24/2018-10-24-music-04/"/>
    <url>/2018/10/24/2018-10-24-music-04/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>过的自由自在 美丽置身事外</p><p>陪你走路回家在每个all day all night</p><p>也不能深陷情海 为了你的那一半</p><p>用太多的精力 因为上天他自有 安 排</p><p>山楂树下站的我和你</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1024，祝大家节日快乐哇！</title>
    <link href="/2018/10/24/2018-10-24-happy1024/"/>
    <url>/2018/10/24/2018-10-24-happy1024/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>艾瑞巴蒂，祝大家1024节日快乐！</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/792015157.jpg" alt="1024"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储过程编译出现锁死情况的解决方法</title>
    <link href="/2018/10/23/2018-10-23-procedures-locks/"/>
    <url>/2018/10/23/2018-10-23-procedures-locks/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>先科普一下存储过程，在项目开发过程可能会遇到。</p><blockquote><p>存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，存储在数据库中，经过第一次编译后再次调用不需要再次编译，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。 存储过程是数据库中的一个重要对象。</p></blockquote><hr><p>今天开发过程中，遇到之前写好的存储过程重新进行编译出现<strong>锁死</strong>的情况，于是我瞬间不淡定了。明明之前都已经写好了呀！</p><p>在数据库开发的过程中，经常碰到包、存储过程、函数无法编译或编译时导致PL/SQL无法响应的问题。碰到这种问题，基本上都要重启数据库解决，严重浪费开发时间。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>从事数据库开发的都知道锁的概念，如：执行 Update Table xxx Where xxx 的时候就会产生锁。这种常见的锁在Oracle里面被称为DML锁。在Oracle中还有一种DDL锁，主要用来保证存储过程、表结构、视图、包等数据库对象的完整性，这种锁的信息可以在DBA_DDL_LOCKS中查到。注意：V$LOCKED_OBJECT记录的是DML锁信息，DDL锁的信息不在里面。</p><p>对应DDL锁的是DDL语句，DDL语句全称数据定义语句（Data Define Language）。用于定义数据的结构或Schema，如：CREATE、ALTER、DROP、TRUNCATE、COMMENT、RENAME。当我们在执行某个存储过程、或者编译它的时候Oracle会自动给这个对象加上DDL锁，同时也会对这个存储过程所引用的对象加锁。<br>了解了以上知识以后，我们可以得出结论：编译包长时间无响应说明产生了死锁。我们可以轻易的让这种死锁发生，举例：</p><pre><code>打开一个PL/SQL，开始调试某个函数（假设为：FUN_CORE_SERVICECALL），并保持在调试状态打开一个SQL Window，输入Select *From dba_ddl_locks aWhere a.name =&#39;FUN_CORE_SERVICECALL&#39;会发现一行记录：打开一个新的PL/SQL，重新编译这个函数。我们会发现此时已经无法响应了回到第一个PL/SQL ,重新执行Select *From dba_ddl_locks aWhere a.name =&#39;FUN_CORE_SERVICECALL&#39;我们将会看到如下记录：</code></pre><p>上述的情况表明发生了锁等待的情况。</p><p>在Oracle中DDL锁分为：Exclusive DDL Locks（排他的DDL）、Share DDL Locks（共享DDL锁）、Breakable Parse Locks（可被打破的解析锁）几类。篇幅所限，这里就不再详细介绍了。根据这个例子推理一下，当我们试图编译、修改存储过程、函数、包等对数据对象的时候，如果别人也正在编译或修改他们时就会产生锁等待；或者我们在编译某个存储过程的时候，如果它所引用的数据库对象正在被修改应该也会产生锁等待。这种假设有兴趣的兄弟可以测试下，不过比较困难。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>碰到这种问题，如果知道是被谁锁定了（可以查出来的），可以让对方尽快把锁释放掉；实在查不出来只能手工将这个锁杀掉了。</p><p><strong>死锁是数据库经常发生的问题，数据库一般不会无缘无故产生死锁，死锁通常都是由于我们应用程序的设计本身造成的。</strong></p><p>产生死锁时，如何解决呢，下面是常规的解决办法（区分是否知道谁被锁定）：</p><ul><li>知道死锁对象</li><li>不知道死锁对象</li></ul><h3 id="知道死锁对象"><a href="#知道死锁对象" class="headerlink" title="知道死锁对象"></a>知道死锁对象</h3><p>比如我所遇到的问题，P_REVEAL_REPORT_CLEAR_TIP编译响应失败。</p><ul><li>查询V$DB_OBJECT_CACHE</li></ul><pre><code>SELECT * FROM V$DB_OBJECT_CACHE WHERE name=&#39;P_REVEAL_REPORT_CLEAR_TIP&#39; AND LOCKS!=&#39;0&#39;;</code></pre><p><em>注意：P_REVEAL_REPORT_CLEAR_TIP为存储过程的名称。发现locks＝6，说明有6个死锁sid</em></p><ul><li>按对象查出sid的值</li></ul><pre><code>select /*+ rule*/  SID from V$ACCESS WHERE object=&#39;P_REVEAL_REPORT_CLEAR_TIP&#39;;</code></pre><p><em>注意：CRM_LASTCHGINFO_DAY为存储过程的名称。查询出对应6个的sid</em></p><ul><li>查sid,serial#</li></ul><pre><code>SELECT SID,SERIAL#,PADDR FROM V$SESSION WHERE SID=&#39;刚才查到的SID&#39;;</code></pre><ul><li>清除session</li></ul><pre><code>alter system kill session &#39;sid值,serial#值&#39; immediate;</code></pre><h3 id="不知道死锁对象"><a href="#不知道死锁对象" class="headerlink" title="不知道死锁对象"></a>不知道死锁对象</h3><ul><li> 执行下面SQL，先查看哪些表被锁住了</li></ul><pre><code>select b.owner,b.object_name,a.session_id,a.locked_mode from v$locked_object a,dba_objects b where b.object_id = a.object_id;</code></pre><ul><li>查处引起死锁的会话</li></ul><pre><code>select b.username,b.sid,b.serial#,logon_time from v$locked_object a,v$session b where a.session_id = b.sid order by b.logon_time;</code></pre><p><em>这里会列出SID</em></p><ul><li>查出SID和SERIAL#</li></ul><pre><code>SELECT SID,SERIAL#,PADDR FROM V$SESSION WHERE SID=&#39;刚才查到的SID&#39;;</code></pre><p><em>查V$SESSION视图，这一步将得到PADDR</em></p><p>再次执行存储过程，错误没有了。语句执行成功！</p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储过程关于LOOP循环问题</title>
    <link href="/2018/10/17/2018-10-17-procedures-loop/"/>
    <url>/2018/10/17/2018-10-17-procedures-loop/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="存储过程LOOP疑问"><a href="#存储过程LOOP疑问" class="headerlink" title="存储过程LOOP疑问"></a>存储过程LOOP疑问</h2><hr><p>今天在开发需求时，需要编写一个存储过程，实现数据的初始化功能。</p><p>发现遇到循环处理时，跳出循环的条件，Loop的处理</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">LOOP EXIT WHRN(P1 <span class="hljs-operator">&gt;</span> P2);<br>    ...<br><span class="hljs-keyword">END</span> LOOP;<br></code></pre></td></tr></table></figure><p>emmmmmm，因为之前没有怎么学习存储过程，只是看了一下存储过程的原理，就上手开发了（所谓了敏捷开发哈哈哈哈哈哈）</p><p>就引起我的疑问：是直接进入循环呢？还是先判断条件？</p><p>我上网查阅资料。。。好像没有查阅到额</p><p>不过看到有一个类型的，我贴出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">loop<br>    v_sal :<span class="hljs-operator">=</span> v_sal <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br>    dbms_output.put_line(v_sal);<br>    exit <span class="hljs-keyword">when</span> v_sal <span class="hljs-operator">=</span> <span class="hljs-number">8000</span>;<br><span class="hljs-keyword">end</span> loop<br></code></pre></td></tr></table></figure><p>这个类比Java的do-while形式是一样的：先进入循环，满足条件了跳出循环</p><p>我就猜测</p><p>第一种也是这种类型的</p><p>于是我写了个测试例子，存储过程代码如下：</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">PROCEDURE</span> P_TEST(v_res <span class="hljs-keyword">OUT</span> NUMBER,<br>                                   v_errorCode  <span class="hljs-keyword">OUT</span> NVARCHAR2,<br>                                   v_errorMsg   <span class="hljs-keyword">OUT</span> NVARCHAR2,<br>                                   c_startDate  <span class="hljs-keyword">IN</span> NVARCHAR2) <span class="hljs-keyword">IS</span><br><br>c_firstMonthDay NVARCHAR2(<span class="hljs-number">10</span>);     <span class="hljs-comment">-- 所在月的第一天</span><br>c_firstClearDate NVARCHAR2(<span class="hljs-number">10</span>);    <span class="hljs-comment">-- 第一次生成的披露日期</span><br>c_clearDate NVARCHAR2(<span class="hljs-number">10</span>);         <span class="hljs-comment">-- 披露日期</span><br>c_N NUMBER(<span class="hljs-number">10</span>):<span class="hljs-operator">=</span><span class="hljs-number">1</span>;                 <span class="hljs-comment">-- 计算使用的倍数，从0开始</span><br><br><br><span class="hljs-keyword">BEGIN</span><br>  <span class="hljs-comment">--================================================================================</span><br>  <span class="hljs-comment">-------------------------------【执行sql文】--------------------------------------</span><br>  <span class="hljs-comment">--================================================================================</span><br>  <br><span class="hljs-comment">/* 期间管理报告清算提示 Start */</span><br><br>  <span class="hljs-comment">-- 开启日志输出缓冲</span><br>  DBMS_OUTPUT.ENABLE(buffer_size <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">null</span>);<br>  <span class="hljs-comment">-- 获取当月的第一天和最后一天</span><br>  <span class="hljs-keyword">SELECT</span> to_char(last_day(to_date(substr(c_startDate,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>)<span class="hljs-operator">||</span><span class="hljs-string">&#x27;-01&#x27;</span>, <span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>)), <span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>) <span class="hljs-keyword">INTO</span> c_firstMonthDay <span class="hljs-keyword">FROM</span> dual;<br>  <span class="hljs-comment">--SELECT to_char(to_date(substr(c_startDate,0,7)||&#x27;-01&#x27;, &#x27;yyyy-mm-dd&#x27;), &#x27;yyyy-mm-dd&#x27;) INTO c_lastMonthDay FROM dual;</span><br>  c_N :<span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>  <br>  <span class="hljs-comment">-- 生成第一次提示日期</span><br>   <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">extract</span>(<span class="hljs-keyword">YEAR</span> <span class="hljs-keyword">FROM</span> to_date(c_startDate, <span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>))<span class="hljs-operator">||</span><span class="hljs-string">&#x27;-&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;01&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;-&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;01&#x27;</span><br>         <span class="hljs-keyword">INTO</span> c_firstClearDate <span class="hljs-keyword">FROM</span> dual;<br>   c_clearDate :<span class="hljs-operator">=</span> c_firstClearDate;<br>   <br>   <span class="hljs-comment">-- 披露日期小于系统日期生成期间管理报告清算提示</span><br>   LOOP EXIT <span class="hljs-keyword">WHEN</span> (c_clearDate <span class="hljs-operator">&gt;</span> c_startDate);<br>        <span class="hljs-comment">-- 直接生成收益分配提示</span><br>        dbms_output.put_line(<span class="hljs-string">&#x27;披露日期为：&#x27;</span> <span class="hljs-operator">||</span> c_clearDate);<br>        dbms_output.put_line(<span class="hljs-string">&#x27;传入日期为：&#x27;</span> <span class="hljs-operator">||</span> c_startDate);<br>        dbms_output.put_line(<span class="hljs-string">&#x27;进入循环，说明首次进入循环不做条件判断&#x27;</span>);<br>        <span class="hljs-comment">-- 用第一次提示日期计算下一次的提示日期</span><br>        <span class="hljs-keyword">SELECT</span> to_char(add_months(to_date(c_firstClearDate, <span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>), c_N<span class="hljs-operator">*</span><span class="hljs-number">12</span>), <span class="hljs-string">&#x27;yyyy-MM-&#x27;</span>)<span class="hljs-operator">||</span><span class="hljs-string">&#x27;01&#x27;</span> <span class="hljs-keyword">INTO</span> c_clearDate <span class="hljs-keyword">FROM</span> dual;<br>        c_N :<span class="hljs-operator">=</span> c_N <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">END</span> LOOP;<br><br>  <br><span class="hljs-comment">/* 期间管理报告清算提示 End */</span><br><br>  <span class="hljs-comment">--输出放回状态信息</span><br>  v_res       :<span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  v_errorCode :<span class="hljs-operator">=</span> SQLCODE;<br>  v_errorMsg  :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;P_TEST&#x27;</span> <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-operator">||</span> TO_CHAR(SQLERRM);<br><br>  <span class="hljs-keyword">COMMIT</span>;<br><br><span class="hljs-comment">--异常处理</span><br>EXCEPTION<br>  <span class="hljs-keyword">WHEN</span> OTHERS <span class="hljs-keyword">THEN</span><br>    <span class="hljs-keyword">ROLLBACK</span>;<br>    v_res       :<span class="hljs-operator">=</span> <span class="hljs-number">-1</span>;<br>    v_errorCode :<span class="hljs-operator">=</span> SQLCODE;<br>    v_errorMsg  :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;P_TEST&#x27;</span> <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-operator">||</span> TO_CHAR(SQLERRM);<br><span class="hljs-keyword">END</span> P_TEST; <br></code></pre></td></tr></table></figure><p>编写完成，通过测试代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">begin</span><br>  <span class="hljs-comment">-- Call the procedure</span><br>  p_test(v_res <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> :v_res,<br>         v_errorcode <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> :v_errorcode,<br>         v_errormsg <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> :v_errormsg,<br>         c_startdate <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;2018-10-17&#x27;</span>);<br><span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></figure><p>可以通过debug模式一步一步观察代码执行，</p><p>我把存储过程执行结果的日志贴出来</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2971597046.png" alt="QQ截图20181017100342.png"></p><p>通过打印的日志也可以得出结论：先进入循环，当满足条件，跳出结束循环~</p><p>就OK的啦~~~~</p><p> ::aru:shy:: </p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>国庆带你回家</title>
    <link href="/2018/10/11/2018-10-11-NationalDay/"/>
    <url>/2018/10/11/2018-10-11-NationalDay/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>国庆去了女朋友家</p><p>我们从大一相遇</p><p>相恋大概有5年多了</p><p>这次也是第一次要见家长了</p><hr><p>9月30号，我从西安出发；你从广州出发，约定在武汉。第二天我9点到，你12点到，我在武昌火车站等你。</p><p>我们都在火车上睡了一晚，也不算艰辛，一路上可以感受到返乡的气氛。在早上6点的时候，睡不着了，望着窗外，可以看到太阳快出头了，人们纷纷望向车厢外，看这日出：马上就要到家了！</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3141883204.jpg" alt="微信图片_20181011193237.jpg"></p><p>云彩也很漂亮</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3803704988.jpg" alt="微信图片_20181011193519.jpg"></p><p>其实很疲惫，买的硬座，坐了12个小时，浑身上下不舒服。其实你也是，熬了一晚上，辛苦了</p><p>在武昌火车站终于等到了你的到来，我瞬间就回神了，在出站口望眼欲穿的看向远处，终于看到你了。</p><hr><p>我们的计划是先去你家3天，再来我家3天</p><p>算是双方的父母都见一见</p><p>去你家见未来的岳父岳母大人，也少不了买些东西，打个红包什么的（这些我都问了问我爸妈）</p><p>第一次见家长，没有什么紧张感，还算比较顺利，你爸妈也对我比较满意</p><p>一切都很顺利的过去了</p><p>然后我们第三天就出发武汉，换乘去我家的车了</p><p>在武昌客运站看到了这场景，吓到我了。。。 ::aru:distressed:: </p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1209392477.jpg" alt="微信图片_20181011195109.jpg"></p><p>终于赶到晚饭的时候到家了，我不再是一个人回来，我们两个人一起回来的。</p><p>我爸妈都很喜欢你</p><p>我妈带着你去街上买衣服，买金给你ヾ(≧∇≦*)ゝ</p><p>打扮漂漂亮亮的</p><p>这个国庆过得很幸福，因为有你，还有爸爸妈妈身体健健康康，很知足这些！</p><hr><p>最后我家还添了一只猫，名字叫丢丢（被别人丢弃的猫咪），哈哈哈，很乖，很佛性，对于周边发生了啥一点兴趣没有，唯一感兴趣的就是睡觉，我在他旁边，吃香喷喷的饺子，丢丢不为所动，还是睡他的觉</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/4274790148.jpg" alt="微信图片_20181011200108.jpg"></p><p>看着丢丢睡得好香呀<br>端正的坐着，好可爱呀</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1294846983.jpg" alt="微信图片_20181011200256.jpg"></p><p>有时候晒太阳，这样坐着顺毛，哈哈哈哈，被我拍到了</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1403205395.jpg" alt="微信图片_20181011200407.jpg"></p><p>动作是真的销魂</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2296090286.jpg" alt="微信图片_20181011200410.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加班听些歌《Way Back Home》</title>
    <link href="/2018/09/19/2018-09-19-music-03/"/>
    <url>/2018/09/19/2018-09-19-music-03/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>高级的作曲，高级的编曲，高级的作词，再加上高级的歌手和高级的演唱，我认为完美</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加班听些歌-《日落大道》</title>
    <link href="/2018/09/18/2018-09-18-music-02/"/>
    <url>/2018/09/18/2018-09-18-music-02/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这首歌给人的感觉，很安静，心里不浮躁<br>日落大道，吃完饭去外面散散步，然后回来加加班<br>听听歌，多好</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加班听些歌-《遇见你的时候所有星星都落到我头上》</title>
    <link href="/2018/09/17/2018-09-17-music-01/"/>
    <url>/2018/09/17/2018-09-17-music-01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>加班的时候，突然听到这首歌，瞬间感觉压力什么的都没了，好轻松啊。<br>之前也看过《何以笙箫默》，会想到之前的生活，那才叫生活呀</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>七夕的我在加班</title>
    <link href="/2018/08/17/2018-08-17-qixi/"/>
    <url>/2018/08/17/2018-08-17-qixi/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天七夕</p><p>愿天下有情人终成眷属</p><p>愿还是单身的你早日找到另一半</p><p>愿还在加班的我事业蒸蒸日上</p><p> ::aru:crying:: </p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3234074750.jpg" alt="11"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好久不见，最近忙起来了</title>
    <link href="/2018/08/15/2018-08-15-toobusyday/"/>
    <url>/2018/08/15/2018-08-15-toobusyday/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>发个动态证明我的博客还没有挂</strong> ::aru:cryingface:: </p></blockquote><blockquote><p><strong>只不过是最近真的很忙而已，工作忙，玩游戏也忙（皮）</strong></p></blockquote><ul><li>周一到周五，每天晚上加班到10点多，有点厌恶加班了</li><li>上周三，《怪物猎人世界》PC版发售，我也是第一时间就买了</li></ul><blockquote><p>于是我，沉迷游戏，无法自拔了</p></blockquote><p> ::aru:shy2:: </p><blockquote><p>上一次有这种感觉，还是在大一，刚接触英雄联盟的时候。这种对游戏的热爱的感情，好久没有了。</p></blockquote><blockquote><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/741369249.jpg" alt="blob_y4za.jpg"></p></blockquote><blockquote><p>对于游戏的热爱还在，我还年轻<br>哦对了，游戏解禁了 ::aru:bigeye:: </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>太白山+尚境温泉+太白山漂流两日游预告</title>
    <link href="/2018/07/24/2018-07-24-Travel/"/>
    <url>/2018/07/24/2018-07-24-Travel/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>刚收到消息：本周周末两天，公司将举行年中旅游活动，哦耶，开心~ ::aru:cheer::<br>暂时告别宅宅宅生活(｡•ˇ‸ˇ•｡)</p></blockquote><p>[hplayer media=”tencent” id=”001bnNGN127Kbq” type=”song” size=”large” auto=”false” /]</p><p>##行程安排</p><p><strong>【第一天】西安  →太白山</strong><br>D1: 早7：00省体育场东门集合，7:20乘车前往5A级国家森林公园——<a href="https://baike.baidu.com/item/%E5%A4%AA%E7%99%BD%E5%B1%B1%E5%9B%BD%E5%AE%B6%E6%A3%AE%E6%9E%97%E5%85%AC%E5%9B%AD"><strong>太白山国家森林公园</strong></a>，（约2.5小时车程），抵达太白山游客服务中心后换乘太白山景交车（自理）进山（约1.5个小时车程），进入秦岭主峰、沿途可乘车观赏骆驼山、鬼谷子洞（相传，王禅老祖隐身修道于此洞）、铜墙铁壁、下车浏览莲花峰瀑布，（此地四周的群峰宛如莲花的花瓣，莲花峰居中而立，恰似花蕊。一泓瀑布自莲花峰闪电飞泻而下，高约150米，似一条白练临空飞舞，山水相映，秀美壮丽如一条彩虹飞架山谷），车览三国古栈道（此栈道为三国时期蜀国谋士法正所修建）、剑劈峰、泼墨山、下车浏览世外桃源（沿溪流穿林而上，绕过山洞进入一片树林，这里古木参天，飞瀑清潭，农家草屋，岩壁石刻，宛如陶渊明诗中的“世外桃源”）红桦坪（您可乘索道参观，费用自理）到索道上站、观板寺云海、太白冷杉、太白落叶松、拜仙台，再上行至海拔3511米的天圆地方，尽情领略秦岭之巅的神奇风光，感受长江，黄河分水岭的浩瀚。 16：00乘坐景区交通车下山17：00到游客服务中心，晚宿太白山尚境温泉酒店<br>含：晚宿太白山尚境温泉酒店</p><p>【第二天】尚境温泉→太白山漂流 → 西安<br>D2：早8：00起床用早餐，9:30（自愿体验）太白山尚境温泉。尚境温泉水温常年保持在60℃左右，具有养生理念的五种韩式汗蒸特色房、太白十二草药汤池、于是康、太极池等，深受年轻游客喜爱的造浪池、温泉游泳池、温泉漂流河，另外还有温泉SPA理疗吃、温泉儿童戏水区、九耳鱼疗池等特色泡池。 12:00用午餐，之后乘车（自愿参加）太白山漂流，下车后自由活动15分钟，后乘皮筏子感受高山融雪后的太白山漂流，激爽清凉，景色秀丽，沿途可观纯朴的田园风光、十里画廊等，安全轻快的橡皮筏子顺风而行，让您在惊险、刺激的漂流过程中放松现代都市里的疲惫身心，领略大自然的魅力。之后乘车返回西安，结束所有行程！【漂流不限时间，时间为2-3个小时，漂到下码头会有车在此等候，拿上自己的衣服冲澡后集合上车，返回西安，结束愉快的漂流之旅】                                                      含：早餐</p><p>##服务项目及标准<br>★交  通：往返正规空调旅游车<br>★门  票：5A级太白山首道门票<br>★导  服：国家旅游局颁发的持证导游服务<br>★住  宿：太白山4星级尚境温泉酒店标间<br>★用  餐：全程一早餐<br>★保  险：旅行社责任保险</p><p>##自费娱乐项目<br>★ 大索道(天下索道)往返230元/人<br>★ 太白山尚境温泉138元/人</p><p>##注意事项</p><ul><li>请游客在旅行中妥善保管好自己的贵重物品及注意人身安全。  </li><li>酒店房间内洗澡时注意安全，谨防滑到。</li><li>爬山时，游客可根据自身情况，量力而行。  </li><li>太白山景区早晚温差大，请各位游客注意保暖。       </li><li>爬山强度不宜过大 爬山的强度不宜过大，心率保持在120～140次/分钟。</li><li>运动时要注意补充水分，在满足解渴的基础上再适当多饮些水，或者在运动前 10至15分钟饮水400至600毫升，这样就可以减轻运动时的缺水程度了。饮料应选择含有适当糖分及电解度（并最好选择含有维生素C）的，以尽快减轻疲劳感，恢复体力。 </li><li>先热身，后放松 开始爬山锻炼时，切不可一上来就加大运动量，要循序渐进。通常要先做一些简单的热身运动，然后按照一定的呼吸频率，逐渐加大强度，避免呼吸频率在运动中发生突 然变化。锻炼结束时，要放松一下，这样才能更好地保护肌群能力，使血液从肢体回到心脏。</li><li>维生素“热补” 爬山时由于能量与各种营养物质的消耗都比较大，维生素的供给不可缺少，特别应注意补充适量的维生素A、维生素B及维生素D。要做到观景不走路，走路不观景；照相时要特别注意安全，这一点很重要。</li><li>由于不可抗力因素的影响，我社导游可在征求游客同意情况下，在不减少景点的情况下，调整景点游览的先后顺序。</li><li>未成年小孩和65岁上老人参加旅游，需要有成年直系家属陪同。若无陪同，需提供直系亲属和家长书面签字同意单独出行的证明。</li><li>团队行程安排紧张，请游客遵守约定时间。</li><li>如游客有军官证、教师证、学生证、老年证、寿星证者在参观景点之前主动出示，若出现按国家规定施行优惠价的景点，乙方将按旅行社优惠价退差价，甲方提前未声明和不主动出示证件的，乙方不承担责任。甲方自行放弃的乙方一律不退。</li></ul><p><strong>旅行社郑重提醒</strong>：游客不得参观或参与违反我国法律、法规、社会公德和旅游目的地的相关法律、风俗习惯、宗教禁忌的项目或者活动。</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7月的周末怎么过</title>
    <link href="/2018/07/15/2018-07-15-JulyWeeks/"/>
    <url>/2018/07/15/2018-07-15-JulyWeeks/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><h3 id="我但凡有点才华，绝不会选择上班，想去追求自由！"><a href="#我但凡有点才华，绝不会选择上班，想去追求自由！" class="headerlink" title="我但凡有点才华，绝不会选择上班，想去追求自由！"></a><strong>我但凡有点才华，绝不会选择上班，想去追求自由！</strong></h3></blockquote><hr><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7月的西安挺热的，应该不仅仅是西安，很多地方应该都是好热的天。是的，夏天真的来了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;周一到周五倒是没啥感觉，坐办公室感受不到外面的燥热。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;感觉事业遇到一个瓶颈时期，我不想局限于目前的项目，整个项目是由dubbo框架搭建，前端是AngulaJS。入手很快，但是感觉学不到什么（对以后没啥作用），无非只是一些java编程逻辑，没有什么新的技术。于是周一到周五下班之后，我都背着电脑，回到宿舍。逛逛论坛，看看有什么新的知识是否值得去学习，或者一些我还没学的内容。学会了Redis缓存技术，我想搞Java的，对于Redis和memcached都应该去学习了解一下的。然而这只是周一到周五才有的干劲。到了周末，哈哈哈哈，完全就回归自我了，不想搞学习，在豪华总统套间里快快乐乐的玩耍 ::aru:shy2:: 实在是没有学习的心思了~</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看了两天的电视剧，这部电视剧还是12年前的老电视剧，但是是绝对的高分神作，韩国家庭喜剧《搞笑一家人》。哈哈哈哈哈，小时候看过，但是没有连着看，那时候没看懂里面的梗。。现在拿出来看，真的超级笑点，挺适合我这个死肥宅宅在家里看的，哦对了，这部神剧豆瓣评分9.5分。</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3434571045.jpg" alt="a8014c086e061d957b64ad717bf40ad162d9ca5d.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;人生呐，最重要的是开心！</p><p>最后贴下在线观看的地址：<a href="https://www.dianyingbar.com/hanju/10984.html">《搞笑一家人》</a></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>湖北一张图</title>
    <link href="/2018/07/13/2018-07-13-HuBei/"/>
    <url>/2018/07/13/2018-07-13-HuBei/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>湖北各个区域的代表φ(￣∇￣o)</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1088251684.jpg" alt="湖北食谱图"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>西安出差半年了</title>
    <link href="/2018/07/01/2018-07-01-dormitory/"/>
    <url>/2018/07/01/2018-07-01-dormitory/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;十三朝古都长安!!!<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;来西安出差已经有半年多了，从去年12月初来的，今天已经7月1号了。想一想今年过得好快啊。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说起来就很有缘，本来我是不需要在西安出差的，可以回武汉，可是有位同事在长安信托项目组没有按照甲方的要求吧需求完成，没有通过甲方的初步认同，离开了长安信托项目组，而我就被代替进来了。直到现在，一直在长安。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;长安信托项目组是以人月模式运行的项目组，主要开发信托相关的业务。和甲方的合作也一直在需求一种更加便捷，开发更加高效的方式，从开发需求到上线这个过程中，整个周期下来所需要做的开发和文档，正在成为一套更加成熟的模式。中途也一直在磨合，双方都很理解，这是最难得的。挺感谢甲方的。</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2115989291.jpg" alt="微信图片_20180701110753.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再说说长安吧，待了半年，也没有去过太多的地方。大家知道的华山啊、兵马俑啊、大唐芙蓉园啊这么吊吊的地方，我都没去过哈哈哈哈哈。我还真好意思唉，别人问我”你去西安大半年了，去过哪里玩过哇？”，我。。。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内心有股想出去游玩，出去浪的心，可是一到周末，就懒下来了，难道是我老了？不愿出门哈哈哈哈。这时候我可以找个理由：周一到周四，平均每晚加班到9点。加班是真的，累得不想出去玩也是真的。周五不加班也是真的哈哈哈哈哈~</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3841497012.jpg" alt="heiren.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从去年冬天来到长安，遇上了长安的大雪，下班之后新人匆匆，都在赶往回家的路上，而我们全都身处异乡。那么冷的天，不愿过多停留。</p><img src="https://niaobulashi.com/usr/uploads/2018/07/152645620.jpg" width="200" hegiht="400" align=center /><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2288278387.jpg" alt="微信图片_20180701111422.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;项目组每个月也都会去聚个餐，给兄弟几个吃好喝足了。<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3040198560.jpg" alt="微信图片_20180701111424.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一开始对长安的饮食确实不太习惯，很多吃的都没听说过，毕竟是第一次来大西北，下图有没有知道是啥的，反正当时我是不知道，处于好奇点的。吃起来还不错，用勺子吃。<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2667997810.jpg" alt="微信图片_20180701111426.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在西安咸阳机场，可以看到这个景象，但是我一般都不去吃，因为机场的价格都不便宜哈哈哈哈</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1043186563.jpg" alt="微信图片_20180701124524.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对长安最赞叹是，这里的晚上的灯光是真滴秀，凡是高楼大厦，都有灯光缠绕，将西安这个地方装扮得很炫酷。这是我们办公的大楼，高新国际大厦。<br><img src="https://niaobulashi.com/usr/uploads/2018/07/2950375027.jpg" width="200" hegiht="400" align=center /></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加班中，拍拍外面的景象，对面就是中国人民银行了。<br><img src="https://niaobulashi.com/usr/uploads/2018/07/3234074750.jpg" width="200" hegiht="400" align=center /></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;西安这个地方，从去年就慢慢火起来了。据我所知，西安和抖音有个什么商业合作，抖音对于西安有个很有效的推广作用。有一首歌叫做《西安人的歌》。</p><p>[hplayer media=”tencent” id=”001mHjnK2EoeeF” type=”song” size=”large” auto=”false” /]</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;和同事骑着自行车，一起去过西安的大城墙，永宁门，晚上，一路上很美。在路过一个城墙门外的桥时，桥两边的灯光很秀。<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3847351029.jpg" alt="a3d658ably1fsu7zfma8mj21kw11xnpi.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;永宁门到了，刚好碰到了灯光秀，万家灯火。<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1221019901.jpg" alt="微信图片_20180701130804.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2367617899.jpg" alt="微信图片_20180701130807.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一次一起去了趟永兴坊，哪里就是抖音上著名的摔碗酒哈哈哈，人好多啊，就没有去排队，记录了几张照片<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2355541669.jpg" alt="微信图片_20180701131624.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3519793067.jpg" alt="微信图片_20180701131629.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2264423854.jpg" alt="微信图片_20180701131626.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实没有啥，感觉就是被网络给炒火的。哈哈，我们也跟风一把。说起抖音，同事趁我不注意，拍了我个视频。我是比较喜欢听有节奏感的音乐。周末宿舍做事的时候，同时放了一首当时抖音很火的音乐，我就情不自禁的抖起来了哈哈哈哈哈。<br>[vplayer url=”https://niaobulashi.com/usr/uploads/mp4/dou.mp4” pic=”https://niaobulashi.com/usr/uploads/2018/07/1843447413.jpg” /]</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这么美的长安，为了留住这里风景，特地买了个单反，当然是入门级别的啦，根本不会玩单反。<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3466786116.jpg" alt="微信图片_20180701132322.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上一张用这小玩意拍的效果图。</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1136660425.jpg" alt="微信图片_20180701131634.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;昨天在搬宿舍，房东把房子给卖了。我们已经找到下家了。叫了个搬家公司，昨天从中午12点开始，把大大小小的包裹，搬到车上，一起拉过去。因为有4个高低床，搬家的两个师傅将床拆卸后装进车里，其他的都是我们自己来。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;到了目的地，这边都是老校区，最高7楼，很不幸，我们租房在7楼，没有电梯！没有电梯！没有电梯！要死了要死了，7楼没有电梯。昨天下午2点多的时候，我们6个人一起开始搬了。两个师傅负责将4个高低床从1楼搬到7楼，看了很辛苦。我们就负责吧自己的东西搬上去。大半年没有锻炼过，搬完之后，整个人都累瘫了 ::aru:crying:: </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;租的是4室2厅，面积很大，足够7个人住了。在搬家的前一天，也就是周五下班之后，我们开始选房间，为什么要选房？因为其中有一个<strong>单间</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过微信摇色子的方式，谁的点数最大，就可以选中唯一一间单间。很公平吧~，结果，我摇到6点了，哈哈哈哈，选中这个单人豪华总统套间，很幸运哈哈哈哈。</p><img src="https://niaobulashi.com/usr/uploads/2018/07/1617570277.jpg" width="200" hegiht="400" align=center /><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;附上这个豪华总统担任套间。<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/718118524.jpg" alt="微信图片_20180701131640.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3962646991.jpg" alt="微信图片_20180701131652.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;昨晚睡得很香 ::aru:envious:: </p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的高考路</title>
    <link href="/2018/06/29/2018-06-29-highSchool/"/>
    <url>/2018/06/29/2018-06-29-highSchool/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>高三没有考好，复读进入高四。<br>那时候的我们都是为了共同的梦想，不停的奋斗着。<br>有感而画的我的高考路<br>时间大概过去有6年多了<br>灵感来自微博大V:<a href="https://weibo.com/dingyichen">丁一晨DYC</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2089050318.jpg" alt="学习"><br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/309444701.jpg" alt="奋战"><br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1427909201.jpg" alt="关爱"><br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/383991670.jpg" alt="不舍"><br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/991790330.jpg" alt="出发"><br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3103394158.jpg" alt="再见"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下mysql自动备份脚本</title>
    <link href="/2018/06/26/2018-06-26-AutoBackup/"/>
    <url>/2018/06/26/2018-06-26-AutoBackup/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;逛了蛮多博客网站的，亲眼看到一个博客网站数据丢失之后的模样，挺为他心痛的。于是就打算弄个mysql定时备份的脚本，可以自行设计crontab定时执行时间，可以是周一和周四每周备份两次就可以了。<br>##脚本<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新建一个mysql_backup.sh文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#设置mysql的备份保存目录</span><br>folder=/root/mysql_back<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$folder</span><br>day=`date +%Y%m%d`<br>mkdir -p <span class="hljs-string">&quot;<span class="hljs-variable">$day</span>&quot;</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$day</span><br><span class="hljs-comment">#数据库服务器ip，填写服务器的公网地址即可</span><br>host=xx.xx.xx.xx<br><span class="hljs-comment">#用户名</span><br>user=root<br><span class="hljs-comment">#密码</span><br>password=password<br><span class="hljs-comment">#要备份的数据库名</span><br>db=<span class="hljs-built_in">test</span><br><br><span class="hljs-comment">#执行备份语句</span><br>mysqldump -h<span class="hljs-variable">$host</span> -u<span class="hljs-variable">$user</span> -p<span class="hljs-variable">$password</span> <span class="hljs-variable">$db</span> &gt; ./test.sql<br></code></pre></td></tr></table></figure><hr><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>上方需要你 <strong>修改</strong> 并且 <strong>注意</strong> 的地方有：</p><ul><li>folder设置的目录你可以自行设置</li><li>day=date +%Y%m%d，”+”和”date”必须有个空格，否则会有语法错误</li><li>host为你的服务器公网IP</li><li>user一般都是root</li><li>password为root的密码</li><li>db为博客的数据库名</li></ul><p>测试脚本是否正确，执行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh mysql_backup.sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1464004124.png" alt="QQ截图20180626230755.png"></p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2870057410.png" alt="QQ截图20180626230835.png"></p><p>因为我是为了测试crontab的定时任务执行是否有效，我设置的是1分钟执行一次，其中day=`date +%Y%m%d_%H%M%S`。（为了执行效果而截的图，可忽略）</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2495043674.png" alt="QQ截图20180626231009.png"></p><p>##定时任务</p><p>设置好定时任务crontab执行时间，一般ESC都会自带crontab服务的。查看crontab服务状态</p><blockquote><p>service crond status</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/4180787049.png" alt="QQ截图20180626225857.png"></p><p>有蓝色指示灯说明服务运行正常，OK，开始设置定时任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crontab -e<br></code></pre></td></tr></table></figure><p>键入i，进入编辑模式：<br>敲入下列命令：每周1和周4凌晨2点会执行定时脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">0 2 * * 1,4 /etc/profile;/bin/sh /root/mysqlbackup.sh<br></code></pre></td></tr></table></figure><p>重启crontab服务使之生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/systemctl restart crond.service<br></code></pre></td></tr></table></figure><p>OK了，之后查看备份的文件就在上面脚本定义的目录上查看即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /root/mysql_back<br></code></pre></td></tr></table></figure><p>为你的博客进行备份，不再为数据丢失而烦恼啦。</p><p>是不是so easy。有啥问题尽情留言，秒回</p><blockquote><p>20180725前来更新<br>这是部署脚本之后的执行效果，每个周一和周四凌晨2点执行的效果图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1640153408.png" alt="微信截图_20180725140456.png"></p><p>不再为忘记备份担心数据丢失啦~</p><p>##推荐阅读<br><a href="https://www.jianshu.com/p/d93e2b177814">关于定时执行任务：Crontab的20个例子</a><br><a href="https://www.jb51.net/LINUXjishu/19905.html">Linux crontab定时执行任务 命令格式与详细例子</a><br><a href="http://www.runoob.com/linux/linux-comm-crontab.html">Linux crontab命令</a></p>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>端午假期·广州之旅</title>
    <link href="/2018/06/24/2018-06-24-travelToGD/"/>
    <url>/2018/06/24/2018-06-24-travelToGD/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>一直没有时间写，端午回来之后就开始了紧张的开发工作，因为下班都是到了21点多了，回去也没有太多时间来写这篇博客，所以一直推迟到本周末。</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从6月15号下午6点半的飞机（最后推迟到7点半）起飞，从西安去往广州，全程有1671.4公里。没有额外请假，因为在甲方工作，需求任务紧张不方便请假，所以3天有些匆忙，来回的路上都需要花上12个小时。（截图是刚刚截的，没有19:30起飞的，仅作参考）<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2110976666.jpg" alt="微信截图_20180624093042.jpg"></p><h2 id="我来了"><a href="#我来了" class="headerlink" title="我来了"></a>我来了</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;感觉一路上都是赶车，全程的路线大致是这样的：</p><ul><li>从西安高新国际大厦做机场大巴到咸阳机场，路途耗时1小时</li><li>预计18:30起飞延迟到19:30（留下伏笔）</li><li>晚上22:20落地达到白云机场，下了飞机一路在赶</li><li>22:40坐上倒数几班的地铁，去广州东地铁站，路途耗时40分钟</li><li>明知已经赶不上从广州东站去往下面的XX市的动车（买的最晚的23点的动车）赶不上了，如果当时在西安起飞的飞机没有延迟的话，这趟车是可以坐上的。所以凡事都得考虑异常情况。</li><li>在去往广州东站的地铁上，赶紧从滴滴上下单了个顺风车：从广州东到XX市，票价92元。我买的这张从广州东站到XX市的动车票由于距离发车时间小于30分钟了，不能在手机客户端进行退票，只能去人工窗口退票，我知道我已经没有那么多时间了，也不知道人工售票口下班了没有（我猜想肯定是下班了），就没有去退票了，于是这张动车票54元打水漂了。</li><li>15号晚上达到临近凌晨的广州，这时候的广州异常的热，比西安热多了，路上已经很少有行人了，只有来来往往的车。比较热闹的是滴滴司机，都在抢客源，师傅叫我等一等，说还有别的乘客，因为是顺风车，多叫一位乘客就多挣一份钱。不是我说走就走的，于是让我等到凌晨1:30左右才正式出发。（大家知道最近滴滴出了不少事情，都是大晚上的叫滴滴顺风车出现了一些悲惨的事件，我也有些担心，最后由于疲倦，没那么多精力多虑，坐在后座呆呆的望向窗外，不敢睡去）。</li><li>从广州东到下面的XX市，路途大约1个半小时，大约3点多到达目的地。终于结束了上半场奔波。</li></ul><hr><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在去广州的旅程上，就是飞机延迟让我旅途中折腾级别疯狂增高罢了。其他没有太多值得纪念的事情。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;19:30登记，通过登机输送通道，看到两侧的甲方公司的广告。</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/500490731.jpg" alt="微信图片_20180619234513.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;特地选择的靠窗的位置，可以随时看看窗外的景象，因为这种风景不是随时可以经历，当飞机冲过云城之后，一片云海映入眼帘，看着心情好多了。<br><a><a data-fancybox="gallery" data-no-instant=""><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1161921576.jpg" class="figure nocaption fig-50"></a><a data-fancybox="gallery" data-no-instant=""><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3185425325.jpg" class="figure nocaption fig-50"><br></a></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;等到飞机平稳飞行后，开始推着车提供晚餐服务，我要了面条和咖啡，倒是可以填充下肚子。进飞机口拿了份报纸，想着看看报纸，其实根本看不进去的。有的只是看看窗外，眯眼睛休息，听听歌。<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2069744389.jpg" alt="微信图片_20180619234608.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不知不觉天就黑了下来，大约到了22点的时候，飞机开始下降，回到云层之下，到了广州上空。广州的夜晚，灯火通明，体会到发达城市的感觉了，尽是繁华。行车在飞机上看显得很慢很渺小，人也是。<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1848260225.jpg" alt="微信图片_20180619234624.jpg"></p><hr><h2 id="一起"><a href="#一起" class="headerlink" title="一起"></a>一起</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;飞机落地之后，赶紧飞奔到地铁站，后面的事情就没啥好讲的了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假期的三天过得都很平常，没有再做远程车去别的名胜风景的地方。第一因为天气太热，刚好碰到了端午的炎热夏日。去逛了万科生活广场，在名创优品拍了两张照片哈哈。不用多说了，我知道我有那么一点点胖哈哈哈。<br><a><a data-fancybox="gallery" data-no-instant=""><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3311532124.jpg" class="figure nocaption fig-50"></a><a data-fancybox="gallery" data-no-instant=""><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1863920773.jpg" class="figure nocaption fig-50"><br></a></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一起去了美术馆和图书馆，因为他俩在一起，所以称为首选去的地方。坐个的士10分钟就到了，因为外面估计有30°C，实在是太热了，不想在外面走。到了开明美术馆和松山湖图书馆了。</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2189014022.jpg" alt="微信图片_20180623192414.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们先去的美术馆，想着看完就去图书馆坐坐看看书什么的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;来到了美术馆，首先就是一条长廊，两侧是放置美术观赏的书画的房间。说明一下：这里的画都是可以提供拍照的。拍了很多照片，就不一一列出了。</p><p><a><a data-fancybox="gallery" data-no-instant=""><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2271841281.jpg" class="figure nocaption fig-50"></a><a data-fancybox="gallery" data-no-instant=""><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2205424559.jpg" class="figure nocaption fig-50"><br></a></a><br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1478099349.jpg" alt="微信图片_20180623192541.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个房间都走了一遍，感受到老一辈的艺术家们的气势，每幅画都是那么的宏伟，赞叹祖国的大好山水。有机会一定游遍全国，出去走走，看看这个世界，还有很多美丽的地方。不想局限在画面里，想亲自去感受这一切。带上你。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后去了隔壁的图书馆，图书馆无须其他手续可以直接进入，只要不借书。图书馆里面也很不错，唯一就是感觉作为比较少，提供的读书位置较少，不像大学里的那样，毕竟是地区的图书馆。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;共有三层，第一层没去，直接上了第二层，刚好这天是父亲节图书馆在举行以父爱为主题的活动，对小孩子有教育意义的活动。<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3387517478.jpg" alt="微信图片_20180624105604.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;去到三楼，找到了计算机编程相关的书，随便拿了一本java的书哈哈哈。</p><p><a><a data-fancybox="gallery" data-no-instant=""><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/439504102.jpg" class="figure nocaption fig-50"></a><a data-fancybox="gallery" data-no-instant=""><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/793912574.jpg" class="figure nocaption fig-50"><br></a></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;端午假期有部很火的电影《侏罗纪世界2》，于是就在去看了，买的是晚上20点多的票次，晚上在商场玩的人很多，很多小孩子在玩小喷泉。<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/130855531.jpg" alt="微信图片_20180624105811.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;电影是好看没得说（哈哈哈，不太会写影评），唯一就是让我想不通的是，在星星国际影城看3D电影还得自行提供3D眼镜，所以只能在前台买3D眼镜了，因为本身都是带了眼镜的，买的是眼镜夹片那种的。还是一次去电影院看3D电影还要自己带3D镜片的，真的是无语了。。<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2481743347.jpg" width="200" hegiht="400" align=center /></p><hr><h2 id="回去了"><a href="#回去了" class="headerlink" title="回去了"></a>回去了</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我在西安，你在广州。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;端午最后一天，虽然不舍，还是需要暂时的别离。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;晚上21:30的飞机回西安，大概23:50的时候飞机落地，此时的机场上只停留了零零散散的飞机，应该是最后一班达到的飞机吧。</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/3093983001.jpg" alt="微信图片_20180624132253.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;刚好在候机场碰上老大了，一起坐机场大巴回宿舍去</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/2620850130.jpg" alt="微信图片_20180624132256.jpg"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;老大是端午回武汉的，带了两盒周黑鸭来，大概是凌晨1:30的时候达到宿舍。回来这么晚了，都没吃晚饭，我俩就买了个泡面和啤酒，和着周黑鸭吃，还看着世界杯，整理下来这个假期还是过得蛮充实的。</p><p><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/1106054802.jpg" alt="微信图片_20180624132300.jpg"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>三天时间其实过得也挺快的，也没有多去别的地方，只是在附件一起走了走。从大一到现在，应该有差不多6年多了吧，感情路上遇到很多不如意，分分合合，我有很多不好的地方，我也一直在改变，变得更好。工作上也继续努力，让未来变的生活得更好。一直坚持！明年给会你一个好好的交代！</strong></p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假期最后一天的行程也不多说，总结一句话：全程好赶，差点没赶上飞机回不去了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;让我很感动的一件事是：因为路上是真的很堵，比武汉的还堵，已经提前很久就出发了。在赶往常平火车站的路上，就差最后8分钟，前面一直在堵车，我们就提前下了的士，她一下车就让我把身份证拿出来，我说怎么了，她说我跑去先把票取出来，要我直接去排队进站，一路上我在她身后跑，我实在跑不动了，可是她一直在前面跑，从没停过。我在后面看着他前面不停奔跑的声影，感动！</p><hr>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>造成开发效率底下并且代码难以维护的 35 个恶习</title>
    <link href="/2018/06/23/2018-06-23-badHabit/"/>
    <url>/2018/06/23/2018-06-23-badHabit/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;偶尔在Linkedin英领上看到高级软件工程师，全栈工程师<a href="https://www.linkedin.com/in/christianmm">Christian Maioli</a>早前分享的在项目开发中很多人遇到的通病，我看了觉得比较有用，特别是对即将毕业进入公司项目组、或者正在进行项目开发的小伙伴，应该会有点帮助吧。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我也算是有两年快三年的工作经验了吧，从2015年8月进入公司开始实习，到16年17月份转正一直在这家公司，前后投入开发过6个项目，从项目开发上养成良好的工作习惯还是很重要的！</p><p>##代码管理<br>1.总是说“一会弄好”，但从来不兑现。（缺乏任务管理和时间管理能力）</p><p>2.坚持所谓的高效、优雅的“一行代码流”，事实上，可读性才是最重要的，聪明是第二位的。</p><p>3.无意义的优化。（类似网页大小之类的优化最后再做）</p><p>4.不注重代码样式和风格的严谨。</p><p>5.使用无意义的命名。</p><p>6.忽略经过验证的最佳实践（例如代码审核、TDD、QA、自动化部署等，推荐阅读软件开发必读经典著作：<a href="https://www.amazon.cn/gp/product/0596808321?tag=24ker09-23">Making Software：What Really Works，and Why We Believe It</a>）。</p><p>7.给自己埋雷。（例如使用不会报错的库或者忽略例外）</p><p>##团队工作<br>8.过早放弃计划</p><p>9.坚持一个无效的计划</p><p>10.总是单打独斗。（必须强迫自己与团队分享进度和想法，避免错觉，提高效率）</p><p>11.拒绝书写糟糕的代码。（日程紧迫的时候可以写一些“糟糕”的代码，这是程序员的能力而不是bug，当然，有时间的时候一定要回头偿还“技术债”）</p><p>12.抱怨他人。</p><p>13.不与团队分享所学。</p><p>14.向主管/客户反馈的速度过慢</p><p>15.不会充分利用Google</p><p>16.看重个人编码风格</p><p>17.带着个人情绪看待他人对自己代码的评论和注释</p><p>##写代码<br>18.不懂优化策略</p><p>19.使用错误的工具。</p><p>20.不追求对开发工具和IDE的精熟。</p><p>21.忽略报错消息。</p><p>22.迷恋称手的开发工具。（不同类型的开发任务需要匹配对应的最佳开发工具，例如Sublime适合动态语言，而Eclipse适合Java，如果你喜欢vim或emacs，并不意味着能用这些工具干所有事）</p><p>23.不注重代码中赋值的可配置性。（不养成把代码中的活动部件分离出来的习惯，会导致技术债暴增）</p><p>24.喜欢重新发明车轮。</p><p>25.盲目地剪切/粘贴代码。</p><p>26.应付差事，不求甚解，不花时间搞清楚项目运作的机理。</p><p>27.对自己写的代码过度自信。</p><p>28.不去考虑每一个设计、方案或者代码库的“副作用”。（一个成功的用例并不意味着“万灵药”）</p><p>29.在一个地方卡住了但坚持不呼救。</p><p>##测试与维护<br>30.只去写能通过的测试</p><p>31.重要项目中忽略性能测试</p><p>32.不去核实代码是否真的可用，没有养成开发中及时快速测试的习惯。</p><p>33.重大改动延迟推送</p><p>34.抛弃和逃避自己的代码。</p><p>35.忽略其他非功能性需求。（例如安全和性能，准备一份这方面的清单，忽略这些会毁掉你的所有成果）。</p><p>原文地址：<a href="https://www.linkedin.com/pulse/avoid-35-habits-lead-unmaintainable-code-christian-maioli-mackeprang/">Avoid these 35 habits that lead to unmaintainable code</a></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在咸阳机场等候登机有感</title>
    <link href="/2018/06/15/2018-06-15-waitForU/"/>
    <url>/2018/06/15/2018-06-15-waitForU/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>甲方的产品经理很好，不像大家熟知的产品经理那样要你改着改那的。<br>大家熟知的产品经理估计着这样的<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/5d1c51360f3f2.jpg" alt="产品经理要你改需求1"></p><p>还是这样的<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/5d1c51357454e.jpg" alt="产品经理要你改需求2"></p><p>我们甲方知道端午节，我们也是出差过来的，就提前告知我们有回去的可以提前赶飞机赶动车，这让我们很感动T-T<br>临近3点40的时候，不得不说，还是第一次3点半就下班<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/5d1c513664689.jpg" width="200" hegiht="400" align=center /></p><p>下班的天空都美些<br>我和另一位同事就先撤了，买的都是18点半的飞机，他去桂林，我去广州。<br>坐机场大巴途中收到短信<br>告知航班延迟1小时，推迟到19点半，一下子打乱了时间计划，这种感觉真的很无奈。</p><p>等到了候车室，等了差不多40分钟又被告知，不是在27号等候，得去2楼11号登机口上飞。<br>一路上折腾得很。<br>最终一大票人来到11号登机口登记排队<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/5d1c51367bc86.jpg"></p><p>坐了这么多次飞机，就感觉海南航空的不够专业，有一次不是在登机口直接上飞机，还需要坐大巴另外去飞机那上机等等事情，太让乘客折腾了。</p><p>整过过程使用手机写的文章，感觉横屏之后，效果还不错<br><img src="https://cdn.jsdelivr.net/gh/niaobulashi/images@main/niaobulashi/2018/5d1c513693913.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>明晚6:30飞广州</title>
    <link href="/2018/06/14/2018-06-14-planToGD/"/>
    <url>/2018/06/14/2018-06-14-planToGD/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>端午佳节时，于明天下午6点半的飞机<br>从西安出发，飞往广州<br>大概下午3点走人，坐机场大巴到咸阳机场<br>开启历时3天广州之旅</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于博客的回忆</title>
    <link href="/2018/06/11/2018-06-11-memory/"/>
    <url>/2018/06/11/2018-06-11-memory/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这是一个在博友圈传播的游戏。</p><p> 被<a href="https://linhai1990.com/">以梦为马，奔向远方</a>点名，在这里回答问题。</p><p> 游戏规则：<br> 1.认真如实的回答下面提出的问题；<br> 2.仔细回顾自己建站建博的发展历程，完成第一、二条的问题；<br> 3.能煽情的最好煽情；<br> 4.可以自己继续添加问题和修改问题；<br> 5.自己回答之后将此活动转交给你的3个朋友（博主站长），并督促其完成答题并继续传递下去；<br> 6.接到点名的尽快完成，然后转交给其他人（其他人看到本游戏也可以自行发起，不必等待）；<br> 7.此活动没有什么利益的，只是一种美好回忆而已；<br> 8.被点名的人复制规则及以下部分；<br> 9.完成之后可以发到boke112导航的投稿邮箱（<a href="mailto:&#98;&#x6f;&#107;&#x65;&#x31;&#x31;&#x32;&#x40;&#113;&#x71;&#46;&#99;&#x6f;&#109;">&#98;&#x6f;&#107;&#x65;&#x31;&#x31;&#x32;&#x40;&#113;&#x71;&#46;&#99;&#x6f;&#109;</a>），以便发布在boke112导航的 美好回忆 专题中。</p><p> 游戏问答正式开始：</p><p> 1、是否还记得自己的第一个域名和第一个站点？它们是否还活着？</p><p> 答：记得是在大二的时候，使用的第一个域名是后缀为.tk的免费域名，是seanhu.tk，现在应该用不了了，那时候不懂得建站，所以解析的是自己的微博地址。</p><p> 2、你现在拥有多少个域名？同时运营多少个博客站点？</p><p> 答：有2个域名，运营博客的就这一个，另外一个用于项目组的日报系统。</p><p> 3、是否还记得第一次建站建博的初衷？现在是否已经改变？</p><p> 答：一开始觉得有一个属于自己的博客网站是件非常酷的事情，第一次有这种想法是在大三的时候，是的，只是想法而已，大学期间没什么建树，悔过当初没有好好学代码，大学也就这样玩过去了。三年之后，也就是2017年的10月份，看到同事的博客网站<a href="https://jibushengdan.com/">鸡不生蛋</a>，让我会想到了大学时的初衷，于是正式去了解博客的建站流程，重燃了当初建站的初心，现在依然觉得这是一件很酷的事。</p><p> 4、现在大部分博客消亡的原因都是未能坚持，又是什么动力让您坚持到了现在?</p><p> 答：其实我也算是个新手，博客建站才半年多，很可惜中间有一个季度没有更新博客，那个季度是自己最忙的时刻，工作日每天加班到晚上10点多赶最后一趟末班车。那个时候有做不完的事情，一个项目组就5个人，主要做的事互联网金融服务理财平台，是半路接手的项目，有很多的bug。那时候日子并不好过，加班到自己喘不过气，周末也是直接睡过去的，不想动，几乎忘记了自己还有博客这件事。直到项目需求慢慢不多了之后，加班就不那么频繁了，有了自己的时间，重回到了博客。所以当我不加班的时候，就会让博客充满活力。在2018/5/9号加入<a href="https://www.foreverblog.cn/">十年之约</a>，更加坚定了决心将博客好好运营下去。</p><p> 5、盈利好像是每一个博客的归宿，目前您的博客盈利情况如何?靠那些方面进行盈利?</p><p> 答：没有盈利，也从没想过建立博客去盈利。</p><p> 6、在博客网站运营过程中，有没有印象特别深或感动的事情？</p><p> 答：在建立博客之处，也是<a href="https://linhai1990.com/">以梦为马，奔向远方</a>第一个关注到了我，像那种指路人的感觉，也很庆幸今天点名了我，让我很感动。还有<a href="http://heng07.com/">一恒的网志</a>提供了很多意见，非常感谢。</p><p> 7、在博客网站运营过程中，有没有遇到一些比较讨厌的事情？</p><p> 答：其一：在不明白为什么访问速度奇慢无比的情况下，不知道重新格式化磁盘多少次，重新安装服务不知多少遍，尽量让服务器干干净净的，可是效果不显著；其二：使用了access监控到了很多国外的ip，我不太懂，像是爬虫之类的ip，总之可能会导致网站访问速度变慢，这是比较讨厌的。</p><p> 8、在博客网站运营过程中，你认为收获最大的事情是什么？</p><p> 答：逛博客、分享知识、解决方案、故事、心情，认识其他的博友。</p><p> 9、你现在是全职还是兼职运营博客网站？每天大概花费多少时间在上面？</p><p> 答：兼职运营。上班不忙的话偶尔会上来看看有没有访客，有没有收到留言邮件（并没有哈哈哈哈）只有下班了才有时间好好打理博客，看看友链的小伙伴们有没有更博，想一想这一天有没有什么值得分享的事情。大概9点多下班吧，每天大概会花3个小时在博客上。</p><p> 10、你认为通过博客结交的朋友可靠吗？你相信他们吗？</p><p> 答：会选择去相信。每一个博友都有想表达自己内心的小小世界，我们每个小小世界通过友联相互连接，相互信任，这份信任是基于你的坚持，坚持着书写博客，书写内心的小小世界，将内心话分享给倾诉给朋友们，给懂得自己的人看。</p><p> 11、为博客花掉了自己这么多的时间，你后悔过吗？</p><p> 答：不后悔，只是后悔来晚了。</p><p> 12、如果说有一天你要放弃博客了，你认为会是什么原因呢?</p><p> 答：疾病缠身，老年痴呆，我可能就没办法写博客了。</p><p> 13、能否谈谈您博客的一些未来发展与规划？</p><p> 答：看点书籍，提升写作水平，有时候回顾以前文章，有点辣眼睛，口语化较严重。以后会半技术半生活化的文章类型。</p><p> 14、对于新加入独立博客行列的粉嫩博主，您有什么建议和忠告给他们吗？</p><p> 答：初心不变，脚踏实地，不急不躁，方成大事。</p><p> 15、你要把此活动转交给谁呢?</p><p> <a href="http://heng07.com/">一恒的网志</a>、<a href="http://www.pxwei.com/">彭小伟</a></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修复使用微信内置浏览器评论报错的BUG</title>
    <link href="/2018/06/09/2018-06-09-commentBUG/"/>
    <url>/2018/06/09/2018-06-09-commentBUG/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>昨晚在测试评论邮件通知的时候，我把<a href="http://niaobulashi.com/index.php/bbs.html">http://niaobulashi.com/index.php/bbs.html</a> 留言板发给朋友进行测试，用的微信发送的，所以朋友直接用的微信内置浏览器打开的链接进行评论<br>出现了下面问题</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[Sat Jun 09 09:26:31.057599 2018]</span> <span class="hljs-selector-attr">[:error]</span> <span class="hljs-selector-attr">[pid 23230]</span> <span class="hljs-selector-attr">[client 123.139.18.5:25297]</span> SQLSTATE<span class="hljs-selector-attr">[22001]</span>: String data, right truncated: <span class="hljs-number">1406</span> Data too long for column <span class="hljs-string">&#x27;agent&#x27;</span> at row <span class="hljs-number">1</span>, referer: http://niaobulashi.com/index.php/bbs.html<br></code></pre></td></tr></table></figure><p>关键信息：1406 Data too long for column ‘agent’ at row 1</p><p>很明显微信内置的浏览器的user agent的字段过长导致的错误。<br>评论的表typecho_comments.agent</p><p>对了，我把Chrome浏览器的agent和微信内置浏览器的agent贴出来供参考:<br>Chrome浏览器agent：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Mozilla</span>/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win<span class="hljs-number">64</span>; x<span class="hljs-number">64</span>) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">66</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3359</span>.<span class="hljs-number">181</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br></code></pre></td></tr></table></figure><p>微信内置浏览器：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Mozilla</span>/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Linux; Android <span class="hljs-number">8</span>.<span class="hljs-number">1</span>; ONEPLUS A<span class="hljs-number">5010</span> Build/OPM<span class="hljs-number">1</span>.<span class="hljs-number">171019</span>.<span class="hljs-number">011</span>; wv) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Version/<span class="hljs-number">4</span>.<span class="hljs-number">0</span> Chrome/<span class="hljs-number">57</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2987</span>.<span class="hljs-number">132</span> MQQBrowser/<span class="hljs-number">6</span>.<span class="hljs-number">2</span> TBS/<span class="hljs-number">044103</span> Mobile Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> MicroMessenger/<span class="hljs-number">6.6.7.132</span><span class="hljs-number">0</span>(<span class="hljs-number">0</span>x<span class="hljs-number">26060737</span>) NetType/WIFI Language/zh_CN<br></code></pre></td></tr></table></figure><p>将原来的长度为200改为400即可</p><p>修改之后，进行测试。</p><p>OK~<br>问题解决<br>emmmm，就是将agent字段长度加长点…<br>于是我又水了一篇???</p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>String、StringBuffer、StringBuilder有什么区别？</title>
    <link href="/2018/06/07/2018-06-07-String/"/>
    <url>/2018/06/07/2018-06-07-String/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>先说说String和StringBuffer/StringBuilder：</p><ul><li><p>String是标准的不可变类，是一个字符串常量池，并且声明的对象在方法中是唯一存在的。</p></li><li><p>StringBuffer/StringBuilder对象的值是可以改变的，并且值改变以后，对象引用不会发生改变;两者对象在构造过程中，首先按照默认大小申请一个字符数组，由于会不断加入新数据，当超过默认大小后，会创建一个更大的数组，并将原先的数组内容复制过来，再丢弃旧的数组。</p></li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>StringBuffer/StringBuilder听起来没啥区别…<br>唯一需要注意的是：</p><ul><li><p>StringBuffer是线程安全的，但是StringBuilder是线程不安全的。</p></li><li><p>在字符串内容不经常发生变化的业务场景优先使用String类。例如：常量声明、少量的字符串拼接操作等。如果有大量的字符串内容拼接，避免使用String与String之间的“+”操作，因为这样会产生大量无用的中间对象，耗费空间且执行效率低下（新建对象、回收对象花费大量时间）。</p></li></ul><ul><li>在频繁进行字符串的运算（如拼接、替换、删除等），并且运行在多线程环境下，建议使用StringBuffer，例如XML解析、HTTP参数解析与封装。</li></ul><ul><li>在频繁进行字符串的运算（如拼接、替换、删除等），并且运行在单线程环境下，建议使用StringBuilder，例如SQL语句拼装、JSON封装等。</li></ul>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于理财的一些想法</title>
    <link href="/2018/06/03/2018-06-03-financing/"/>
    <url>/2018/06/03/2018-06-03-financing/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写这篇博客的缘由是因为：</p><blockquote><p>2016年6月份-2017年12月份<br>我参与了民泰互联网金融平台的开发工作</p></blockquote><h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><p>亲自参与开发过理财平台，比较明白整个业务的流程吧。<br>这好像和购买理财没啥关系哈哈哈哈哈<br>我参与的这个平台由于种种原因，现在不卖理财了。<br>所以我后面所说的，不是这个平台的。属于别的理财平台<br>如果有点闲钱的话，我用的招商银行，把钱存到朝朝盈里，虽然可以随时将钱进出，隔日在算利息，也是挺便捷方便的。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>上个月中旬投了个9%年化收益率，产品周期为15天的短期保本型产品<br>收益计算方法很简单=本金乘以9%/365*15<br>所以最后收到的利息为147.95<br>到期之后直接提现40147.95元<br>当然了，这个只是个理财，靠这个赚钱是不可能的QAQ，想靠这个赚钱，首先你手头得有至少10万才行，而且是闲置的存款<br>投资产品周期比较长的产品，收益率才会高。</p><p>在5月底提现了这笔钱，由于这个平台提现还得自己出提现手续费。4万提现得付手续费20元，哈哈哈哈，不过新注册的有一个提现手续费券，我提现之后就没用了这个平台。。。</p><p>昨晚我看的另外一个平台，我投资的是年化收益率为8%，产品周期为3个月(90天)的产品。<br>投了45000，因为送了新人注册的红包，所以应该充值45000的，可以用100红包，所以只需要充值44900即可，平台的福利还算不错的。<br>本金45000，8%90天所以计算出来的利息为：887.67<br>相比朝朝盈的收益还是比较可观的。唯一不方便的是，这45000处理冻结状态，是不可提现的。</p><h2 id="如何理财"><a href="#如何理财" class="headerlink" title="如何理财"></a>如何理财</h2><p>这个应该是由专业的理财师来说的，我作为一个项目工程师，只是参与了理财项目的开发，哈哈哈，在这里也顺便说几句吧。 </p><ul><li>首先保证养活自己（别全投了）</li><li>手头有闲钱</li><li>近端时期不会有资金需求，比如买房、装修、同学扎堆结婚。。</li><li>没人向你借钱</li><li>存银行不如买理财额</li><li>好好赚钱吧，不然怎么娶媳妇呢，嗯？</li><li>土豪可忽略理财</li></ul><p>最后，理财不是赚钱的手段，还得努力创造自己的社会价值哦。</p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从handsome搬家到Yodu的缘由</title>
    <link href="/2018/06/01/2018-06-01-handsomeToYodu/"/>
    <url>/2018/06/01/2018-06-01-handsomeToYodu/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>为什么要搬家，更换主题？</p><p>因为苦于无法解决<a href="http://niaobulashi.com/">鸟不拉屎</a>站点访问速度过于慢（现在还是不快），找了很多种原因，以为是Linux系统的原因，还以为是mysql数据库的原因，最后都试过一遍。<br>每次都是从磁盘格式化，从头来过！<br>重新搭建环境安装：mysql、apache、php服务。<br>不下5遍，我都可以闭着眼睛来手动安装了（QAQ）<br>还是没有解决我的站点访问过慢的问题。也试过又拍云CDN服务，没弄好QAQ，我还是太挫了</p><p>为了寻找解决方法，我选择了逃避，选择了更换主题，换一个简便的，加载不那么多的主题试试，在我之前的友链里，就发现了现在这样子的，很简洁，于是我就下定决心，换上Yodu主题。</p><p>果然换上之后，在没有任何cdn的作用下，明显比之前块多了QAQ<br>再次主题下发第一篇博客，以此纪念过去的handsome，并迎来Yodu</p><p>在此，并没有冒犯handsome的意思，实在是因为我太蠢了QAQ，站点奇卡无比的痛楚，一下子就挡住了流量QAQ</p><p>虽然上班已有两年多了，还是想给自己充充电，只有下班了才有时间来搭理博客。写写东西，叙叙感悟。</p><p>我会在路上努力的追赶你们的。</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谈谈你对 Java 平台的理解?</title>
    <link href="/2018/05/30/2018-05-30-think-java/"/>
    <url>/2018/05/30/2018-05-30-think-java/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>先谈谈我的理解：</p><p>一次编译，永久执行。依赖于jre的运行环境，jdk提供核心类库，java源代码经过javac编译为.class文件，.class文件经过JVM解析或编译运行，无需过多关心不同操作系统的差异性。</p><h2 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h2><p>Java 本身是一种面向对象的语言，最显著的特性有两个方面，一是所谓的“<strong>书写一次，到处运行</strong>”（Write once, run anywhere），能够非常容易地获得跨平台能力；另外就是<strong>垃圾收集</strong>（GC, Garbage Collection），Java 通过垃圾收集器（Garbage Collector）回收分配内存，大部分情况下，程序员不需要自己操心内存的分配和回收。</p><p>我们日常会接触到 JRE（Java Runtime Environment）或者 JDK（Java Development Kit）。 JRE，也就是 Java 运行环境，包含了 JVM 和 Java 类库，以及一些模块等。而 JDK 可以看作是 JRE 的一个超集，提供了更多工具，比如编译器、各种诊断工具等。</p><p>对于“Java 是解释执行”这句话，这个说法不太准确。我们开发的 Java 的源代码，首先通过 Javac 编译成为字节码（bytecode），然后，在运行时，通过 <strong>Java 虚拟机</strong>（JVM）内嵌的解释器将字节码转换成为最终的机器码。但是常见的 JVM，比如我们大多数情况使用的 Oracle JDK 提供的 Hotspot JVM，都提供了 JIT（Just-In-Time）编译器，也就是通常所说的动态编译器，JIT 能够在运行时将热点代码编译成机器码，这种情况下部分热点代码就属于编译执行，而不是解释执行了。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>其实这个问题，问得有点笼统。题目本身是非常开放的，往往考察的是多个方面，比如，基础知识理解是否很清楚；是否掌握 Java 平台主要模块和运行原理等。很多面试者会在这种问题上吃亏，稍微紧张了一下，不知道从何说起，就给出个很简略的回答。</p><p>对于这类笼统的问题，你需要尽量表现出自己的思维深入并系统化，Java 知识理解得也比较全面，一定要避免让面试官觉得你是个“知其然不知其所以然”的人。毕竟明白基本组成和机制，是日常工作中进行问题诊断或者性能调优等很多事情的基础，相信没有招聘方会不喜欢“热爱学习和思考”的面试者。</p><p>即使感觉自己的回答不是非常完善，也不用担心。我个人觉得这种笼统的问题，有时候回答得稍微片面也很正常，大多数有经验的面试官，不会因为一道题就对面试者轻易地下结论。通常会尽量引导面试者，把他的真实水平展现出来，这种问题就是做个开场热身，面试官经常会根据你的回答扩展相关问题。</p><h2 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h2><p>回归正题，对于 Java 平台的理解，可以从很多方面简明扼要地谈一下，例如：Java 语言特性，包括泛型、Lambda 等语言特性；基础类库，包括集合、IO/NIO、网络、并发、安全等基础类库。对于我们日常工作应用较多的类库，面试前可以系统化总结一下，有助于临场发挥。</p><p>或者谈谈 JVM 的一些基础概念和机制，比如 Java 的类加载机制，常用版本 JDK（如 JDK 8）内嵌的 Class-Loader，例如 Bootstrap、 Application 和 Extension Class-loader；类加载大致过程：加载、验证、链接、初始化（这里参考了周志明的《深入理解 Java 虚拟机》，非常棒的 JVM 上手书籍）；自定义 Class-Loader 等。还有垃圾收集的基本原理，最常见的垃圾收集器，如 SerialGC、Parallel GC、 CMS、 G1 等，对于适用于什么样的工作负载最好也心里有数。这些都是可以扩展开的领域，我会在后面的专栏对此进行更系统的介绍。</p><p>当然还有 JDK 包含哪些工具或者 Java 领域内其他工具等，如编译器、运行时环境、安全工具、诊断和监控工具等。这些基本工具是日常工作效率的保证，对于我们工作在其他语言平台上，同样有所帮助，很多都是触类旁通的。</p><p>下图是我总结的一个相对宽泛的蓝图供你参考。<br><img src="/usr/image/article/Java/01/aboutJava.png" alt="Alt test"></p><p>不再扩展了，回到前面问到的<em><strong>解释执行</strong></em>和<em><strong>编译执行</strong></em>的问题。有些面试官喜欢在特定问题上“刨根问底儿”，因为这是进一步了解面试者对知识掌握程度的有效方法，我稍微深入探讨一下。</p><p>众所周知，我们通常把 Java 分为编译期和运行时。这里说的 Java 的编译和 C/C++ 是有着不同的意义的，Javac 的编译，编译 Java 源码生成“.class”文件里面实际是<em><strong>字节码</strong></em>，而不是可以直接执行的机器码。<strong>Java 通过字节码和 Java 虚拟机（JVM）这种跨平台的抽象，屏蔽了操作系统和硬件的细节，这也是实现“一次编译，到处执行”的基础</strong>。</p><p>在运行时，JVM 会通过类加载器（Class-Loader）加载字节码，解释或者编译执行。就像我前面提到的，主流 Java 版本中，如 JDK 8 实际是解释和编译混合的一种模式，即所谓的混合模式（-Xmixed）。通常运行在 server 模式的 JVM，会进行上万次调用以收集足够的信息进行高效的编译，client 模式这个门限是 1500 次。Oracle Hotspot JVM 内置了两个不同的 JIT compiler，C1 对应前面说的 client 模式，适用于对于启动速度敏感的应用，比如普通 Java 桌面应用；C2 对应 server 模式，它的优化是为长时间运行的服务器端应用设计的。默认是采用所谓的分层编译（TieredCompilation）。这里不再展开更多 JIT 的细节，没必要一下子就钻进去，我会在后面介绍分层编译的内容。</p><p>Java 虚拟机启动时，可以指定不同的参数对运行模式进行选择。 比如，指定“-Xint”，就是告诉 JVM 只进行解释执行，不对代码进行编译，这种模式抛弃了 JIT 可能带来的性能优势。毕竟解释器（interpreter）是逐条读入，逐条解释运行的。与其相对应的，还有一个“-Xcomp”参数，这是告诉 JVM 关闭解释器，不要进行解释执行，或者叫作最大优化级别。那你可能会问这种模式是不是最高效啊？简单说，还真未必。“-Xcomp”会导致 JVM 启动变慢非常多，同时有些 JIT 编译器优化方式，比如分支预测，如果不进行 profiling，往往并不能进行有效优化。</p><p>除了我们日常最常见的 Java 使用模式，其实还有一种新的编译方式，即所谓的 AOT（Ahead-of-Time Compilation），直接将字节码编译成机器代码，这样就避免了 JIT 预热等各方面的开销，比如 Oracle JDK 9 就引入了实验性的 AOT 特性，并且增加了新的 jaotc 工具。利用下面的命令把某个类或者某个模块编译成为 AOT 库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">jaotc --output libHelloWorld.so HelloWorld.class<br>jaotc --output libjava.base.so --<span class="hljs-keyword">module</span> java.base<br></code></pre></td></tr></table></figure><p>然后，在启动时直接指定就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java -XX:AOTLibrary=./libHelloWorld.so,./libjava.base.so HelloWorld<br></code></pre></td></tr></table></figure><p>而且，Oracle JDK 支持分层编译和 AOT 协作使用，这两者并不是二选一的关系。如果你有兴趣，可以参考相关文档：<a href="http://openjdk.java.net/jeps/295%E3%80%82AOT">http://openjdk.java.net/jeps/295。AOT</a> 也不仅仅是只有这一种方式，业界早就有第三方工具（如 GCJ、Excelsior JET）提供相关功能。</p><p>另外，JVM 作为一个强大的平台，不仅仅只有 Java 语言可以运行在 JVM 上，本质上合规的字节码都可以运行，Java 语言自身也为此提供了便利，我们可以看到类似 Clojure、Scala、Groovy、JRuby、Jython 等大量 JVM 语言，活跃在不同的场景。</p><p>今天，我简单介绍了一下 Java 平台相关的一些内容，目的是提纲挈领地构建一个整体的印象，包括 Java 语言特性、 核心类库与常用第三方类库、Java 虚拟机基本原理和相关工具，希望对你有所帮助。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://time.geekbang.org/column/article/6845">https://time.geekbang.org/column/article/6845</a></p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谈谈你对Java异常处理机制的理解？</title>
    <link href="/2018/05/30/2018-05-30-exception/"/>
    <url>/2018/05/30/2018-05-30-exception/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>先谈谈我的理解：异常处理机制可以说是让我们编写的程序运行起来更加的健壮，无论是在程序调试、运行期间发生的异常情况的捕获，都提供的有效的补救动作，任何业务逻辑都会存在异常情况，这时只需要记录这些异常情况，抛出异常，绝不能生吞异常，不要再finally中处理返回值。</p><p>先丢个问题：<strong>请对比 Exception 和 Error，另外，运行时异常与一般异常有什么区别？</strong></p><hr><h2 id="经典回答"><a href="#经典回答" class="headerlink" title="经典回答"></a>经典回答</h2><p>Exception 和 Error 都是继承了 <strong>Throwable 类</strong>，在 Java 中只有 Throwable 类型的实例才可以被抛出（throw）或者捕获（catch），它是异常处理机制的基本组成类型。</p><p>Exception 和 Error 体现了 Java 平台设计者对不同异常情况的分类。</p><p>Exception 是程序正常运行中，可以预料的意外情况，可能并且应该被捕获，进行相应处理。</p><p>Error 是指在正常情况下，不大可能出现的情况，绝大部分的 Error 都会导致程序（比如 JVM 自身）处于非正常的、不可恢复状态。既然是非正常情况，所以不便于也不需要捕获，常见的比如 OutOfMemoryError 之类，都是 Error 的子类。</p><p>Exception 又分为<strong>可检查（checked）异常</strong>和<strong>不检查（unchecked）异常</strong>，可检查异常在源代码里必须显式地进行捕获处理，这是编译期检查的一部分。前面我介绍的不可查的 Error，是 Throwable 不是 Exception。</p><p>不检查异常就是所谓的运行时异常，类似 NullPointerException、ArrayIndexOutOfBoundsException 之类，通常是可以编码避免的逻辑错误，具体根据需要来判断是否需要捕获，并不会在编译期强制要求。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>分析 Exception 和 Error 的区别，是从概念角度考察了 Java 处理机制。总的来说，还处于理解的层面。<br>我们在日常编程中，如何处理好异常是比较考验功底的，我觉得需要掌握两个方面。</p><p>第一，理解 <em><strong>Throwable</strong></em>、<em><strong>Exception</strong></em>、<em><strong>Error</strong></em> 的设计和分类。比如，掌握那些应用最为广泛的子类，以及如何自定义异常等。</p><p>你了解Error、Exception或者RuntimeException?<br>画了一个简单的类图，并列出来典型例子，可以给你作为参考，至少做到基本心里有数。<br><img src="/usr/image/article/Java/01/Throwable.png" alt="异常关系类比图"></p><p>这里也可以思考下：NoClassDefFoundError 和 ClassNotFoundException 有什么区别?</p><p>第二，理解 Java 语言中操作 Throwable 的元素和实践。掌握最基本的语法是必须的，如 try-catch-finally 块，throw、throws 关键字等。与此同时，也要懂得如何处理典型场景。</p><p>异常处理代码比较繁琐，比如我们需要写很多千篇一律的捕获代码，或者在 finally 里面做一些资源回收工作。随着 Java 语言的发展，引入了一些更加便利的特性，比如 try-with-resources 和 multiple catch，具体可以参考下面的代码段。在编译时期，会自动生成相应的处理逻辑，比如，自动按照约定俗成 close 那些扩展了 AutoCloseable 或者 Closeable 的对象。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">try</span> (BufferedReader br = <span class="hljs-keyword">new</span> <span class="hljs-type">BufferedReader</span>(…);<br>     BufferedWriter writer = <span class="hljs-keyword">new</span> <span class="hljs-type">BufferedWriter</span>(…)) &#123;<span class="hljs-comment">// Try-with-resources</span><br><span class="hljs-comment">// do something</span><br><span class="hljs-keyword">catch</span> ( IOException | XEception e) &#123;<span class="hljs-comment">// Multiple catch</span><br>   <span class="hljs-comment">// Handle it</span><br>&#125; <br></code></pre></td></tr></table></figure><h2 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h2><p>前面谈的大多是概念性的东西，下面我来谈些实践中的选择，我会结合一些代码用例进行分析。</p><p>先开看第一个吧，下面的代码反映了异常处理中哪些不当之处?</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">try &#123;<br>  <span class="hljs-regexp">//</span> 业务代码<br>  <span class="hljs-regexp">//</span> …<br>  Thread.sleep(<span class="hljs-number">1000</span>L);<br>&#125; catch (Exception e) &#123;<br>  <span class="hljs-regexp">//</span> Ignore it<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码作为一段实验代码，它是没有任何问题的，但是在产品代码中，通常都不允许这样处理。你先思考一下这是为什么呢？</p><p>我们先来看看<a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html#printStackTrace--">printStackTrace()</a>尤其是对于分布式系统，如果发生异常，但是无法找到堆栈轨迹（stacktrace），这纯属是为诊断设置障碍。所以，最好使用产品日志，详细地输出到日志系统里。的文档，开头就是“Prints this throwable and its backtrace to the standard error stream”。问题就在这里，在稍微复杂一点的生产系统中，标准出错（STERR）不是个合适的输出选项，因为你很难判断出到底输出到哪里去了。</p><p>尤其是对于分布式系统，如果发生异常，但是无法找到堆栈轨迹（stacktrace），这纯属是为诊断设置障碍。所以，最好使用产品日志，详细地输出到日志系统里。</p><p>我们接下来看下面的代码段，体会一下Throw early, catch late 原则。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">readPreferences</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> fileName</span>)</span>&#123;<br>     <span class="hljs-comment">//...perform operations... </span><br>    InputStream <span class="hljs-keyword">in</span> = <span class="hljs-keyword">new</span> FileInputStream(fileName);<br>     <span class="hljs-comment">//...read the preferences file...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果 fileName 是 null，那么程序就会抛出 NullPointerException，但是由于没有第一时间暴露出问题，堆栈信息可能非常令人费解，往往需要相对复杂的定位。这个 NPE 只是作为例子，实际产品代码中，可能是各种情况，比如获取配置失败之类的。在发现问题的时候，第一时间抛出，能够更加清晰地反映问题。</p><p>我们可以修改一下，让问题“throw early”，对应的异常信息就非常直观了。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public void read<span class="hljs-constructor">Preferences(String <span class="hljs-params">filename</span>)</span> &#123;<br>    Objects. require<span class="hljs-constructor">NonNull(<span class="hljs-params">filename</span>)</span>;<br>    <span class="hljs-comment">//...perform other operations... </span><br>    InputStream <span class="hljs-keyword">in</span> = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileInputStream(<span class="hljs-params">filename</span>)</span>;<br>     <span class="hljs-comment">//...read the preferences file...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>至于“catch late”，其实是我们经常苦恼的问题，捕获异常后，需要怎么处理呢？最差的处理方式，就是我前面提到的“生吞异常”，本质上其实是掩盖问题。如果实在不知道如何处理，可以选择保留原有异常的 cause 信息，直接再抛出或者构建新的异常抛出去。在更高层面，因为有了清晰的（业务）逻辑，往往会更清楚合适的处理方式是什么。</p><p>有的时候，我们会根据需要自定义异常，这个时候除了保证提供足够的信息，还有两点需要考虑：</p><ul><li><p>是否需要定义成 Checked Exception，因为这种类型设计的初衷更是为了从异常情况恢复，作为异常设计者，我们往往有充足信息进行分类。</p></li><li><p>在保证诊断信息足够的同时，也要考虑避免包含敏感信息，因为那样可能导致潜在的安全问题。如果我们看 Java 的标准类库，你可能注意到类似 java.net.ConnectException，出错信息是类似“ Connection refused (Connection refused)”，而不包含具体的机器名、IP、端口等，一个重要考量就是信息安全。类似的情况在日志中也有，比如，用户数据一般是不可以输出到日志里面的。</p></li></ul><p>业界有一种争论（甚至可以算是某种程度的共识），Java 语言的 Checked Exception 也许是个设计错误，反对者列举了几点：</p><ul><li><p>Checked Exception 的假设是我们捕获了异常，然后恢复程序。但是，其实我们大多数情况下，根本就不可能恢复。Checked Exception 的使用，已经大大偏离了最初的设计目的。</p></li><li><p>Checked Exception 不兼容 functional 编程，如果你写过 Lambda/Stream 代码，相信深有体会。</p></li></ul><p>从性能角度来审视一下 Java 的异常处理机制，这里有两个可能会相对昂贵的地方：</p><ul><li>try-catch 代码段会产生额外的性能开销，或者换个角度说，它往往会影响 JVM 对代码进行优化，所以建议仅捕获有必要的代码段，尽量不要一个大的 try 包住整段的代码；与此同时，利用异常控制代码流程，也不是一个好主意，远比我们通常意义上的条件语句（if/else、switch）要低效。</li><li>Java 每实例化一个 Exception，都会对当时的栈进行快照，这是一个相对比较重的操作。如果发生的非常频繁，这个开销可就不能被忽略了。</li></ul><p>所以，对于部分追求极致性能的底层类库，有种方式是尝试创建不进行栈快照的 Exception。这本身也存在争议，因为这样做的假设在于，我创建异常时知道未来是否需要堆栈。问题是，实际上可能吗？小范围或许可能，但是在大规模项目中，这么做可能不是个理智的选择。如果需要堆栈，但又没有收集这些信息，在复杂情况下，尤其是类似微服务这种分布式系统，这会大大增加诊断的难度。</p><p>当我们的服务出现反应变慢、吞吐量下降的时候，检查发生最频繁的 Exception 也是一种思路。关于诊断后台变慢的问题，我会在后面的 Java 性能基础模块中系统探讨。</p><p>今天，我从一个常见的异常处理概念问题，简单总结了 Java 异常处理的机制。并结合代码，分析了一些普遍认可的最佳实践，以及业界最新的一些异常使用共识。最后，我分析了异常性能开销，希望对你有所帮助。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://time.geekbang.org/column/article/6849">https://time.geekbang.org/column/article/6849</a></p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows系统下安装和移除apache服务</title>
    <link href="/2018/05/29/2018-05-29-ssl/"/>
    <url>/2018/05/29/2018-05-29-ssl/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>实验环境：</strong>CentOS 7.4 64位<br><strong>内核版本：</strong>Linux version 3.10.0-693.2.2.el7.x86_64<br><strong>Nginx版本：</strong>nginx-1.14.0</p><p>Let’s Encrypt是一个免费的、自动化、开放的证书颁发机构。由Mozilla、Cisco、Chrome、facebook、Akamai等众多公司和机构发起的，其安全稳定及其可靠。具体信息可以去letsencrypt官方网站了解详情。</p><p>今天我们就充分利用Lets Encrypt让你的网站实现https加密。</p><p>官网：<a href="https://letsencrypt.org/">https://letsencrypt.org/</a></p><h2 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">$ yum install -y epel-release<br></code></pre></td></tr></table></figure><p>Certbot是Let’s Encrypt官方指定推荐的客户端。通过 Certbot，你可以自动化部署 Let’s Encrypt SSL证书，以便为网站加上HTTPS加密支持。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">$ yum install certbot<br>$ certbot certonly<br>Saving debug log to /var/log/letsencrypt/letsencrypt.log<br>How would you like to authenticate with the ACME CA?<br><span class="hljs-comment">//你是希望如何使用ACME CA进行身份验证？</span><br>-------------------------------------------------------------------------------<br>1: Place files in webroot directory (webroot)<br><span class="hljs-comment">//将文件放在webroot目录</span><br>2: Spin up a temporary webserver (standalone)<br><span class="hljs-comment">//使用临时Web服务器（独立目录）</span><br>-------------------------------------------------------------------------------<br>Select the appropriate number [1-2] then [enter] (press <span class="hljs-emphasis">&#x27;c&#x27;</span> to cancel):1 【选择1回车】<br>Enter email address (used for urgent renewal and security notices) (Enter <span class="hljs-emphasis">&#x27;c&#x27;</span> to<br>cancel):su@renwole.com【输入您的邮箱地址，用于紧急更新和安全通知】<br>Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org<br>-------------------------------------------------------------------------------<br>Please read the Terms of Service at<br>https://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf. You must agree<br>in order to register with the ACME server at<br>https://acme-v01.api.letsencrypt.org/directory<br>-------------------------------------------------------------------------------<br>(A)gree/(C)ancel: A【选择A回车同意服务条款，C为拒绝】<br>-------------------------------------------------------------------------------<br>Would you be willing to share your email address with the Electronic Frontier<br>Foundation, a founding partner of the Let&#x27;s Encrypt project and the non-profit<br>organization that develops Certbot? We&#x27;d like to send you email about EFF and<br>our work to encrypt the web, protect its users and defend digital rights.<br>-------------------------------------------------------------------------------<br>(Y)es/(N)o:Y【您是否愿意分享您的电子邮件地址，建议选择Y回车】<br>Please enter in your domain name(s) (comma and/or space separated) (Enter <span class="hljs-emphasis">&#x27;c&#x27;</span><br>to cancel): blog.renwole.com【输入域名回车】<br>Obtaining a new certificate<br>Performing the following challenges:<br>http-01 challenge for blog.renwole.com<br>Select the webroot for blog.renwole.com:<br>-------------------------------------------------------------------------------<br>1: Enter a new webroot<br><span class="hljs-comment">//输入网站绝对路径</span><br>-------------------------------------------------------------------------------<br>Press 1 [enter] to confirm the selection (press <span class="hljs-emphasis">&#x27;c&#x27;</span> to cancel):1【选择数字1回车】<br>Input the webroot for blog.renwole.com: (Enter <span class="hljs-emphasis">&#x27;c&#x27;</span> to cancel):/home/www/blog.renwole.com【输入网站所在绝对路径回车】<br>Waiting for verification...<br>Waiting for verification...<br>Cleaning up challenges<br>Generating key (2048 bits): /etc/letsencrypt/keys/0001_key-certbot.pem<br>Creating CSR: /etc/letsencrypt/csr/0001_csr-certbot.pem<br>IMPORTANT NOTES:<br><span class="hljs-bullet">- </span>Congratulations! Your certificate and chain have been saved at<br>/etc/letsencrypt/live/blog.renwole.com/fullchain.pem. Your cert<br>will expire on 2017-08-09. To obtain a new or tweaked version of<br>this certificate in the future, simply run certbot again. To<br>non-interactively renew <span class="hljs-strong">*all*</span> of your certificates, run &quot;certbot<br>renew&quot;<br><span class="hljs-bullet">- </span>If you like Certbot, please consider supporting our work by:<br>Donating to ISRG / Let&#x27;s Encrypt: https://letsencrypt.org/donate<br>Donating to EFF:<br></code></pre></td></tr></table></figure><p>恭喜!您的SSL证书和密钥链接已保存，你的证书将于2017-08-09到期。<br>注意：这里需要说明，在生成证书之前，你必须保证nginx 443端口是运行状态，否则会生成证书失败。</p><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><h6 id="键入certbot-certonly报错"><a href="#键入certbot-certonly报错" class="headerlink" title="键入certbot certonly报错"></a>键入certbot certonly报错</h6><p>安装之后，键入certbot certonly，可能会提示报错，如图所示：<br><img src="/usr/image/article/bashProfile/02/cerbotCertonly.png" alt="Alt test"></p><p>解决方案：<br>这块我确实不太明白，可能就是版本的问题，缺少python的配置库，我也是查找了好多资料解决的 ::aru:crying:: </p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>pip uninstall requests<br><span class="hljs-variable">$ </span>pip uninstall urllib3<br><span class="hljs-variable">$ </span>yum remove python-urllib3<br><span class="hljs-variable">$ </span>yum remove python-requests<br><span class="hljs-variable">$ </span>yum install python-urllib3<br><span class="hljs-variable">$ </span>yum install python-requests<br></code></pre></td></tr></table></figure><p>按照提示来就OK<br>最后在键入$ certbot certonly<br>按照上面的安装步骤提示走一遍，在最后一步输入域名时，可能会报错，此时停下来。</p><p>键入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo certbot certonly --webroot --webroot-path=<span class="hljs-regexp">/home/</span>hulang<span class="hljs-regexp">/www/</span>niaobulashi -d niaobulashi.com<br></code></pre></td></tr></table></figure><p>最终会生成letsencrypt的证书文件：包括证书私钥文件privkey.pem、证书链文件fullchain.pem<br><img src="/usr/image/article/bashProfile/02/LetsEncryptSuccess.png" alt="Alt test"></p><h4 id="查看证书信息"><a href="#查看证书信息" class="headerlink" title="查看证书信息"></a>查看证书信息</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>certbot certificates<br></code></pre></td></tr></table></figure><p><img src="/usr/image/article/bashProfile/02/LetsEncryptInfo.png" alt="Alt test"></p><h2 id="自动续订"><a href="#自动续订" class="headerlink" title="自动续订"></a>自动续订</h2><p>Certbot可以配置为在证书过期之前自动更新证书。由于Let’s Encrypt SSL证书有效期时间为90天，所以建议您利用此功能。您可以通过运行以下命令来测试证书的自动续订：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ sudo certbot <span class="hljs-comment">--nginx certonly</span><br></code></pre></td></tr></table></figure><p>如果以上正常工作，你可以通过添加运行以下操作的cron或systemd定时任务安排自动更新：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>certbot renew<br></code></pre></td></tr></table></figure><p>我们写一个自动执行脚本，建议每小时执行一次：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>sudo crontab -e<br></code></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>*/<span class="hljs-number">6</span> * * * /<span class="hljs-keyword">usr</span>/bin/certbot renew --quiet &amp;&amp; /bin/systemctl restart nginx<br></code></pre></td></tr></table></figure><p>保存并退出！<br>通过命令查看是否添加成功：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ crontab -l<br><span class="hljs-number">0</span> *<span class="hljs-regexp">/6 * * * /u</span>sr<span class="hljs-regexp">/bin/</span>certbot renew --quiet &amp;&amp; <span class="hljs-regexp">/bin/</span>systemctl restart nginx<br></code></pre></td></tr></table></figure><p>重启crontab</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>systemctl restart crond.service<br></code></pre></td></tr></table></figure><p>证书是否续订成功，可以通过以下命令管理查看证书信息：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>certbot certificates<br></code></pre></td></tr></table></figure><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>接下来修改Nginx配置文件，修改sever段，去掉相应注释，将生成的SSL证书填写到ssl_certificate后面，将生成的密钥填写到ssl_certificate_key后面，保存并重启nginx服务器即可。</p><p>这块配置文件我其实不太熟，最主要的是反代那里，不懂的千万先别乱加内容(ó﹏ò｡)我可是尝到苦头了。你只需要注意配置上证书信息即可，别的先别管啦</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ vi <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/nginx.conf<br>server &#123;<br> listen <span class="hljs-number">443</span> ssl;<br> ssl_certificate <span class="hljs-regexp">/etc/</span>letsencrypt<span class="hljs-regexp">/live/</span>blog.renwole.com/fullchain.pem;<br> ssl_certificate_key <span class="hljs-regexp">/etc/</span>letsencrypt<span class="hljs-regexp">/live/</span>blog.renwole.com/privkey.pem;<br><span class="hljs-comment"># ssl_session_cache shared:SSL:1m;</span><br> ssl_session_timeout <span class="hljs-number">5</span>m;<br><span class="hljs-comment"># ssl_ciphers HIGH:!aNULL:!MD5;</span><br> ssl_prefer_server_ciphers on;<br><span class="hljs-comment"># location / &#123;</span><br> <span class="hljs-comment"># root html;</span><br> <span class="hljs-comment"># index index.html index.htm;</span><br> <span class="hljs-comment"># &#125;</span><br> &#125;<br></code></pre></td></tr></table></figure><p>使用谷歌浏览器访问<a href="https://blog.my.com/">https://blog.my.com/</a> 可以看到绿色的安全小锁图标，说明网站已经https加密成功。</p><p><img src="/usr/image/article/bashProfile/02/https.png" alt="Alt test"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://mp.weixin.qq.com/s/RAf2STrsqbmO2Q3YqgAujw">https://mp.weixin.qq.com/s/RAf2STrsqbmO2Q3YqgAujw</a><br><a href="https://www.uumoon.cn/article/index/comm/66.html">https://www.uumoon.cn/article/index/comm/66.html</a></p>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows系统下安装和移除apache服务</title>
    <link href="/2018/05/27/2018-05-27-windowsApache/"/>
    <url>/2018/05/27/2018-05-27-windowsApache/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>用windows系统本地搭建apache，有时会遇到糟心的问题，想卸载了重装，这时已经将服务挂载在windows服务列表中，于是需要将服务卸载掉，这里先安装在卸载吧</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>直接放出官网链接：<a href="https://www.apachehaus.com/cgi-bin/download.plx">windows版本apache下载地址</a><br>选择相应的版本下载即可<br>解压到目标目录下<br>使用管理员进入cmd命令窗口模式下<br>cd apache的bin目录下</p><pre><code>cd c:\Apache24\bin.\httpd.exe -k install -n apache</code></pre><p>提示：<br>Installing the ‘apache’ service<br>The ‘apache’ service is successfully installed.</p><p>查看windows服务:<br>进入win + R，键入services.msc<br>此时会找到服务名称为：apache的服务<br>右键启动即可</p><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>同理安装一样。。。<br>命令不一样罢了</p><pre><code>cd c:\Apache24\bin.\httpd.exe -k uninstall -n apache</code></pre><p>进入windows服务列表可以看到apache已移除</p><p>哦啦~</p>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Apache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lets Encrypt证书终于搞定了</title>
    <link href="/2018/05/22/2018-05-22-planToSSL/"/>
    <url>/2018/05/22/2018-05-22-planToSSL/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>啊啊啊，历经千辛万苦，终于把https给弄上去了，与我来说确实是不容易啊<br>有时间我再写个安装部署总结文档</p><p>我会在这个周末把我安装过程中遇到的问题好好总结一下，写一篇博客</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网站访问太慢了啊啊啊，不能忍</title>
    <link href="/2018/05/15/2018-05-15-slow/"/>
    <url>/2018/05/15/2018-05-15-slow/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近了解到CDN内容分发网络，有必要好好了解一下<br>不然网站访问太慢了，都失去访问的动力了<br>有必要弄个CDN。|´・ω・)ノ</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>歌曲Attention</title>
    <link href="/2018/05/09/2018-05-09-attention/"/>
    <url>/2018/05/09/2018-05-09-attention/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>You just want attention<br>你只是想引人注意</p><p>You don’t want my heart<br>并不是真想俘获我心</p><p>Maybe you just hate the thought of me with someone new<br>你只是不愿去想到我和别人会在一起</p><p>Yeah, you just want attention<br>你只是想引起我的注意</p><p>I knew from the start<br>从一开始我便心知肚明</p><p>You’re just making sure I’m never getting over you<br>你只是想确信我还是依然忘不掉你</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql数据库开发常见问题及优化</title>
    <link href="/2018/05/07/2018-05-07-mysql-question/"/>
    <url>/2018/05/07/2018-05-07-mysql-question/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>mysql 数据库是被广泛应用的关系型数据库，其体积小、支持多处理器、开源并免费的特性使其在<br>Internet 中小型网站中的使用率尤其高。在使用 mysql 的过程中不规范的 SQL 编写、非最优的策略选择都可能导致系统性能甚至功能上的缺陷。</p></blockquote><p>开发过程中 mysql 数据库设计及使用的常见问题，并提出相关优化方案。进行了一次小结，结合自己的工作经历及理解形成此文以供分享，希望能有助于各位同行解决工作中的相关问题。<br>本文将就以下三个问题进行展开：</p><ol><li>库表设计</li><li>慢SQL 问题</li><li>误操作、程序 bug 时怎么办</li></ol><h2 id="库表设计"><a href="#库表设计" class="headerlink" title="库表设计"></a>库表设计</h2><h4 id="引擎选择"><a href="#引擎选择" class="headerlink" title="引擎选择"></a>引擎选择</h4><p>在 mysql 5.1 中，引入了新的插件式存储引擎体系结构，允许将存储引擎加载到正在运新的 mysql 服务器中。使用 mysql 插件式存储引擎体系结构，允许数据库专业人员或者设计库表的软件开发人员为特定的应用需求选择专门的存储引擎，完全不需要管理任何特殊的应用编码要求，也无需考虑所有的底层实施细节。因此，尽管不同的存储引擎具有不同的能力，应用程序是与之分离的。此外，使用者可以在服务器、数据库和表格三个层级中存储引擎，提供了极大的灵活性。</p><p>mysql 常用的存储引擎包括 MYISAM、Innodb 和 Memory，其中各自的特点如下：</p><blockquote><p>1.MYISAM : 全表锁，拥有较高的执行速度，一个写请求请阻塞另外相同表格的所有读写请求，并发性能差，占用空间相对较小，mysql 5.5 及以下仅 MYISAM 支持全文索引，不支持事务。<br>2.Innodb：行级锁（SQL 都走索引查询），并发能力相对强，占用空间是 MYISAM 的 2.5 倍，不支持全文索引（5.6 开始支持），支持事务<br>3.Memory : 全表锁，存储在内存当中，速度快，但会占用和数据量成正比的内存空间且数据在 mysql 重启时会丢失。</p></blockquote><p>基于以上特性，建议绝大部份都设置为 innodb 引擎，特殊的业务再考虑选用 MYISAM 或 Memory ，如全文索引支持或极高的执行效率等。</p><h4 id="分表方法"><a href="#分表方法" class="headerlink" title="分表方法"></a>分表方法</h4><p>在数据库表使用过程中，为了减小数据库服务器的负担、缩短查询时间，常常会考虑做分表设计。分表分两种，一种是纵向分表（将本来可以在同一个表的内容，人为划分存储在为多个不同结构的表）和横向分表（把大的表结构，横向切割为同样结构的不同表）。</p><p>其中，纵向分表常见的方式有根据活跃度分表、根据重要性分表等。其主要解决问题如下：</p><ol><li>表与表之间资源争用问题；</li><li>锁争用机率小；</li><li>实现核心与非核心的分级存储，如UDB登陆库拆分成一级二级三级库</li><li>解决了数据库同步压力问题。</li></ol><p>横向分表是指根据某些特定的规则来划分大数据量表，如根据时间分表。其主要解决问题如下：</p><ol><li>单表过大造成的性能问题；</li><li>单表过大造成的单服务器空间问题。</li></ol><h4 id="索引问题"><a href="#索引问题" class="headerlink" title="索引问题"></a>索引问题</h4><p>索引是对数据库表中一个或多个列的值进行排序的结构，建立索引有助于更快地获取信息。 mysql 有四种不同的索引类型：</p><ol><li>主键索此 ( PRIMARY )</li><li>唯一索引 ( UNIQUE )</li><li>普通索引 ( INDEX )</li><li>全文索引（FULLTEXT , MYISAM 及 mysql 5.6 以上的 Innodb ）</li></ol><p>建立索引的目的是加快对表中记录的查找或排序，索引也并非越多越好，因为创建索引是要付出代价的：一是增加了数据库的存储空间，二是在插入和修改数据时要花费较多的时间维护索引。</p><p>在设计表或索引时，常出现以下几个问题：</p><ol><li>少建索引或不建索引。这个问题最突出，建议建表时 DBA 可以一起协助把关。</li><li>索引滥用。滥用索引将导致写请求变慢，拖慢整体数据库的响应速度（5.5 以下的 mysql 只能用到一个索引)。</li><li>从不考虑联合索引。实际上联合索引的效率往往要比单列索引的效率更高。</li><li>非最优列选择。低选择性的字段不适合建单列索引，如 status 类型的字段。</li></ol><h2 id="慢-SQL-问题"><a href="#慢-SQL-问题" class="headerlink" title="慢 SQL 问题"></a>慢 SQL 问题</h2><h4 id="导致慢-SQL-的原因"><a href="#导致慢-SQL-的原因" class="headerlink" title="导致慢 SQL 的原因"></a>导致慢 SQL 的原因</h4><p>在遇到慢 SQL 情况时，不能简单的把原因归结为 SQL 编写问题(虽然这是最常见的因素)，实际上导致慢 SQL 有很多因素，甚至包括硬件和 mysql 本身的 bug。根据出现的概率从大到小，罗列如下：</p><ol><li>SQL编写问题</li><li>锁</li><li>业务实例相互干绕对 IO/CPU 资源争用</li><li>服务器硬件</li><li>MYSQL BUG</li></ol><h4 id="由-SQL-编写导致的慢-SQL-优化"><a href="#由-SQL-编写导致的慢-SQL-优化" class="headerlink" title="由 SQL 编写导致的慢 SQL 优化"></a>由 SQL 编写导致的慢 SQL 优化</h4><p>针对SQL编写导致的慢 SQL，优化起来还是相对比较方便的。正如上一节提到的正确的使用索引能加快查询速度，那么我们在编写 SQL 时就需要注意与索引相关的规则：</p><ol><li>字段类型转换导致不用索引，如字符串类型的不用引号，数字类型的用引号等，这有可能会用不到索引导致全表扫描；</li><li>mysql 不支持函数转换，所以字段前面不能加函数，否则这将用不到索引；</li><li>不要在字段前面加减运算；</li><li>字符串比较长的可以考虑索引一部份减少索引文件大小，提高写入效率；</li><li>like % 在前面用不到索引；</li><li>根据联合索引的第二个及以后的字段单独查询用不到索引；</li><li>不要使用 select *；</li><li>排序请尽量使用升序 ;</li><li>or 的查询尽量用 union 代替 （Innodb）；</li><li>复合索引高选择性的字段排在前面；</li><li>order by / group by 字段包括在索引当中减少排序，效率会更高。</li></ol><p>除了上述索引使用规则外，SQL 编写时还需要特别注意一下几点：</p><ol><li>尽量规避大事务的 SQL，大事务的 SQL 会影响数据库的并发性能及主从同步；</li><li>分页语句 limit 的问题；</li><li>删除表所有记录请用 truncate，不要用 delete；</li><li>不让 mysql 干多余的事情，如计算；</li><li>输写 SQL 带字段，以防止后面表变更带来的问题，性能也是比较优的 ( 涉及到数据字典解析，请自行查询资料)；</li><li>在 Innodb上用 select count(*)，因为 Innodb 会存储统计信息；</li><li>慎用 Order by rand()。</li></ol><h2 id="分析诊断工具"><a href="#分析诊断工具" class="headerlink" title="分析诊断工具"></a>分析诊断工具</h2><p>在日常开发工作中，我们可以做一些工作达到预防慢 SQL 问题，比如在上线前预先用诊断工具对 SQL 进行分析。常用的工具有：</p><ol><li>mysqldumpslow</li><li>mysql profile</li><li>mysql explain</li></ol><p>具体使用及分析方法在此就不赘述，网上有丰富的资源可以参考。</p><h2 id="误操作、程序-bug-时怎么办"><a href="#误操作、程序-bug-时怎么办" class="headerlink" title="误操作、程序 bug 时怎么办"></a>误操作、程序 bug 时怎么办</h2><p>提出这个问题显然主要是针对刚开始工作的年轻同行们……实际上误操作和程序 bug 导致数据误删或者混乱的问题并非少见，但是刚入行的开发工作者会比较紧张。一个成熟的企业往往会有完善的数据管理规范和较丰富的数据恢复方案（初创公司除外），会进行数据备份和数据容灾。当你发现误操作或程序 bug 导致线上数据被误删或误改动时，一定不能慌乱，应及时与 DBA 联系，第一时间进行数据恢复（严重时直接停止服务），尽可能减少影响和损失。对于重要数据（如资金）的操作，在开发时一定要反复进行测试，确保没有问题后再上线。</p>]]></content>
    
    
    <categories>
      
      <category>程序笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux中常用Shell命令</title>
    <link href="/2018/05/04/2018-05-04-linux-shell/"/>
    <url>/2018/05/04/2018-05-04-linux-shell/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>作为项目工程师，接触Linux还是蛮多的，总结下常用的Shell命令</p><h2 id="打包与解压"><a href="#打包与解压" class="headerlink" title="打包与解压"></a>打包与解压</h2><p>项目上需要打包或者解压，常常用于备份或者上版，而打包常见格式为tar包、tar.gz包、war包这三种</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">打.tar包：tar -cvf backup_20180504.tar ./etc ./src<br>.tar包打.gz包：gzip backup_20180504.tar<br><br>解压.tar包：tar -xvf backup_20180504.tar<br>解压.tar.gz包：tar -xzvf backup_20180504.tar.gz<br><br>打.war包：jar -cvf backup_20180504.war ./etc ./src<br>解压.war包：jar -xvf backup_20180504.war<br><br>查看.tar文件内容：tar -tvf backup_20180504.tar<br>查看.gz文件内容：tar -tvzf backup_20180504.tar.gz<br></code></pre></td></tr></table></figure><h2 id="查看系统性能"><a href="#查看系统性能" class="headerlink" title="查看系统性能"></a>查看系统性能</h2><p>主要查看Linux系统磁盘、内存、服务进行占用空间等信息，详细就不多说</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">查看系统负载：df<br>性能分析：top<br>查看进程：ps -ef|grep 进程名称<br>查看主机ip：ifconfig<br>查看主机域名：hostname<br></code></pre></td></tr></table></figure><h2 id="比较大小"><a href="#比较大小" class="headerlink" title="比较大小"></a>比较大小</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">-ne 不等于<br>-gt 大于<br>-ge 大于等于<br>-lt 小于<br>-le 小于等于<br>-eq 等于 <br></code></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">移动文件：mv test1 相对路径或者绝对路径<br>替换文件名称：mv test1 test2<br>动态查看tomcat日志：tail -f catalina.log<br>复制文件：cp test1 test2<br>查看文件：cat test1<br>编辑文件：vi test1    启动编辑模式：i<br>保存退出：:wq<br>检查脚本语法：sh -n test.sh<br></code></pre></td></tr></table></figure><h2 id="查看端口服务"><a href="#查看端口服务" class="headerlink" title="查看端口服务"></a>查看端口服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">查看启用端口：netstat -lntp<br>查看启动服务：systemctl list-unit-files|grep enabled<br>搜索端口：netstat -aon|findstr <span class="hljs-string">&quot;8080&quot;</span><br></code></pre></td></tr></table></figure><h2 id="文件与用户所有者权限变更"><a href="#文件与用户所有者权限变更" class="headerlink" title="文件与用户所有者权限变更"></a>文件与用户所有者权限变更</h2><p>首先要名称文件的权限：读、写、执行</p><p><img src="/usr/image/article/developmentSkills/Shell/fileSafety.png" alt="Alt text"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">其中： 最前面那个 - 代表的是类型  <br>   中间那三个 rw- 代表的是所有者（user）  <br>   然后那三个 rw- 代表的是组群（group）  <br>   最后那三个 r--    代表的是其他人（other）  <br>  <br>然后我再解释一下后面那9位数：  <br>   r 表示文件可以被读（<span class="hljs-built_in">read</span>）  <br>   w 表示文件可以被写（write）  <br>   x 表示文件可以被执行（如果它是程序的话）  <br>   - 表示相应的权限还没有被授予  <br></code></pre></td></tr></table></figure><p>修改文件权限控制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">chmod -R 700 ./<span class="hljs-built_in">test</span><br>chmod -R 500 ./<span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>持续更新…</p>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux搭建mysql、apache、php服务总结</title>
    <link href="/2018/04/22/2018-04-22-linux-mysql-apache-php/"/>
    <url>/2018/04/22/2018-04-22-linux-mysql-apache-php/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="阿里云ESC实例配置"><a href="#阿里云ESC实例配置" class="headerlink" title="阿里云ESC实例配置"></a>阿里云ESC实例配置</h2><blockquote><p>对于新手，比如我，了解云服务无非就是阿里云和腾讯云，对于国外的服务器了解甚少。学生时代估计会有很实惠的打折优惠吧，反正我没遇到过（我大学的时候只知道玩，也没关注过这些~）。废话说了这么多，现在开始吧…<br>####实名认证<br>阿里云进行实名认证之后，入口：产品弹性计算云服务器ECS，选择合适的参数配置规格点击购买即可。<br>####查看实例<br>购买成功之后，可以从管理控制台云计算基础服务实例中查看。</p></blockquote><p><img src="/usr/image/article/bashProfile/01/aliyunManage.png" alt="Alt text"></p><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><blockquote><p>初始状态下点击更多，重置密码，该密码即为root密码，哦对了，设置完还需要重启，也在更多，点击重启即可，大概需要40秒吧。<br>####SecureCRT登录<br>登陆服务，个人推荐使用SecureCRT进行管理配置开发，键入root密码，好，现在进入Linux命令行的世界啦~</p></blockquote><h2 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h2><blockquote><p>Root用户拥有决定的权限，主要用户安全软件服务，修改系统环境属性等，不利于开发使用，所以让我们先给自己新建一个用户吧。<br>####使用Root新建用户<br>下列是root用户下键入的命令行：</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># adduser testuser#创建用户testuser</span><br>[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># passwd testuser #为用户testuser创建密码</span><br></code></pre></td></tr></table></figure><blockquote><p>此时在/home目录下已经创建了一个用户目录testuser</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># userdel testuser#删除用户testuser</span><br>[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># rm –rf * testuser   #删除用户testuser所在的目录</span><br></code></pre></td></tr></table></figure><p><img src="/usr/image/article/bashProfile/01/addUser.png" alt="Alt text"></p><p>注意各种密码要拿个别人看不到的小本本或者云笔记记着哦，找密码什么的最烦了。</p><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><blockquote><p>首先我都是先把数据库搭建好，个人偏爱mysql，navicat进行客户端管理，以下操作在root用户下进行。<br>####下载前准备<br>下载之前先检查是否已经安装过mysql<br><img src="/usr/image/article/bashProfile/01/checkInstallMySQL.png" alt="Alt text"><br>无输出内容说明系统没有检测到安装过mysql。<br>若检查到存在安装文件，则先卸载，卸载前先停止mysql服务。</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># service mysql status#查看mysql服务启动状态</span><br>[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># service mysql stop  #停止mysql服务</span><br></code></pre></td></tr></table></figure><blockquote><p>卸载之前的版本</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># rpm –qa|grep –i mysql</span><br>[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># rpm –e xxxx[之前安装的版本] --nodeps#卸载mysql版本</span><br></code></pre></td></tr></table></figure><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><blockquote><p>直接使用yum命令下载mysql8.0来进行安装，安装过程会有问题，这里我们需要使用rpm命令先来进行下载。下载路径为：<a href="http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm">http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</a><br>在Linux中下载命令为：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@XXX</span> <span class="hljs-operator">~</span>]# rpm <span class="hljs-operator">-</span>Uvh http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>dev.mysql.com<span class="hljs-operator">/</span><span class="hljs-keyword">get</span><span class="hljs-operator">/</span>mysql<span class="hljs-operator">-</span>community<span class="hljs-operator">-</span><span class="hljs-keyword">release</span><span class="hljs-operator">-</span>el7<span class="hljs-number">-5.</span>noarch.rpm<br></code></pre></td></tr></table></figure><p><img src="/usr/image/article/bashProfile/01/downlaodMySQLURL.png" alt="Alt text"></p><blockquote><p>下载完成之后查看一下都有哪些mysql的文件，使用命令：</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># yum repolist enabled | grep <span class="hljs-string">&quot;mysql.*-community.*&quot;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>效果如图：<br><img src="/usr/image/article/bashProfile/01/queryMySQLfiles.png" alt="Alt text"><br>####安装<br>下面就可以使用yum进行安装。输入命令如下：</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># yum install mysql-community-server</span><br></code></pre></td></tr></table></figure><blockquote><p>效果如图<br><img src="/usr/image/article/bashProfile/01/installMySQL01.png" alt="Alt text"><br>安装过程中会提示安装一些相关的软件，这里点击”y”回车就可以了，如图：<br><img src="/usr/image/article/bashProfile/01/installMySQL02.png" alt="Alt text"><br>还有一个文件需要安装，继续点击”y”回车，如图：<br><img src="/usr/image/article/bashProfile/01/installMySQL03.png" alt="Alt text"><br>这样mysql就安装成功啦。<br>####基础信息配置<br>在配置信息之前，我们先去阿里云实例进行安全组配置，开放3306mysql服务端口。<br><img src="/usr/image/article/bashProfile/01/aliyunManageSecurity.png" alt="Alt text"><br>不过还没有结束，还需要进行一些配置信息哦。<br>首先将mysql服务启动，开启mysql的进程，使用命令：<br>service mysqld start，效果图如下：<br><img src="/usr/image/article/bashProfile/01/mysqldStart.png" alt="Alt text"><br>查看mysql服务进程信息，使用命令：<br>service mysqld status，效果图如下：<br><img src="/usr/image/article/bashProfile/01/mysqldStatus.png" alt="Alt text"><br>Mysql服务启动之后，还选哟一些基本信息的配置。输入设置命令：</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># mysql_secure_installation</span><br></code></pre></td></tr></table></figure><blockquote><p>效果如图：<br><img src="/usr/image/article/bashProfile/01/mysqlSecureInstallation.png" alt="Alt text"><br>这里需要注意一下：<br>初次安装时，只需要回车即可，如果以前安装过，这里会提示需要输入root密码，键入root密码回车。这点请稍微注意一下。。<br>下列几处需要设置的地方如图：<br><img src="/usr/image/article/bashProfile/01/mysqlSecureInstallationSettings.png" alt="Alt text"><br>登陆mysql，命令如下：</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># mysql –u root –p</span><br></code></pre></td></tr></table></figure><blockquote><p>输入数据库root的密码回车，如下图：<br><img src="/usr/image/article/bashProfile/01/loginMySQL.png" alt="Alt text"><br>Mysql就正式安装设置完毕啦，是不是so easy!<br>####Navicat连接数据库<br>很显然命令行方式很不适合开发使用，可视化也不强，个人推荐使用Navicat Premium数据库连接工具连接mysql数据库，方便！<br>输入连接信息，如图下：<br><img src="/usr/image/article/bashProfile/01/checkNavicatLoginMysql.png" alt="Alt text"><br>点击连接测试，如图下：<br><img src="/usr/image/article/bashProfile/01/mysqlError1130.png" alt="Alt text"><br>会出现”Host is not allowed to connect to this MySQL server”<br>如何解决这个问题呢？很明显这是不允许远程登录，只能在localhost主机进行登录。所以需要授权，命令方法如下：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@XXX</span> <span class="hljs-operator">~</span>]# mysql –u root <span class="hljs-operator">-</span>p<br>Enter password: <br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION;<br>mysql<span class="hljs-operator">&gt;</span> FLUSH PRIVILEGES;<br>mysql<span class="hljs-operator">&gt;</span> QUIT;<br></code></pre></td></tr></table></figure><blockquote><p>如下图所示：<br><img src="/usr/image/article/bashProfile/01/solveMysqlError1130.png" alt="Alt text"><br>回来再点击“连接测试”，会出现下图报错：<br><img src="/usr/image/article/bashProfile/01/mysqlError1045.png" alt="Alt text"><br>不着急，现在就解决这个问题。<br>在SecureCRT中登录mysql，查询mysql.user表信息，将密码为空的数据删除掉即可，删除空账号和空密码的数据，命令如下：</p></blockquote><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">[root@XXX ~]# mysql –u root –p<br>Enter password: <br>mysql&gt; use mysql;<br>mysql&gt; <span class="hljs-keyword">select</span> Host,<span class="hljs-keyword">User</span>,<span class="hljs-keyword">Password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><p><img src="/usr/image/article/bashProfile/01/selectMysqlUser.png" alt="Alt text"></p><blockquote><p>删除User和Password为空的数据，放心，可以删的，命令如下：<br>delete from mysql.user where Password=’’;<br>在刚刚的mysql_secure_installation中我们已经配置了root的登录密码，在这里我们也还可以设置root密码，命令如下：<br>Update mysql.user set password=password(‘root密码’) where Host=’%’;<br>最后请一定要做的操作是：刷新权限<br>Flush privileges;<br>退出：quit;<br>再回来连接测试，如下图：<br><img src="/usr/image/article/bashProfile/01/checkNavicatLoginMysqlSuccess.png" alt="Alt text"><br>Mysql现在是彻底弄好啦。请尽情的增删改查吧骚年~<br>####解决中文乱码<br>进入目录</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># cd /usr/share/mysql</span><br>[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># vi my-default.cnf</span><br></code></pre></td></tr></table></figure><blockquote><p>添加如下配置信息：<br><img src="/usr/image/article/bashProfile/01/mysqlUTF8.png" alt="Alt text"><br>重启mysql服务</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># service mysqld restart</span><br></code></pre></td></tr></table></figure><p>##安装Apache<br>####检查、删除、安装</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># rpm –qa|grep httpd     #检查是否安装apache</span><br>[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># rpm –e 包名 –nodeps    #若有则删除</span><br></code></pre></td></tr></table></figure><p><img src="/usr/image/article/bashProfile/01/checkInstallApache.png" alt="Alt text"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># yum install httpd #安装，根据提示，输入Y即可</span><br></code></pre></td></tr></table></figure><p><img src="/usr/image/article/bashProfile/01/installApache01.png" alt="Alt text"></p><blockquote><p>需要确认安装一些组件，输入Y即可：<br><img src="/usr/image/article/bashProfile/01/installApache02.png" alt="Alt text"><br>####启动、测试<br>启动命令如下：</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># service httpd start</span><br></code></pre></td></tr></table></figure><p><img src="/usr/image/article/bashProfile/01/httpdStart.png" alt="Alt text"></p><blockquote><p>查看apache服务停启情况如下：</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta"># Service httpd status</span><br></code></pre></td></tr></table></figure><p><img src="/usr/image/article/bashProfile/01/httpdStatus.png" alt="Alt text"></p><blockquote><p>此时需要注意一点的是，安全组规则需要添加端口80的安全组：<br><img src="/usr/image/article/bashProfile/01/aliyunManageSecurity01.png" alt="Alt text"><br>在浏览器中输入服ip，如下表示apache安装成功：<br><img src="/usr/image/article/bashProfile/01/httpdTest.png" alt="Alt text"><br>##安装PHP<br>####安装PHP</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@XXX</span> ~]<span class="hljs-meta">#yum install php</span><br></code></pre></td></tr></table></figure><p><img src="/usr/image/article/bashProfile/01/installPHP01.png" alt="Alt text"></p><blockquote><p>输入”y”回车<br><img src="/usr/image/article/bashProfile/01/installPHP02.png" alt="Alt text"><br>安装成功<br>安装组件，支持mysql</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">yum install php-mysql php-gd libjpeg* php-imap php-ldap php-odbc php-pear php-<span class="hljs-keyword">xml</span> <span class="hljs-title">php-xmlrpc</span> php-mbstring php-mcrypt php-bcmath php-mhash libmcrypt<br></code></pre></td></tr></table></figure><blockquote><p>根据提示，输入Y即可<br>####启动HTTPD<br>重启httpd</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service httpd restart</span><br></code></pre></td></tr></table></figure><p>在浏览器中访问ip<br><img src="/usr/image/article/bashProfile/01/phpTest.png" alt="Alt text"></p><blockquote><p>OK啦<br>##参考文章<br>[0]<a href="https://www.cnblogs.com/zhaoxd07/p/5580126.html">【PHP】linux搭建PHP运行环境</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>工作笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>真的很充实。。</title>
    <link href="/2017/12/22/2017-12-22-enrich/"/>
    <url>/2017/12/22/2017-12-22-enrich/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>阴阳师开新服了，我到新服务，果断非洲酋长，要哭了</p><p>最近在完成各种需求<br>完全是一个人在搞，也慢慢的在完全接手这个项目，但是还有不懂的地方<br>一边学习一边开发的过程。</p><p>晚上下班了就学习Android，看的书是《第一行代码》第二版<br>打开了新世界的大门哈哈哈哈，很有意思</p><p>最近有下来了一个新的需求，平台的营销活动，<br>不得不佩服甲方的脑洞也是奇大无比啊<br>需求文档里的邀请有礼，花点子真多，那你很棒棒哦</p><p>需求分析是真的麻烦唉，要合理分析修改的地方，合理将分析的工作分配出来<br>这是其中最尴尬的<br>加油吧骚年</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最近真的很忙</title>
    <link href="/2017/11/28/2017-11-28-toobusy/"/>
    <url>/2017/11/28/2017-11-28-toobusy/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近是真的很忙，上个周四上线（平台新增网易支付渠道）<br>涉及到上线的系统有（前端、管理端、支付、账户、清算、营销系统、前端通讯）真的很多需要变更<br>单单新增一个支付渠道，就需要变更这么多系统<br>从上周四晚上23点开始上线变更（需要等平台并账之后进行上线）<br>上线过程一直持续到凌晨1点半。<br>上线之后，就是进行所有的变更的验证。中间也是问题不断，最主要的问题其实是环境问题。<br>这也是最难以察觉的问题，一直持续到周五的上午10点多，才确保没有问题。<br>同时我们也要监控生产环境的交易，有没有出现充值差错。。。<br>这样子一直持续到下午三点多，最后才确认没有重大账务问题。才敢下班回去补交。<br>第一次经历这么漫长的上线，人都要死了。持续工作30个小时，人都要虚脱了。现在回想起来简直后怕！</p><p>周六的时候，平台出现网易支付的对账问题，流程过不去<br>于是我紧急的打开电脑，开始查看日志，查看错误日志，定位问题所在。<br>发现有一张表数据的卖家账号定义的字段长度小了，由于在测试环境中，这个字段是可以的<br>生产的时候，这个字段就是超长了，于是赶紧将表字段长度和平台的数据对象的长度定长一点<br>保证数据可以存表。</p><p>程序猿真的很苦逼</p><p>下次我将网易支付的整个流程总结一下。。这篇博客也是我在周二的上午，上班时间忙里偷闲的草草写出来的<br>因为我实在没有其他时间来写博客了T_T</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加油吧 骚年QAQ</title>
    <link href="/2017/11/08/2017-11-08-fighting/"/>
    <url>/2017/11/08/2017-11-08-fighting/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>想早点下班..</strong></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 这两个星期下来，基本是每天加班到晚上9点。</p><p>可以说过得相当充实了，每天的工作也是面对不同的挑战，查找问题，定位问题，解决问题。还要协调和客户之前的关系，这个才是造成工作太累的主要原因了。QAQ</p><p>此刻的我正坐在床上，架着笔记本写着这吐槽篇。哈哈，本来搭建这博客是用来写工作学习内容的，不是来抱怨的。是真的没地方吐槽了。</p><p>一入码农深似海啊，自己也不是技术出身，大学也从来没有自己单独做过一个系统，更别说代码有多厉害了，简直无法直视了。能进到公司来实习也是不容易啊！大四上学期刚开学的时候，那时候也是考研的同学开始复习的时间段。我迷茫过一段时间，头脑一热，就报了个考研复习班，去了3天听讲座，去了5天复习教室开始考研的复习。我却还在迷茫期，不知道未来何去何从的样子，发现自己都看不进去书了，可能不适合考研这条路吧。经过两天的时间仔细纠结，最终还是决定不去考研了，出去实习去。</p><p>在人生的分岔路口上，最终的决定权在自己手里，做出不会让自己后悔的事情，至少回想也不会觉得后悔吧。</p><h2 id="刷野怪"><a href="#刷野怪" class="headerlink" title="刷野怪"></a>刷野怪</h2><p>7月份我也来到了武汉找工作，找工作的事情就不多说了，第二家就是现在的这家公司。</p><p>进了公司实习，才发现自己能力有大大的问题，关键是基础太差了。白天好好学习熟悉公司项目的写法和逻辑，还有银行业务只是，对了公司主要的客户对象都是银行业务相关的开发。所以学习银行的业务知识也是必要的一个阶段。这真的很重要！</p><p>下班了也不敢闲着，当时是实习嘛，都要写日报。写完日报了，也都会去网站上看学习视频，没办法，基础不行哎。</p><p>公司对新人也有很好的照顾，会一点一点给我新的任务，给我的任务也是没有时间的限制，当时我自己也是幸运吧，进了一个没多大java项目需求的项目组，可以很好的在早点下班的时间好好给自己充充电。</p><p>就这样子实习了大半年时间….</p><h2 id="拿buff"><a href="#拿buff" class="headerlink" title="拿buff"></a>拿buff</h2><p>毕业后，同时也转正了，嗯，我实习了大概有11个月，没毕业证不让转正。</p><p>转正后，进了另外一个项目组，主要是做银行理财业务开发的项目，说白了，就是一个买理财的项目。哈哈哈</p><p>反正我一进项目组，就是一脸蒙蔽吧，平时开发完全没接触到业务相关的知识，也是自己的不足。</p><p>现在想想，业务知识&gt;代码技术</p><p>真的业务只是是真的重要。编码首先需要的思路，什么是思路，对于我这一行来说，业务知识就是思路，才能写出你的详细设计文档，下一步该处理什么数据，计算数据，请求和响应数据，要什么数据就给什么数据，为了数据的安全性，签名和验签也是必要的。有了思路，才有逻辑，分析好需求文档，下手即思路明确，不明确重新分析。不在乎这点时间，往往写设计文档占用的时间是周期的40%，开发时间是20%，测试时间是40%这个样子。</p><p>说了这么多，就是想多，业务知识真的很重要啊啊啊啊。<br>##打小龙</p><p>从去年毕业到现在，磕磕绊绊的，由于技术或者业务知识不懂，不少被训。说多了都是泪啊！</p><p>现在想想也是自己的奋斗史吧。</p><p>参与了大大小小的项目或者业务的需求开发，接触的东西太多太多了，虽然累了点，都是自己的经历，自己回头想想也很满足。</p><p>我这个阶段也才是打小龙的阶段，还挑不起大担。目前这个平台涉及到支付系统、账户系统、产品系统、清算系统、阿里云前置系统、前端系统、管理端系统、营销系统、前端服务端系统。一共9个系统啊啊啊。</p><p>我还有一个清算系统还没有熟悉，其他的都有接触开发过接口。也是最近新增一个支付渠道，我主要负责了支付系统和清算系统的交易接口开发。也是第一次在清算上开发交易。感觉真的不简单啊啊啊，需要处理的数据太庞大了，会计分录的计算，交易明细对账，还有记一大堆的表数据，一大串的sql语句看得头都大了。清算系统也是整个平台最核心的系统，所有涉及到账务金额的交易都必须在清算做数据处理。系统之间的通讯很多。理清楚这些是真的难啊啊啊。</p><p>我目前也是学习清算系统的所有交易，边开发边学习做笔记，尽快可以接手这个项目吧。也是我目前的一个小目标。</p><h2 id="打男爵"><a href="#打男爵" class="headerlink" title="打男爵"></a>打男爵</h2><p>现在装备不行，等准备起来了，在来挑战…</p><p>待续…..</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>友链</title>
    <link href="/2017/10/22/friends/"/>
    <url>/2017/10/22/friends/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><a href="https://lhcy.org/">以梦为马，奔向远方</a> - 愿我经历的苦难你不要经历，愿我已有的幸福你触手可及</li><li><a href="http://heng07.com/">一恒的网志</a> -  一恒的网志</li><li><a href="http://www.pxwei.com/">彭小伟</a> - 梦想的天空分外蓝</li><li><a href="https://o0o0o0.cn/">三十三言</a> - 穷尽此生，不得拥抱</li><li><a href="https://blog.dazhu1988.com/">猪哥杂记</a> - 凡是遥远的地方对我都有一种诱惑,不是诱惑于美丽,就是诱惑于传说.</li><li><a href="https://ji.ci/">记此</a> - 修己安人</li><li><a href="https://www.linasan.cn/">林阿三</a> - 一个非常喜欢前端并且热爱后端的前端人员</li><li><a href="http://im.dog/">芭比</a> - 仍然在途中，只好相信雨過後有彩虹。</li><li><a href="https://www.fangdongdemao.cn/">房東的貓</a> - 仅仅是喜好，无关任何，我写我的就好，记录下想写的文字而已</li><li><a href="https://cncyu.cn/">他与她的梦</a> - 与其临渊羡鱼，不如退而结网</li><li><a href="http://note-star.cn/">思行者的星球</a> - 我听到耶路撒冷的钟声响起</li><li><a href="https://www.foreverblog.cn/">十年之约</a> - 一个人的寂寞，一群人的狂欢。</li><li><a href="http://storeweb.cn/">个站商店</a> - 一个精致的，带社交元素的个人网站发布平台，博客收录网站</li><li><a href="http://www.hzv5.cn/">吖远zzy</a> - 一个不知名的编程爱好者</li><li><a href="http://www.ruanyifeng.com/blog/">阮一峰的网络日志</a> - 阮一峰的网络日志</li><li><a href="https://www.xiangshitan.com/">响石潭</a> - 何谓响石潭，故乡有一河名小河，小河有一潭名响石潭</li><li><a href="https://www.menhood.wang/">邻男</a> - 援军的日常记录</li><li><a href="https://lzyz.fun/">惊鸿</a> - 援军的日常记录</li><li><a href="https://manman.qian.lu/">格子老师</a> - 遇见每一个孩子的成长</li><li><a href="http://blog.dngz.net/">心灵博客</a> - 生活里 一天天 一些些 一点点 消失了…</li><li><a href="https://www.xcnte.com/">Xcnte’ s Blog</a> - 人要清醒，外面的掌声越热烈越危险</li><li><a href="https://blog.52itstyle.vip/">柒’s Blog</a> - 其实我是一个程序员</li><li><a href="https://jkgblog.com/">Escher’s Log</a> - 一条没有被太阳晒干的咸鱼</li><li><a href="https://blog.52itstyle.vip/">柒’s Blog</a> - 其实我是一个程序员</li><li><a href="https://mrbird.cc/">mrbird</a> - Java </li><li><a href="https://liuyanzhao.com/">言曌博客</a> - 学如逆水行舟，不进则退 </li><li><a href="http://www.glmapper.com/">glmapper</a> - 从程序的世界中全身而退</li><li><a href="http://www.jiangcuigong.com/">摄影博客</a> - 摄影博主</li><li><a href="https://nekodeng.gitee.io/">itsNekoDeng</a> - 十万伏特皮卡丘，梦想是世界和平，想要发光发热</li><li><a href="https://www.aomanhao.top/">AomanHao</a> - 热爱图像处理，优化彩色世界</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次搭建博客平台</title>
    <link href="/2017/10/21/2017-10-21-one/"/>
    <url>/2017/10/21/2017-10-21-one/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>终于搭建成功了</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于</title>
    <link href="/2017/10/21/me/"/>
    <url>/2017/10/21/me/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>欢迎来到我的小站呀，很高兴遇见你！🤝</p></blockquote><h2 id="🏠-关于本站"><a href="#🏠-关于本站" class="headerlink" title="🏠 关于本站"></a>🏠 关于本站</h2><p>觉得个人博客是件很酷的事，于是：<br>2017-10-20：阿里云购买云服务<br>2017-10-20：购买域名：niaobulashi.com<br>2017-10-21：建立博客，取名为<strong>鸟不拉屎</strong><br>2018-06-03：更名为<strong>南屿北岛</strong>（管局说鸟不拉屎含有违章词汇。。）但是我还要叫【鸟不拉屎】 ::aru:nose::<br>2018-06-14：正式挂牌SSL<br>2018-06-15：启用又拍云CDN服务<br>2019-07-03：服务器回炉重造使用宝塔面板<br>2019-07-05：使用又拍云云存储服务<br>2020-04-08：不续费阿里云服务，转移至github page，使用hexo主题，评论记录全无（T。。T）<br>博客存活至今…</p><p>为什么叫【鸟不拉屎（诗）】：形容一个地方相当贫瘠，也就是这个地方缺少发展所需要的必要的条件，甚至连鸟儿都不来。<br>说的就是我，我希望让这地方百花盛开，让自己更加优秀。</p><h2 id="👨‍💻-博主是谁"><a href="#👨‍💻-博主是谁" class="headerlink" title="👨‍💻 博主是谁"></a>👨‍💻 博主是谁</h2><p><a href="http://www.yangtzeu.edu.cn/">长江大学</a>网络工程专业2016年毕业。</p><p>励志减肥。。基本稳定了，不减啦 ::aru:cheer:: </p><p>认为所有事情的发生都是命中注定的，唯一可以改变的是努力让他更好。</p><p>喜欢动漫、番剧、摇滚、游戏</p><p>喜欢去live音乐节听现场</p><p>希望和女朋友去听周杰伦的演唱会</p><p>emmm，玩过**<a href="https://images.niaobulashi.com/typecho/uploads/2019/07/3964700045.jpg">各种steam游戏</a>**，曾经是个游戏宅，还有ns各种卡带游戏</p><p>现在不怎么玩了，该给自己充充电了 ::aru:sweat:: </p><h2 id="⛹-兴趣爱好"><a href="#⛹-兴趣爱好" class="headerlink" title="⛹ 兴趣爱好"></a>⛹ 兴趣爱好</h2><p>本人擅长Ai、Fw、Fl、Br、Ae、Pr、Id、Ps等软件的安装与卸载，精通CSS、Javascript、PHP、ASP、C、C＋＋、C#、Java、Ruby、Perl、Lisp、python、Objective-C、Actionscript、Pascal等单词的拼写，熟悉Windows、Linux、Mac、Android、IOS、WP8等系统的开关机。∠( ᐛ 」∠)＿</p><p> ::aru:tongue:: </p><p>不皮了。<br>Java / JavaScript / SpringMVC / Linux / Mysql / Oracle / Redis缓存技术 / SpringBoot / SpringCloud / Shiro安全框架 / dubbo框架 / AngularJS / VueJs / 移动开发Flutter / 互联网金融相关业务、信托业务等银行业务开发 / 努力造轮子</p><h2 id="📬-联系我呀"><a href="#📬-联系我呀" class="headerlink" title="📬 联系我呀"></a>📬 联系我呀</h2><p><a href="https://github.com/niaobulashi/">GitHub</a><br><a href="https://juejin.im/user/5b3de9155188251aa0161fe4">掘金</a><br><a href="https://www.zhihu.com/people/hu-lang-lang-91/activities">知乎</a><br><a href="https://weibo.com/godloveharry">微博</a></p><h2 id="🚀-我的寄语"><a href="#🚀-我的寄语" class="headerlink" title="🚀 我的寄语"></a>🚀 我的寄语</h2><p>人生有几个十年呢？点点滴滴，用文字记录</p><h2 id="🤡-我是打工人"><a href="#🤡-我是打工人" class="headerlink" title="🤡 我是打工人"></a>🤡 我是打工人</h2><ul><li>2015年8月-2020年3月：ADTEC<br> Java项目工程师</li><li>2020年4月-2020年7月：SOFTSTONE<br> Java项目工程师</li><li>2020年7月-至今：YCWA<br> Java项目工程师</li></ul><h2 id="🎨目前状态"><a href="#🎨目前状态" class="headerlink" title="🎨目前状态"></a>🎨目前状态</h2><p>在西安</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
